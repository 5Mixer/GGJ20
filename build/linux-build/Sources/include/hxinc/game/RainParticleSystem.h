// Generated by Haxe 4.0.5
#ifndef INCLUDED_game_RainParticleSystem
#define INCLUDED_game_RainParticleSystem

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_bonsai_entity_ParticleSystem
#include <hxinc/bonsai/entity/ParticleSystem.h>
#endif
HX_DECLARE_CLASS2(bonsai,entity,Entity)
HX_DECLARE_CLASS2(bonsai,entity,ParticleSystem)
HX_DECLARE_CLASS1(game,RainParticleSystem)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)

namespace game{


class HXCPP_CLASS_ATTRIBUTES RainParticleSystem_obj : public  ::bonsai::entity::ParticleSystem_obj
{
	public:
		typedef  ::bonsai::entity::ParticleSystem_obj super;
		typedef RainParticleSystem_obj OBJ_;
		RainParticleSystem_obj();

	public:
		enum { _hx_ClassId = 0x3178aa1b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="game.RainParticleSystem")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"game.RainParticleSystem"); }
		static hx::ObjectPtr< RainParticleSystem_obj > __new();
		static hx::ObjectPtr< RainParticleSystem_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~RainParticleSystem_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("RainParticleSystem",69,6e,03,4c); }

		void render( ::kha::graphics2::Graphics graphics);

		Float f;
		Float s;
		void update(Float dt);

};

} // end namespace game

#endif /* INCLUDED_game_RainParticleSystem */ 
