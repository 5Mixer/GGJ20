// Generated by Haxe 4.0.5
#ifndef INCLUDED_game_World
#define INCLUDED_game_World

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_bonsai_scene_Scene
#include <hxinc/bonsai/scene/Scene.h>
#endif
HX_DECLARE_CLASS1(bonsai,Engine)
HX_DECLARE_CLASS2(bonsai,entity,Entity)
HX_DECLARE_CLASS2(bonsai,entity,ParticleSystem)
HX_DECLARE_CLASS2(bonsai,input,Input)
HX_DECLARE_CLASS2(bonsai,render,AnimatedSprite)
HX_DECLARE_CLASS2(bonsai,render,SpriteMap)
HX_DECLARE_CLASS2(bonsai,scene,Camera)
HX_DECLARE_CLASS2(bonsai,scene,Scene)
HX_DECLARE_CLASS1(game,Body)
HX_DECLARE_CLASS1(game,BodyPartParticles)
HX_DECLARE_CLASS1(game,Inventory)
HX_DECLARE_CLASS1(game,Structure)
HX_DECLARE_CLASS1(game,SummonCircle)
HX_DECLARE_CLASS1(game,World)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)

namespace game{


class HXCPP_CLASS_ATTRIBUTES World_obj : public  ::bonsai::scene::Scene_obj
{
	public:
		typedef  ::bonsai::scene::Scene_obj super;
		typedef World_obj OBJ_;
		World_obj();

	public:
		enum { _hx_ClassId = 0x158729c0 };

		void __construct( ::bonsai::Engine engine);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="game.World")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"game.World"); }
		static hx::ObjectPtr< World_obj > __new( ::bonsai::Engine engine);
		static hx::ObjectPtr< World_obj > __alloc(hx::Ctx *_hx_ctx, ::bonsai::Engine engine);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~World_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("World",32,06,92,61); }

		 ::game::Inventory inventory;
		inline  ::game::Inventory _hx_set_inventory(hx::StackContext *_hx_ctx, ::game::Inventory _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return inventory=_hx_v; }
		 ::game::BodyPartParticles bodyParticleSystem;
		inline  ::game::BodyPartParticles _hx_set_bodyParticleSystem(hx::StackContext *_hx_ctx, ::game::BodyPartParticles _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return bodyParticleSystem=_hx_v; }
		 ::bonsai::render::AnimatedSprite bodyAnimatedSprite;
		inline  ::bonsai::render::AnimatedSprite _hx_set_bodyAnimatedSprite(hx::StackContext *_hx_ctx, ::bonsai::render::AnimatedSprite _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return bodyAnimatedSprite=_hx_v; }
		 ::bonsai::render::SpriteMap bodySpriteMap;
		inline  ::bonsai::render::SpriteMap _hx_set_bodySpriteMap(hx::StackContext *_hx_ctx, ::bonsai::render::SpriteMap _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return bodySpriteMap=_hx_v; }
		::Array< ::Dynamic> bodies;
		inline ::Array< ::Dynamic> _hx_set_bodies(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return bodies=_hx_v; }
		 ::bonsai::input::Input input;
		inline  ::bonsai::input::Input _hx_set_input(hx::StackContext *_hx_ctx, ::bonsai::input::Input _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return input=_hx_v; }
		 ::bonsai::scene::Camera camera;
		inline  ::bonsai::scene::Camera _hx_set_camera(hx::StackContext *_hx_ctx, ::bonsai::scene::Camera _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return camera=_hx_v; }
		 ::game::SummonCircle summonCircle;
		inline  ::game::SummonCircle _hx_set_summonCircle(hx::StackContext *_hx_ctx, ::game::SummonCircle _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return summonCircle=_hx_v; }
		 ::game::Structure structure;
		inline  ::game::Structure _hx_set_structure(hx::StackContext *_hx_ctx, ::game::Structure _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return structure=_hx_v; }
		Float f;
		void update(Float dt);

		void render( ::kha::graphics2::Graphics g);

		 ::haxe::ds::EnumValueMap zOffset;
		inline  ::haxe::ds::EnumValueMap _hx_set_zOffset(hx::StackContext *_hx_ctx, ::haxe::ds::EnumValueMap _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return zOffset=_hx_v; }
		void explodeBody( ::game::Body body);
		::Dynamic explodeBody_dyn();

};

} // end namespace game

#endif /* INCLUDED_game_World */ 
