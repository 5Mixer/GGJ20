// Generated by Haxe 4.0.5
#ifndef INCLUDED_game_Level1
#define INCLUDED_game_Level1

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_bonsai_scene_Scene
#include <hxinc/bonsai/scene/Scene.h>
#endif
HX_DECLARE_CLASS1(bonsai,Engine)
HX_DECLARE_CLASS2(bonsai,entity,Entity)
HX_DECLARE_CLASS2(bonsai,entity,ParticleSystem)
HX_DECLARE_CLASS2(bonsai,render,Transformation)
HX_DECLARE_CLASS2(bonsai,scene,Scene)
HX_DECLARE_CLASS1(game,Level1)
HX_DECLARE_CLASS1(game,RainParticleSystem)
HX_DECLARE_CLASS1(game,TextParticleSystem)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)

namespace game{


class HXCPP_CLASS_ATTRIBUTES Level1_obj : public  ::bonsai::scene::Scene_obj
{
	public:
		typedef  ::bonsai::scene::Scene_obj super;
		typedef Level1_obj OBJ_;
		Level1_obj();

	public:
		enum { _hx_ClassId = 0x19d037c7 };

		void __construct( ::bonsai::Engine engine);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="game.Level1")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"game.Level1"); }
		static hx::ObjectPtr< Level1_obj > __new( ::bonsai::Engine engine);
		static hx::ObjectPtr< Level1_obj > __alloc(hx::Ctx *_hx_ctx, ::bonsai::Engine engine);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Level1_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Level1",4d,32,e4,d8); }

		 ::game::RainParticleSystem rain;
		inline  ::game::RainParticleSystem _hx_set_rain(hx::StackContext *_hx_ctx, ::game::RainParticleSystem _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return rain=_hx_v; }
		 ::bonsai::render::Transformation transformation;
		inline  ::bonsai::render::Transformation _hx_set_transformation(hx::StackContext *_hx_ctx, ::bonsai::render::Transformation _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return transformation=_hx_v; }
		 ::game::TextParticleSystem t;
		inline  ::game::TextParticleSystem _hx_set_t(hx::StackContext *_hx_ctx, ::game::TextParticleSystem _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return t=_hx_v; }
		void update(Float dt);

		void render( ::kha::graphics2::Graphics g);

};

} // end namespace game

#endif /* INCLUDED_game_Level1 */ 
