// Generated by Haxe 4.0.5
#ifndef INCLUDED_game_NoiseTilemap
#define INCLUDED_game_NoiseTilemap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
HX_DECLARE_CLASS2(bonsai,entity,Entity)
HX_DECLARE_CLASS2(bonsai,render,SpriteMap)
HX_DECLARE_CLASS2(differ,shapes,Polygon)
HX_DECLARE_CLASS2(differ,shapes,Shape)
HX_DECLARE_CLASS1(game,NoiseTilemap)
HX_DECLARE_CLASS1(hxnoise,Perlin)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)
HX_DECLARE_CLASS2(kha,math,Vector2)

namespace game{


class HXCPP_CLASS_ATTRIBUTES NoiseTilemap_obj : public  ::bonsai::entity::Entity_obj
{
	public:
		typedef  ::bonsai::entity::Entity_obj super;
		typedef NoiseTilemap_obj OBJ_;
		NoiseTilemap_obj();

	public:
		enum { _hx_ClassId = 0x7aa83126 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="game.NoiseTilemap")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"game.NoiseTilemap"); }
		static hx::ObjectPtr< NoiseTilemap_obj > __new();
		static hx::ObjectPtr< NoiseTilemap_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~NoiseTilemap_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("NoiseTilemap",d4,5b,88,2d); }

		int width;
		int height;
		 ::bonsai::render::SpriteMap spriteMap;
		inline  ::bonsai::render::SpriteMap _hx_set_spriteMap(hx::StackContext *_hx_ctx, ::bonsai::render::SpriteMap _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return spriteMap=_hx_v; }
		::Array< ::Dynamic> colliders;
		inline ::Array< ::Dynamic> _hx_set_colliders(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return colliders=_hx_v; }
		::Array< ::Dynamic> baseTiles;
		inline ::Array< ::Dynamic> _hx_set_baseTiles(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return baseTiles=_hx_v; }
		::Array< ::Dynamic> tilesByBiome;
		inline ::Array< ::Dynamic> _hx_set_tilesByBiome(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return tilesByBiome=_hx_v; }
		 ::hxnoise::Perlin perlin;
		inline  ::hxnoise::Perlin _hx_set_perlin(hx::StackContext *_hx_ctx, ::hxnoise::Perlin _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return perlin=_hx_v; }
		Float seed;
		Float seaLevel;
		 ::kha::math::Vector2 findSpawn();
		::Dynamic findSpawn_dyn();

		int getTile(int x,int y);
		::Dynamic getTile_dyn();

		void render( ::kha::graphics2::Graphics graphics);

		void update(Float dt);

};

} // end namespace game

#endif /* INCLUDED_game_NoiseTilemap */ 
