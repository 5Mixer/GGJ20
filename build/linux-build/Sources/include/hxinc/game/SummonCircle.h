// Generated by Haxe 4.0.5
#ifndef INCLUDED_game_SummonCircle
#define INCLUDED_game_SummonCircle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
HX_DECLARE_CLASS2(bonsai,entity,Entity)
HX_DECLARE_CLASS2(bonsai,render,AnimatedSprite)
HX_DECLARE_CLASS1(game,Body)
HX_DECLARE_CLASS1(game,BodyPart)
HX_DECLARE_CLASS1(game,SummonCircle)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)

namespace game{


class HXCPP_CLASS_ATTRIBUTES SummonCircle_obj : public  ::bonsai::entity::Entity_obj
{
	public:
		typedef  ::bonsai::entity::Entity_obj super;
		typedef SummonCircle_obj OBJ_;
		SummonCircle_obj();

	public:
		enum { _hx_ClassId = 0x7ebcd057 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="game.SummonCircle")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"game.SummonCircle"); }
		static hx::ObjectPtr< SummonCircle_obj > __new();
		static hx::ObjectPtr< SummonCircle_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SummonCircle_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SummonCircle",31,b7,f0,1c); }

		int width;
		int height;
		 ::bonsai::render::AnimatedSprite animation;
		inline  ::bonsai::render::AnimatedSprite _hx_set_animation(hx::StackContext *_hx_ctx, ::bonsai::render::AnimatedSprite _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return animation=_hx_v; }
		 ::game::BodyPart head;
		inline  ::game::BodyPart _hx_set_head(hx::StackContext *_hx_ctx, ::game::BodyPart _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return head=_hx_v; }
		 ::game::BodyPart chest;
		inline  ::game::BodyPart _hx_set_chest(hx::StackContext *_hx_ctx, ::game::BodyPart _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return chest=_hx_v; }
		 ::game::BodyPart leftArm;
		inline  ::game::BodyPart _hx_set_leftArm(hx::StackContext *_hx_ctx, ::game::BodyPart _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return leftArm=_hx_v; }
		 ::game::BodyPart rightArm;
		inline  ::game::BodyPart _hx_set_rightArm(hx::StackContext *_hx_ctx, ::game::BodyPart _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return rightArm=_hx_v; }
		 ::game::BodyPart leftLeg;
		inline  ::game::BodyPart _hx_set_leftLeg(hx::StackContext *_hx_ctx, ::game::BodyPart _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return leftLeg=_hx_v; }
		 ::game::BodyPart rightLeg;
		inline  ::game::BodyPart _hx_set_rightLeg(hx::StackContext *_hx_ctx, ::game::BodyPart _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return rightLeg=_hx_v; }
		::Array< ::Dynamic> armParts;
		inline ::Array< ::Dynamic> _hx_set_armParts(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return armParts=_hx_v; }
		::Array< ::Dynamic> legParts;
		inline ::Array< ::Dynamic> _hx_set_legParts(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return legParts=_hx_v; }
		::Array< ::Dynamic> chestParts;
		inline ::Array< ::Dynamic> _hx_set_chestParts(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return chestParts=_hx_v; }
		::Array< ::Dynamic> headParts;
		inline ::Array< ::Dynamic> _hx_set_headParts(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return headParts=_hx_v; }
		 ::bonsai::render::AnimatedSprite animatedSprite;
		inline  ::bonsai::render::AnimatedSprite _hx_set_animatedSprite(hx::StackContext *_hx_ctx, ::bonsai::render::AnimatedSprite _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return animatedSprite=_hx_v; }
		 ::haxe::ds::EnumValueMap bodyLayers;
		inline  ::haxe::ds::EnumValueMap _hx_set_bodyLayers(hx::StackContext *_hx_ctx, ::haxe::ds::EnumValueMap _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return bodyLayers=_hx_v; }
		bool isComplete();
		::Dynamic isComplete_dyn();

		 ::game::Body getBody();
		::Dynamic getBody_dyn();

		void clear();
		::Dynamic clear_dyn();

		bool addPart( ::game::BodyPart part);
		::Dynamic addPart_dyn();

		void render( ::kha::graphics2::Graphics graphics);

		void update(Float dt);

};

} // end namespace game

#endif /* INCLUDED_game_SummonCircle */ 
