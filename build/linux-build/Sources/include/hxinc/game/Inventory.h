// Generated by Haxe 4.0.5
#ifndef INCLUDED_game_Inventory
#define INCLUDED_game_Inventory

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
HX_DECLARE_CLASS2(bonsai,entity,Entity)
HX_DECLARE_CLASS1(game,Inventory)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)

namespace game{


class HXCPP_CLASS_ATTRIBUTES Inventory_obj : public  ::bonsai::entity::Entity_obj
{
	public:
		typedef  ::bonsai::entity::Entity_obj super;
		typedef Inventory_obj OBJ_;
		Inventory_obj();

	public:
		enum { _hx_ClassId = 0x0632590a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="game.Inventory")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"game.Inventory"); }
		static hx::ObjectPtr< Inventory_obj > __new();
		static hx::ObjectPtr< Inventory_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Inventory_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Inventory",7c,56,89,ea); }

		 ::haxe::ds::EnumValueMap items;
		inline  ::haxe::ds::EnumValueMap _hx_set_items(hx::StackContext *_hx_ctx, ::haxe::ds::EnumValueMap _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return items=_hx_v; }
		void render( ::kha::graphics2::Graphics graphics);

};

} // end namespace game

#endif /* INCLUDED_game_Inventory */ 
