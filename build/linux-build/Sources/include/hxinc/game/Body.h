// Generated by Haxe 4.0.5
#ifndef INCLUDED_game_Body
#define INCLUDED_game_Body

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
HX_DECLARE_CLASS2(bonsai,entity,Entity)
HX_DECLARE_CLASS2(bonsai,render,AnimatedSprite)
HX_DECLARE_CLASS2(differ,shapes,Circle)
HX_DECLARE_CLASS2(differ,shapes,Shape)
HX_DECLARE_CLASS1(game,Body)
HX_DECLARE_CLASS1(game,BodyPart)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)
HX_DECLARE_CLASS2(kha,math,Vector2)

namespace game{


class HXCPP_CLASS_ATTRIBUTES Body_obj : public  ::bonsai::entity::Entity_obj
{
	public:
		typedef  ::bonsai::entity::Entity_obj super;
		typedef Body_obj OBJ_;
		Body_obj();

	public:
		enum { _hx_ClassId = 0x26a89458 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="game.Body")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"game.Body"); }
		static hx::ObjectPtr< Body_obj > __new();
		static hx::ObjectPtr< Body_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Body_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Body",c2,a6,f4,2b); }

		 ::game::BodyPart head;
		inline  ::game::BodyPart _hx_set_head(hx::StackContext *_hx_ctx, ::game::BodyPart _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return head=_hx_v; }
		 ::game::BodyPart chest;
		inline  ::game::BodyPart _hx_set_chest(hx::StackContext *_hx_ctx, ::game::BodyPart _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return chest=_hx_v; }
		 ::game::BodyPart leftArm;
		inline  ::game::BodyPart _hx_set_leftArm(hx::StackContext *_hx_ctx, ::game::BodyPart _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return leftArm=_hx_v; }
		 ::game::BodyPart rightArm;
		inline  ::game::BodyPart _hx_set_rightArm(hx::StackContext *_hx_ctx, ::game::BodyPart _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return rightArm=_hx_v; }
		 ::game::BodyPart leftLeg;
		inline  ::game::BodyPart _hx_set_leftLeg(hx::StackContext *_hx_ctx, ::game::BodyPart _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return leftLeg=_hx_v; }
		 ::game::BodyPart rightLeg;
		inline  ::game::BodyPart _hx_set_rightLeg(hx::StackContext *_hx_ctx, ::game::BodyPart _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return rightLeg=_hx_v; }
		int mohawk;
		int health;
		Float attackCooldown;
		Float vz;
		Float z;
		Float vx;
		Float vy;
		 ::differ::shapes::Circle collider;
		inline  ::differ::shapes::Circle _hx_set_collider(hx::StackContext *_hx_ctx, ::differ::shapes::Circle _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return collider=_hx_v; }
		bool friendly;
		 ::haxe::ds::EnumValueMap bodyLayers;
		inline  ::haxe::ds::EnumValueMap _hx_set_bodyLayers(hx::StackContext *_hx_ctx, ::haxe::ds::EnumValueMap _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return bodyLayers=_hx_v; }
		 ::haxe::ds::EnumValueMap mohawks;
		inline  ::haxe::ds::EnumValueMap _hx_set_mohawks(hx::StackContext *_hx_ctx, ::haxe::ds::EnumValueMap _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return mohawks=_hx_v; }
		 ::bonsai::render::AnimatedSprite animatedSprite;
		inline  ::bonsai::render::AnimatedSprite _hx_set_animatedSprite(hx::StackContext *_hx_ctx, ::bonsai::render::AnimatedSprite _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return animatedSprite=_hx_v; }
		 ::kha::math::Vector2 targetPosition;
		inline  ::kha::math::Vector2 _hx_set_targetPosition(hx::StackContext *_hx_ctx, ::kha::math::Vector2 _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return targetPosition=_hx_v; }
		Float time;
		 ::game::BodyPart drawnHead;
		inline  ::game::BodyPart _hx_set_drawnHead(hx::StackContext *_hx_ctx, ::game::BodyPart _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return drawnHead=_hx_v; }
		void update(Float dt);

		int getItemDamage( ::game::BodyPart bodyPart);
		::Dynamic getItemDamage_dyn();

		int getDamage();
		::Dynamic getDamage_dyn();

		void render( ::kha::graphics2::Graphics graphics);

};

} // end namespace game

#endif /* INCLUDED_game_Body */ 
