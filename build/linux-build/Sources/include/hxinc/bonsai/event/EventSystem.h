// Generated by Haxe 4.0.5
#ifndef INCLUDED_bonsai_event_EventSystem
#define INCLUDED_bonsai_event_EventSystem

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_d06aab7413059a95_5_new)
HX_DECLARE_CLASS2(bonsai,event,EventSystem)

namespace bonsai{
namespace event{


class HXCPP_CLASS_ATTRIBUTES EventSystem_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef EventSystem_obj OBJ_;
		EventSystem_obj();

	public:
		enum { _hx_ClassId = 0x1eeb9be9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="bonsai.event.EventSystem")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"bonsai.event.EventSystem"); }

		inline static hx::ObjectPtr< EventSystem_obj > __new() {
			hx::ObjectPtr< EventSystem_obj > __this = new EventSystem_obj();
			__this->__construct();
			return __this;
		}

		inline static hx::ObjectPtr< EventSystem_obj > __alloc(hx::Ctx *_hx_ctx) {
			EventSystem_obj *__this = (EventSystem_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EventSystem_obj), false, "bonsai.event.EventSystem"));
			*(void **)__this = EventSystem_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_d06aab7413059a95_5_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~EventSystem_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("EventSystem",89,7a,62,2a); }

		void listen( ::Dynamic event, ::Dynamic func);
		::Dynamic listen_dyn();

		void dispatch( ::Dynamic event);
		::Dynamic dispatch_dyn();

};

} // end namespace bonsai
} // end namespace event

#endif /* INCLUDED_bonsai_event_EventSystem */ 
