// Generated by Haxe 4.0.5
#ifndef INCLUDED_bonsai_input_Input
#define INCLUDED_bonsai_input_Input

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(bonsai,event,EventSystem)
HX_DECLARE_CLASS2(bonsai,input,Input)
HX_DECLARE_CLASS2(kha,math,Vector2)

namespace bonsai{
namespace input{


class HXCPP_CLASS_ATTRIBUTES Input_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Input_obj OBJ_;
		Input_obj();

	public:
		enum { _hx_ClassId = 0x53b66f5a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="bonsai.input.Input")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"bonsai.input.Input"); }
		static hx::ObjectPtr< Input_obj > __new();
		static hx::ObjectPtr< Input_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Input_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Input",ea,33,4b,51); }

		 ::kha::math::Vector2 mousePosition;
		inline  ::kha::math::Vector2 _hx_set_mousePosition(hx::StackContext *_hx_ctx, ::kha::math::Vector2 _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return mousePosition=_hx_v; }
		bool mouseLeftDown;
		bool mouseRightDown;
		 ::bonsai::event::EventSystem events;
		inline  ::bonsai::event::EventSystem _hx_set_events(hx::StackContext *_hx_ctx, ::bonsai::event::EventSystem _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return events=_hx_v; }
		int absoluteScroll;
		bool mouseInside;
		::Array< int > downKeys;
		inline ::Array< int > _hx_set_downKeys(hx::StackContext *_hx_ctx,::Array< int > _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return downKeys=_hx_v; }
		bool isAnyKeyDown(::Array< int > keys);
		::Dynamic isAnyKeyDown_dyn();

		void mouseDown(int button,Float x,Float y);
		::Dynamic mouseDown_dyn();

		void mouseUp(int button,Float x,Float y);
		::Dynamic mouseUp_dyn();

		void mouseMove(Float x,Float y,int dx,int dy);
		::Dynamic mouseMove_dyn();

		void mouseWheel(int delta);
		::Dynamic mouseWheel_dyn();

		void mouseLeave();
		::Dynamic mouseLeave_dyn();

		void keyDown(int key);
		::Dynamic keyDown_dyn();

		void keyUp(int key);
		::Dynamic keyUp_dyn();

		void keyPress(::String _hx_char);
		::Dynamic keyPress_dyn();

};

} // end namespace bonsai
} // end namespace input

#endif /* INCLUDED_bonsai_input_Input */ 
