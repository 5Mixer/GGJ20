// Generated by Haxe 4.0.5
#ifndef INCLUDED_bonsai_Engine
#define INCLUDED_bonsai_Engine

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(bonsai,Engine)
HX_DECLARE_CLASS2(bonsai,event,EventSystem)
HX_DECLARE_CLASS2(bonsai,scene,Scene)
HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Framebuffer)

namespace bonsai{


class HXCPP_CLASS_ATTRIBUTES Engine_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Engine_obj OBJ_;
		Engine_obj();

	public:
		enum { _hx_ClassId = 0x0ee500c0 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="bonsai.Engine")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"bonsai.Engine"); }
		static hx::ObjectPtr< Engine_obj > __new();
		static hx::ObjectPtr< Engine_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Engine_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Engine",e2,bb,18,31); }

		 ::bonsai::event::EventSystem events;
		inline  ::bonsai::event::EventSystem _hx_set_events(hx::StackContext *_hx_ctx, ::bonsai::event::EventSystem _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return events=_hx_v; }
		 ::bonsai::scene::Scene currentScene;
		inline  ::bonsai::scene::Scene _hx_set_currentScene(hx::StackContext *_hx_ctx, ::bonsai::scene::Scene _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return currentScene=_hx_v; }
		Float time;
		void start(::String title,hx::Null< int >  width,hx::Null< int >  height, ::Dynamic onReady);
		::Dynamic start_dyn();

		void update();
		::Dynamic update_dyn();

		void render( ::kha::Framebuffer framebuffer);
		::Dynamic render_dyn();

};

} // end namespace bonsai

#endif /* INCLUDED_bonsai_Engine */ 
