// Generated by Haxe 4.0.5
#ifndef INCLUDED_bonsai_scene_Scene
#define INCLUDED_bonsai_scene_Scene

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(bonsai,entity,Entity)
HX_DECLARE_CLASS2(bonsai,scene,Scene)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)

namespace bonsai{
namespace scene{


class HXCPP_CLASS_ATTRIBUTES Scene_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Scene_obj OBJ_;
		Scene_obj();

	public:
		enum { _hx_ClassId = 0x1b8885fe };

		void __construct(::String name);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="bonsai.scene.Scene")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"bonsai.scene.Scene"); }
		static hx::ObjectPtr< Scene_obj > __new(::String name);
		static hx::ObjectPtr< Scene_obj > __alloc(hx::Ctx *_hx_ctx,::String name);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Scene_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Scene",2c,49,ff,0b); }

		::Array< ::Dynamic> layers;
		inline ::Array< ::Dynamic> _hx_set_layers(hx::StackContext *_hx_ctx,::Array< ::Dynamic> _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return layers=_hx_v; }
		::String name;
		inline ::String _hx_set_name(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return name=_hx_v; }
		void add( ::bonsai::entity::Entity entity,hx::Null< int >  layer);
		::Dynamic add_dyn();

		void remove( ::bonsai::entity::Entity entity);
		::Dynamic remove_dyn();

		void update(Float dt);
		::Dynamic update_dyn();

		void render( ::kha::graphics2::Graphics graphics);
		::Dynamic render_dyn();

};

} // end namespace bonsai
} // end namespace scene

#endif /* INCLUDED_bonsai_scene_Scene */ 
