// Generated by Haxe 4.0.5
#ifndef INCLUDED_bonsai_scene_Camera
#define INCLUDED_bonsai_scene_Camera

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(bonsai,render,Transformation)
HX_DECLARE_CLASS2(bonsai,scene,Camera)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)
HX_DECLARE_CLASS2(kha,math,Vector2)

namespace bonsai{
namespace scene{


class HXCPP_CLASS_ATTRIBUTES Camera_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Camera_obj OBJ_;
		Camera_obj();

	public:
		enum { _hx_ClassId = 0x74acb5b3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="bonsai.scene.Camera")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"bonsai.scene.Camera"); }
		static hx::ObjectPtr< Camera_obj > __new();
		static hx::ObjectPtr< Camera_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Camera_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Camera",c5,ba,20,ec); }

		 ::bonsai::render::Transformation transformation;
		inline  ::bonsai::render::Transformation _hx_set_transformation(hx::StackContext *_hx_ctx, ::bonsai::render::Transformation _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return transformation=_hx_v; }
		 ::bonsai::render::Transformation shakeTransformation;
		inline  ::bonsai::render::Transformation _hx_set_shakeTransformation(hx::StackContext *_hx_ctx, ::bonsai::render::Transformation _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return shakeTransformation=_hx_v; }
		Float shakeDuration;
		int shakeStrength;
		 ::kha::math::Vector2 position;
		inline  ::kha::math::Vector2 _hx_set_position(hx::StackContext *_hx_ctx, ::kha::math::Vector2 _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return position=_hx_v; }
		void update(Float delta);
		::Dynamic update_dyn();

		void apply( ::kha::graphics2::Graphics g);
		::Dynamic apply_dyn();

		void finish( ::kha::graphics2::Graphics g);
		::Dynamic finish_dyn();

		void shake(Float duration,int strength);
		::Dynamic shake_dyn();

};

} // end namespace bonsai
} // end namespace scene

#endif /* INCLUDED_bonsai_scene_Camera */ 
