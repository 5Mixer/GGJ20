// Generated by Haxe 4.0.5
#ifndef INCLUDED_bonsai_entity_ParticleSystem
#define INCLUDED_bonsai_entity_ParticleSystem

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
HX_DECLARE_CLASS2(bonsai,entity,Entity)
HX_DECLARE_CLASS2(bonsai,entity,ParticleSystem)

namespace bonsai{
namespace entity{


class HXCPP_CLASS_ATTRIBUTES ParticleSystem_obj : public  ::bonsai::entity::Entity_obj
{
	public:
		typedef  ::bonsai::entity::Entity_obj super;
		typedef ParticleSystem_obj OBJ_;
		ParticleSystem_obj();

	public:
		enum { _hx_ClassId = 0x53b01352 };

		void __construct(hx::Null< int >  __o_poolMaximum);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="bonsai.entity.ParticleSystem")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"bonsai.entity.ParticleSystem"); }
		static hx::ObjectPtr< ParticleSystem_obj > __new(hx::Null< int >  __o_poolMaximum);
		static hx::ObjectPtr< ParticleSystem_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_poolMaximum);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ParticleSystem_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ParticleSystem",f5,d5,be,12); }

		::cpp::VirtualArray members;
		inline ::cpp::VirtualArray _hx_set_members(hx::StackContext *_hx_ctx,::cpp::VirtualArray _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return members=_hx_v; }
		int poolMaximum;
		int index;
		void spawnParticle( ::Dynamic particle);
		::Dynamic spawnParticle_dyn();

};

} // end namespace bonsai
} // end namespace entity

#endif /* INCLUDED_bonsai_entity_ParticleSystem */ 
