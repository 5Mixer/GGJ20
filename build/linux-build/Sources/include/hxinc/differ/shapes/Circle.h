// Generated by Haxe 4.0.5
#ifndef INCLUDED_differ_shapes_Circle
#define INCLUDED_differ_shapes_Circle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_differ_shapes_Shape
#include <hxinc/differ/shapes/Shape.h>
#endif
HX_DECLARE_CLASS2(differ,data,RayCollision)
HX_DECLARE_CLASS2(differ,data,ShapeCollision)
HX_DECLARE_CLASS2(differ,shapes,Circle)
HX_DECLARE_CLASS2(differ,shapes,Polygon)
HX_DECLARE_CLASS2(differ,shapes,Ray)
HX_DECLARE_CLASS2(differ,shapes,Shape)

namespace differ{
namespace shapes{


class HXCPP_CLASS_ATTRIBUTES Circle_obj : public  ::differ::shapes::Shape_obj
{
	public:
		typedef  ::differ::shapes::Shape_obj super;
		typedef Circle_obj OBJ_;
		Circle_obj();

	public:
		enum { _hx_ClassId = 0x059b76f8 };

		void __construct(Float x,Float y,Float radius);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="differ.shapes.Circle")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"differ.shapes.Circle"); }
		static hx::ObjectPtr< Circle_obj > __new(Float x,Float y,Float radius);
		static hx::ObjectPtr< Circle_obj > __alloc(hx::Ctx *_hx_ctx,Float x,Float y,Float radius);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Circle_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Circle",30,e6,a1,8a); }

		Float _radius;
		 ::differ::data::ShapeCollision test( ::differ::shapes::Shape shape, ::differ::data::ShapeCollision into);

		 ::differ::data::ShapeCollision testCircle( ::differ::shapes::Circle circle, ::differ::data::ShapeCollision into,hx::Null< bool >  flip);

		 ::differ::data::ShapeCollision testPolygon( ::differ::shapes::Polygon polygon, ::differ::data::ShapeCollision into,hx::Null< bool >  flip);

		 ::differ::data::RayCollision testRay( ::differ::shapes::Ray ray, ::differ::data::RayCollision into);

		Float get_radius();
		::Dynamic get_radius_dyn();

		Float get_transformedRadius();
		::Dynamic get_transformedRadius_dyn();

};

} // end namespace differ
} // end namespace shapes

#endif /* INCLUDED_differ_shapes_Circle */ 
