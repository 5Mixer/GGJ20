// Generated by Haxe 4.0.5
#ifndef INCLUDED_differ_data_RayCollision
#define INCLUDED_differ_data_RayCollision

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(differ,data,RayCollision)
HX_DECLARE_CLASS2(differ,shapes,Ray)
HX_DECLARE_CLASS2(differ,shapes,Shape)

namespace differ{
namespace data{


class HXCPP_CLASS_ATTRIBUTES RayCollision_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef RayCollision_obj OBJ_;
		RayCollision_obj();

	public:
		enum { _hx_ClassId = 0x1d906488 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="differ.data.RayCollision")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"differ.data.RayCollision"); }
		static hx::ObjectPtr< RayCollision_obj > __new();
		static hx::ObjectPtr< RayCollision_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~RayCollision_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("RayCollision",48,f1,d7,43); }

		 ::differ::shapes::Shape shape;
		inline  ::differ::shapes::Shape _hx_set_shape(hx::StackContext *_hx_ctx, ::differ::shapes::Shape _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return shape=_hx_v; }
		 ::differ::shapes::Ray ray;
		inline  ::differ::shapes::Ray _hx_set_ray(hx::StackContext *_hx_ctx, ::differ::shapes::Ray _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return ray=_hx_v; }
		Float start;
		Float end;
		 ::differ::data::RayCollision reset();
		::Dynamic reset_dyn();

		void copy_from( ::differ::data::RayCollision other);
		::Dynamic copy_from_dyn();

		 ::differ::data::RayCollision clone();
		::Dynamic clone_dyn();

};

} // end namespace differ
} // end namespace data

#endif /* INCLUDED_differ_data_RayCollision */ 
