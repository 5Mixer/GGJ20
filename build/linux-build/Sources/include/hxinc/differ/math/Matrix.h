// Generated by Haxe 4.0.5
#ifndef INCLUDED_differ_math_Matrix
#define INCLUDED_differ_math_Matrix

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(differ,math,Matrix)
HX_DECLARE_CLASS2(differ,math,Vector)

namespace differ{
namespace math{


class HXCPP_CLASS_ATTRIBUTES Matrix_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Matrix_obj OBJ_;
		Matrix_obj();

	public:
		enum { _hx_ClassId = 0x61d3dcdb };

		void __construct(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="differ.math.Matrix")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"differ.math.Matrix"); }
		static hx::ObjectPtr< Matrix_obj > __new(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty);
		static hx::ObjectPtr< Matrix_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Matrix_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Matrix",61,aa,5c,f0); }

		Float a;
		Float b;
		Float c;
		Float d;
		Float tx;
		Float ty;
		Float _last_rotation;
		void identity();
		::Dynamic identity_dyn();

		void translate(Float x,Float y);
		::Dynamic translate_dyn();

		void compose( ::differ::math::Vector _position,Float _rotation, ::differ::math::Vector _scale);
		::Dynamic compose_dyn();

		 ::differ::math::Matrix makeTranslation(Float _x,Float _y);
		::Dynamic makeTranslation_dyn();

		void rotate(Float angle);
		::Dynamic rotate_dyn();

		void scale(Float x,Float y);
		::Dynamic scale_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace differ
} // end namespace math

#endif /* INCLUDED_differ_math_Matrix */ 
