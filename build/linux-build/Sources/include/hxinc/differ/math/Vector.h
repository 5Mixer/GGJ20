// Generated by Haxe 4.0.5
#ifndef INCLUDED_differ_math_Vector
#define INCLUDED_differ_math_Vector

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(differ,math,Matrix)
HX_DECLARE_CLASS2(differ,math,Vector)

namespace differ{
namespace math{


class HXCPP_CLASS_ATTRIBUTES Vector_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Vector_obj OBJ_;
		Vector_obj();

	public:
		enum { _hx_ClassId = 0x3d69575d };

		void __construct(hx::Null< Float >  __o__x,hx::Null< Float >  __o__y);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="differ.math.Vector")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"differ.math.Vector"); }
		static hx::ObjectPtr< Vector_obj > __new(hx::Null< Float >  __o__x,hx::Null< Float >  __o__y);
		static hx::ObjectPtr< Vector_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o__x,hx::Null< Float >  __o__y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Vector_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Vector",e3,24,f2,cb); }

		Float x;
		Float y;
		 ::differ::math::Vector clone();
		::Dynamic clone_dyn();

		 ::differ::math::Vector transform( ::differ::math::Matrix matrix);
		::Dynamic transform_dyn();

		 ::differ::math::Vector normalize();
		::Dynamic normalize_dyn();

		 ::differ::math::Vector truncate(Float max);
		::Dynamic truncate_dyn();

		 ::differ::math::Vector invert();
		::Dynamic invert_dyn();

		Float dot( ::differ::math::Vector other);
		::Dynamic dot_dyn();

		Float cross( ::differ::math::Vector other);
		::Dynamic cross_dyn();

		 ::differ::math::Vector add( ::differ::math::Vector other);
		::Dynamic add_dyn();

		 ::differ::math::Vector subtract( ::differ::math::Vector other);
		::Dynamic subtract_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		Float set_length(Float value);
		::Dynamic set_length_dyn();

		Float get_length();
		::Dynamic get_length_dyn();

		Float get_lengthsq();
		::Dynamic get_lengthsq_dyn();

};

} // end namespace differ
} // end namespace math

#endif /* INCLUDED_differ_math_Vector */ 
