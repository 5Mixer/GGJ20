// Generated by Haxe 4.0.5
#ifndef INCLUDED_kha__Assets_FontList
#define INCLUDED_kha__Assets_FontList

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(kha,Kravur)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS2(kha,_Assets,FontList)

namespace kha{
namespace _Assets{


class HXCPP_CLASS_ATTRIBUTES FontList_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FontList_obj OBJ_;
		FontList_obj();

	public:
		enum { _hx_ClassId = 0x0cc63163 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha._Assets.FontList")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"kha._Assets.FontList"); }
		static hx::ObjectPtr< FontList_obj > __new();
		static hx::ObjectPtr< FontList_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FontList_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FontList",ed,f5,e2,a3); }

		 ::kha::Kravur get(::String name);
		::Dynamic get_dyn();

		 ::kha::Kravur CaveatRegular;
		inline  ::kha::Kravur _hx_set_CaveatRegular(hx::StackContext *_hx_ctx, ::kha::Kravur _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return CaveatRegular=_hx_v; }
		::String CaveatRegularName;
		inline ::String _hx_set_CaveatRegularName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return CaveatRegularName=_hx_v; }
		 ::Dynamic CaveatRegularDescription;
		inline  ::Dynamic _hx_set_CaveatRegularDescription(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return CaveatRegularDescription=_hx_v; }
		void CaveatRegularLoad( ::Dynamic done, ::Dynamic failure);
		::Dynamic CaveatRegularLoad_dyn();

		void CaveatRegularUnload();
		::Dynamic CaveatRegularUnload_dyn();

		 ::kha::Kravur FredokaOne_Regular;
		inline  ::kha::Kravur _hx_set_FredokaOne_Regular(hx::StackContext *_hx_ctx, ::kha::Kravur _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return FredokaOne_Regular=_hx_v; }
		::String FredokaOne_RegularName;
		inline ::String _hx_set_FredokaOne_RegularName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return FredokaOne_RegularName=_hx_v; }
		 ::Dynamic FredokaOne_RegularDescription;
		inline  ::Dynamic _hx_set_FredokaOne_RegularDescription(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return FredokaOne_RegularDescription=_hx_v; }
		void FredokaOne_RegularLoad( ::Dynamic done, ::Dynamic failure);
		::Dynamic FredokaOne_RegularLoad_dyn();

		void FredokaOne_RegularUnload();
		::Dynamic FredokaOne_RegularUnload_dyn();

		 ::kha::Kravur KenneyMini;
		inline  ::kha::Kravur _hx_set_KenneyMini(hx::StackContext *_hx_ctx, ::kha::Kravur _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return KenneyMini=_hx_v; }
		::String KenneyMiniName;
		inline ::String _hx_set_KenneyMiniName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return KenneyMiniName=_hx_v; }
		 ::Dynamic KenneyMiniDescription;
		inline  ::Dynamic _hx_set_KenneyMiniDescription(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return KenneyMiniDescription=_hx_v; }
		void KenneyMiniLoad( ::Dynamic done, ::Dynamic failure);
		::Dynamic KenneyMiniLoad_dyn();

		void KenneyMiniUnload();
		::Dynamic KenneyMiniUnload_dyn();

		 ::kha::Kravur KenneyMiniSquare;
		inline  ::kha::Kravur _hx_set_KenneyMiniSquare(hx::StackContext *_hx_ctx, ::kha::Kravur _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return KenneyMiniSquare=_hx_v; }
		::String KenneyMiniSquareName;
		inline ::String _hx_set_KenneyMiniSquareName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return KenneyMiniSquareName=_hx_v; }
		 ::Dynamic KenneyMiniSquareDescription;
		inline  ::Dynamic _hx_set_KenneyMiniSquareDescription(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return KenneyMiniSquareDescription=_hx_v; }
		void KenneyMiniSquareLoad( ::Dynamic done, ::Dynamic failure);
		::Dynamic KenneyMiniSquareLoad_dyn();

		void KenneyMiniSquareUnload();
		::Dynamic KenneyMiniSquareUnload_dyn();

		 ::kha::Kravur Nunito_Regular;
		inline  ::kha::Kravur _hx_set_Nunito_Regular(hx::StackContext *_hx_ctx, ::kha::Kravur _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return Nunito_Regular=_hx_v; }
		::String Nunito_RegularName;
		inline ::String _hx_set_Nunito_RegularName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return Nunito_RegularName=_hx_v; }
		 ::Dynamic Nunito_RegularDescription;
		inline  ::Dynamic _hx_set_Nunito_RegularDescription(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return Nunito_RegularDescription=_hx_v; }
		void Nunito_RegularLoad( ::Dynamic done, ::Dynamic failure);
		::Dynamic Nunito_RegularLoad_dyn();

		void Nunito_RegularUnload();
		::Dynamic Nunito_RegularUnload_dyn();

		 ::kha::Kravur PermanentMarker_Regular;
		inline  ::kha::Kravur _hx_set_PermanentMarker_Regular(hx::StackContext *_hx_ctx, ::kha::Kravur _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return PermanentMarker_Regular=_hx_v; }
		::String PermanentMarker_RegularName;
		inline ::String _hx_set_PermanentMarker_RegularName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return PermanentMarker_RegularName=_hx_v; }
		 ::Dynamic PermanentMarker_RegularDescription;
		inline  ::Dynamic _hx_set_PermanentMarker_RegularDescription(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return PermanentMarker_RegularDescription=_hx_v; }
		void PermanentMarker_RegularLoad( ::Dynamic done, ::Dynamic failure);
		::Dynamic PermanentMarker_RegularLoad_dyn();

		void PermanentMarker_RegularUnload();
		::Dynamic PermanentMarker_RegularUnload_dyn();

		 ::kha::Kravur SourceSansPro;
		inline  ::kha::Kravur _hx_set_SourceSansPro(hx::StackContext *_hx_ctx, ::kha::Kravur _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return SourceSansPro=_hx_v; }
		::String SourceSansProName;
		inline ::String _hx_set_SourceSansProName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return SourceSansProName=_hx_v; }
		 ::Dynamic SourceSansProDescription;
		inline  ::Dynamic _hx_set_SourceSansProDescription(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return SourceSansProDescription=_hx_v; }
		void SourceSansProLoad( ::Dynamic done, ::Dynamic failure);
		::Dynamic SourceSansProLoad_dyn();

		void SourceSansProUnload();
		::Dynamic SourceSansProUnload_dyn();

		::Array< ::String > names;
		inline ::Array< ::String > _hx_set_names(hx::StackContext *_hx_ctx,::Array< ::String > _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return names=_hx_v; }
};

} // end namespace kha
} // end namespace _Assets

#endif /* INCLUDED_kha__Assets_FontList */ 
