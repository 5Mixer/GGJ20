// Generated by Haxe 4.0.5
#ifndef INCLUDED_kha__Assets_ImageList
#define INCLUDED_kha__Assets_ImageList

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(kha,Canvas)
HX_DECLARE_CLASS1(kha,Image)
HX_DECLARE_CLASS1(kha,Resource)
HX_DECLARE_CLASS2(kha,_Assets,ImageList)

namespace kha{
namespace _Assets{


class HXCPP_CLASS_ATTRIBUTES ImageList_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ImageList_obj OBJ_;
		ImageList_obj();

	public:
		enum { _hx_ClassId = 0x7afe145b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha._Assets.ImageList")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"kha._Assets.ImageList"); }
		static hx::ObjectPtr< ImageList_obj > __new();
		static hx::ObjectPtr< ImageList_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ImageList_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ImageList",39,91,ba,cb); }

		 ::kha::Image get(::String name);
		::Dynamic get_dyn();

		 ::kha::Image goblin;
		inline  ::kha::Image _hx_set_goblin(hx::StackContext *_hx_ctx, ::kha::Image _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return goblin=_hx_v; }
		::String goblinName;
		inline ::String _hx_set_goblinName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return goblinName=_hx_v; }
		 ::Dynamic goblinDescription;
		inline  ::Dynamic _hx_set_goblinDescription(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return goblinDescription=_hx_v; }
		void goblinLoad( ::Dynamic done, ::Dynamic failure);
		::Dynamic goblinLoad_dyn();

		void goblinUnload();
		::Dynamic goblinUnload_dyn();

		 ::kha::Image goblinRunSheet;
		inline  ::kha::Image _hx_set_goblinRunSheet(hx::StackContext *_hx_ctx, ::kha::Image _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return goblinRunSheet=_hx_v; }
		::String goblinRunSheetName;
		inline ::String _hx_set_goblinRunSheetName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return goblinRunSheetName=_hx_v; }
		 ::Dynamic goblinRunSheetDescription;
		inline  ::Dynamic _hx_set_goblinRunSheetDescription(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return goblinRunSheetDescription=_hx_v; }
		void goblinRunSheetLoad( ::Dynamic done, ::Dynamic failure);
		::Dynamic goblinRunSheetLoad_dyn();

		void goblinRunSheetUnload();
		::Dynamic goblinRunSheetUnload_dyn();

		 ::kha::Image player;
		inline  ::kha::Image _hx_set_player(hx::StackContext *_hx_ctx, ::kha::Image _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return player=_hx_v; }
		::String playerName;
		inline ::String _hx_set_playerName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return playerName=_hx_v; }
		 ::Dynamic playerDescription;
		inline  ::Dynamic _hx_set_playerDescription(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return playerDescription=_hx_v; }
		void playerLoad( ::Dynamic done, ::Dynamic failure);
		::Dynamic playerLoad_dyn();

		void playerUnload();
		::Dynamic playerUnload_dyn();

		 ::kha::Image playerSwordSwing;
		inline  ::kha::Image _hx_set_playerSwordSwing(hx::StackContext *_hx_ctx, ::kha::Image _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return playerSwordSwing=_hx_v; }
		::String playerSwordSwingName;
		inline ::String _hx_set_playerSwordSwingName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return playerSwordSwingName=_hx_v; }
		 ::Dynamic playerSwordSwingDescription;
		inline  ::Dynamic _hx_set_playerSwordSwingDescription(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return playerSwordSwingDescription=_hx_v; }
		void playerSwordSwingLoad( ::Dynamic done, ::Dynamic failure);
		::Dynamic playerSwordSwingLoad_dyn();

		void playerSwordSwingUnload();
		::Dynamic playerSwordSwingUnload_dyn();

		 ::kha::Image playerWalk;
		inline  ::kha::Image _hx_set_playerWalk(hx::StackContext *_hx_ctx, ::kha::Image _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return playerWalk=_hx_v; }
		::String playerWalkName;
		inline ::String _hx_set_playerWalkName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return playerWalkName=_hx_v; }
		 ::Dynamic playerWalkDescription;
		inline  ::Dynamic _hx_set_playerWalkDescription(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return playerWalkDescription=_hx_v; }
		void playerWalkLoad( ::Dynamic done, ::Dynamic failure);
		::Dynamic playerWalkLoad_dyn();

		void playerWalkUnload();
		::Dynamic playerWalkUnload_dyn();

		 ::kha::Image tiles;
		inline  ::kha::Image _hx_set_tiles(hx::StackContext *_hx_ctx, ::kha::Image _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return tiles=_hx_v; }
		::String tilesName;
		inline ::String _hx_set_tilesName(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return tilesName=_hx_v; }
		 ::Dynamic tilesDescription;
		inline  ::Dynamic _hx_set_tilesDescription(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return tilesDescription=_hx_v; }
		void tilesLoad( ::Dynamic done, ::Dynamic failure);
		::Dynamic tilesLoad_dyn();

		void tilesUnload();
		::Dynamic tilesUnload_dyn();

		 ::kha::Image tiles2;
		inline  ::kha::Image _hx_set_tiles2(hx::StackContext *_hx_ctx, ::kha::Image _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return tiles2=_hx_v; }
		::String tiles2Name;
		inline ::String _hx_set_tiles2Name(hx::StackContext *_hx_ctx,::String _hx_v) { HX_OBJ_WB(this,_hx_v.raw_ref()) return tiles2Name=_hx_v; }
		 ::Dynamic tiles2Description;
		inline  ::Dynamic _hx_set_tiles2Description(hx::StackContext *_hx_ctx, ::Dynamic _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return tiles2Description=_hx_v; }
		void tiles2Load( ::Dynamic done, ::Dynamic failure);
		::Dynamic tiles2Load_dyn();

		void tiles2Unload();
		::Dynamic tiles2Unload_dyn();

		::Array< ::String > names;
		inline ::Array< ::String > _hx_set_names(hx::StackContext *_hx_ctx,::Array< ::String > _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return names=_hx_v; }
};

} // end namespace kha
} // end namespace _Assets

#endif /* INCLUDED_kha__Assets_ImageList */ 
