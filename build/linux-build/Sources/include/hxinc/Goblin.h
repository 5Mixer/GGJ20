// Generated by Haxe 4.0.5
#ifndef INCLUDED_Goblin
#define INCLUDED_Goblin

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
HX_DECLARE_CLASS0(Goblin)
HX_DECLARE_CLASS2(bonsai,entity,Entity)
HX_DECLARE_CLASS2(bonsai,render,AnimatedSprite)
HX_DECLARE_CLASS2(bonsai,render,SpriteMap)
HX_DECLARE_CLASS2(bonsai,render,Transformation)
HX_DECLARE_CLASS2(kha,graphics2,Graphics)



class HXCPP_CLASS_ATTRIBUTES Goblin_obj : public  ::bonsai::entity::Entity_obj
{
	public:
		typedef  ::bonsai::entity::Entity_obj super;
		typedef Goblin_obj OBJ_;
		Goblin_obj();

	public:
		enum { _hx_ClassId = 0x0aaf013f };

		void __construct(Float x,Float y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Goblin")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Goblin"); }
		static hx::ObjectPtr< Goblin_obj > __new(Float x,Float y);
		static hx::ObjectPtr< Goblin_obj > __alloc(hx::Ctx *_hx_ctx,Float x,Float y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Goblin_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Goblin",77,3a,ea,8d); }

		int width;
		int height;
		 ::bonsai::render::SpriteMap spriteMap;
		inline  ::bonsai::render::SpriteMap _hx_set_spriteMap(hx::StackContext *_hx_ctx, ::bonsai::render::SpriteMap _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return spriteMap=_hx_v; }
		 ::bonsai::render::AnimatedSprite animation;
		inline  ::bonsai::render::AnimatedSprite _hx_set_animation(hx::StackContext *_hx_ctx, ::bonsai::render::AnimatedSprite _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return animation=_hx_v; }
		 ::bonsai::render::Transformation transformation;
		inline  ::bonsai::render::Transformation _hx_set_transformation(hx::StackContext *_hx_ctx, ::bonsai::render::Transformation _hx_v) { HX_OBJ_WB(this,_hx_v.mPtr) return transformation=_hx_v; }
		void render( ::kha::graphics2::Graphics graphics);

		void update(Float dt);

};


#endif /* INCLUDED_Goblin */ 
