// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_hxnoise_Perlin
#include <hxinc/hxnoise/Perlin.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_82ee5afde642e4f4_26_new,"hxnoise.Perlin","new",0x160da50a,"hxnoise.Perlin.new","hxnoise/Perlin.hx",26,0x36a1c185)
HX_LOCAL_STACK_FRAME(_hx_pos_82ee5afde642e4f4_35_perlin,"hxnoise.Perlin","perlin",0x509e942a,"hxnoise.Perlin.perlin","hxnoise/Perlin.hx",35,0x36a1c185)
HX_LOCAL_STACK_FRAME(_hx_pos_82ee5afde642e4f4_89_OctavePerlin,"hxnoise.Perlin","OctavePerlin",0xac1739da,"hxnoise.Perlin.OctavePerlin","hxnoise/Perlin.hx",89,0x36a1c185)
HX_LOCAL_STACK_FRAME(_hx_pos_82ee5afde642e4f4_108_fade,"hxnoise.Perlin","fade",0x3095f592,"hxnoise.Perlin.fade","hxnoise/Perlin.hx",108,0x36a1c185)
HX_LOCAL_STACK_FRAME(_hx_pos_82ee5afde642e4f4_111_inc,"hxnoise.Perlin","inc",0x1609e188,"hxnoise.Perlin.inc","hxnoise/Perlin.hx",111,0x36a1c185)
HX_LOCAL_STACK_FRAME(_hx_pos_82ee5afde642e4f4_137_lerp,"hxnoise.Perlin","lerp",0x3490528d,"hxnoise.Perlin.lerp","hxnoise/Perlin.hx",137,0x36a1c185)
HX_LOCAL_STACK_FRAME(_hx_pos_82ee5afde642e4f4_119_grad,"hxnoise.Perlin","grad",0x314c0fe4,"hxnoise.Perlin.grad","hxnoise/Perlin.hx",119,0x36a1c185)
HX_LOCAL_STACK_FRAME(_hx_pos_82ee5afde642e4f4_6_boot,"hxnoise.Perlin","boot",0x2dfbc448,"hxnoise.Perlin.boot","hxnoise/Perlin.hx",6,0x36a1c185)
static const int _hx_array_data_03c81818_10[] = {
	(int)151,(int)160,(int)137,(int)91,(int)90,(int)15,(int)131,(int)13,(int)201,(int)95,(int)96,(int)53,(int)194,(int)233,(int)7,(int)225,(int)140,(int)36,(int)103,(int)30,(int)69,(int)142,(int)8,(int)99,(int)37,(int)240,(int)21,(int)10,(int)23,(int)190,(int)6,(int)148,(int)247,(int)120,(int)234,(int)75,(int)0,(int)26,(int)197,(int)62,(int)94,(int)252,(int)219,(int)203,(int)117,(int)35,(int)11,(int)32,(int)57,(int)177,(int)33,(int)88,(int)237,(int)149,(int)56,(int)87,(int)174,(int)20,(int)125,(int)136,(int)171,(int)168,(int)68,(int)175,(int)74,(int)165,(int)71,(int)134,(int)139,(int)48,(int)27,(int)166,(int)77,(int)146,(int)158,(int)231,(int)83,(int)111,(int)229,(int)122,(int)60,(int)211,(int)133,(int)230,(int)220,(int)105,(int)92,(int)41,(int)55,(int)46,(int)245,(int)40,(int)244,(int)102,(int)143,(int)54,(int)65,(int)25,(int)63,(int)161,(int)1,(int)216,(int)80,(int)73,(int)209,(int)76,(int)132,(int)187,(int)208,(int)89,(int)18,(int)169,(int)200,(int)196,(int)135,(int)130,(int)116,(int)188,(int)159,(int)86,(int)164,(int)100,(int)109,(int)198,(int)173,(int)186,(int)3,(int)64,(int)52,(int)217,(int)226,(int)250,(int)124,(int)123,(int)5,(int)202,(int)38,(int)147,(int)118,(int)126,(int)255,(int)82,(int)85,(int)212,(int)207,(int)206,(int)59,(int)227,(int)47,(int)16,(int)58,(int)17,(int)182,(int)189,(int)28,(int)42,(int)223,(int)183,(int)170,(int)213,(int)119,(int)248,(int)152,(int)2,(int)44,(int)154,(int)163,(int)70,(int)221,(int)153,(int)101,(int)155,(int)167,(int)43,(int)172,(int)9,(int)129,(int)22,(int)39,(int)253,(int)19,(int)98,(int)108,(int)110,(int)79,(int)113,(int)224,(int)232,(int)178,(int)185,(int)112,(int)104,(int)218,(int)246,(int)97,(int)228,(int)251,(int)34,(int)242,(int)193,(int)238,(int)210,(int)144,(int)12,(int)191,(int)179,(int)162,(int)241,(int)81,(int)51,(int)145,(int)235,(int)249,(int)14,(int)239,(int)107,(int)49,(int)192,(int)214,(int)31,(int)181,(int)199,(int)106,(int)157,(int)184,(int)84,(int)204,(int)176,(int)115,(int)121,(int)50,(int)45,(int)127,(int)4,(int)150,(int)254,(int)138,(int)236,(int)205,(int)93,(int)222,(int)114,(int)67,(int)29,(int)24,(int)72,(int)243,(int)141,(int)128,(int)195,(int)78,(int)66,(int)215,(int)61,(int)156,(int)180,
};
namespace hxnoise{

void Perlin_obj::__construct(hx::Null< int >  __o_repeat){
            		int repeat = __o_repeat.Default(-1);
            	HX_STACKFRAME(&_hx_pos_82ee5afde642e4f4_26_new)
HXLINE(  27)		this->repeat = repeat;
HXLINE(  28)		if (hx::IsNull( ::hxnoise::Perlin_obj::P )) {
HXLINE(  30)			::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN(  30)			{
HXLINE(  30)				int _g1 = 0;
HXDLIN(  30)				while((_g1 < 512)){
HXLINE(  30)					_g1 = (_g1 + 1);
HXDLIN(  30)					int x = (_g1 - 1);
HXDLIN(  30)					_g->push(::hxnoise::Perlin_obj::PERMUTATIONS->__get(hx::Mod(x,256)));
            				}
            			}
HXDLIN(  30)			::hxnoise::Perlin_obj::P = _g;
            		}
            	}

Dynamic Perlin_obj::__CreateEmpty() { return new Perlin_obj; }

void *Perlin_obj::_hx_vtable = 0;

Dynamic Perlin_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Perlin_obj > _hx_result = new Perlin_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Perlin_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x57e79e1a;
}

Float Perlin_obj::perlin(Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_82ee5afde642e4f4_35_perlin)
HXLINE(  36)		if ((this->repeat > 0)) {
HXLINE(  38)			x = hx::Mod(x,this->repeat);
HXLINE(  39)			y = hx::Mod(y,this->repeat);
HXLINE(  40)			z = hx::Mod(z,this->repeat);
            		}
HXLINE(  43)		int xi = (::Math_obj::floor(x) & 255);
HXLINE(  44)		int yi = (::Math_obj::floor(y) & 255);
HXLINE(  45)		int zi = (::Math_obj::floor(z) & 255);
HXLINE(  47)		Float xf = (x - ::Math_obj::ffloor(x));
HXLINE(  48)		Float yf = (y - ::Math_obj::ffloor(y));
HXLINE(  49)		Float zf = (z - ::Math_obj::ffloor(z));
HXLINE(  51)		Float u = this->fade(xf);
HXLINE(  52)		Float v = this->fade(yf);
HXLINE(  53)		Float w = this->fade(zf);
HXLINE(  55)		int aaa = ::hxnoise::Perlin_obj::P->__get((::hxnoise::Perlin_obj::P->__get((::hxnoise::Perlin_obj::P->__get(xi) + yi)) + zi));
HXLINE(  57)		int aba = ::hxnoise::Perlin_obj::P->__get(xi);
HXLINE(  55)		int aba1 = ::hxnoise::Perlin_obj::P->__get((::hxnoise::Perlin_obj::P->__get((aba + this->inc(yi))) + zi));
HXLINE(  58)		int aab = ::hxnoise::Perlin_obj::P->__get((::hxnoise::Perlin_obj::P->__get(xi) + yi));
HXLINE(  55)		int aab1 = ::hxnoise::Perlin_obj::P->__get((aab + this->inc(zi)));
HXLINE(  59)		::Array< int > abb = ::hxnoise::Perlin_obj::P;
HXDLIN(  59)		int abb1 = ::hxnoise::Perlin_obj::P->__get(xi);
HXDLIN(  59)		int abb2 = ::hxnoise::Perlin_obj::P->__get((abb1 + this->inc(yi)));
HXLINE(  55)		int abb3 = abb->__get((abb2 + this->inc(zi)));
HXDLIN(  55)		int baa = ::hxnoise::Perlin_obj::P->__get((::hxnoise::Perlin_obj::P->__get((::hxnoise::Perlin_obj::P->__get(this->inc(xi)) + yi)) + zi));
HXLINE(  61)		::Array< int > bba = ::hxnoise::Perlin_obj::P;
HXDLIN(  61)		::Array< int > bba1 = ::hxnoise::Perlin_obj::P;
HXDLIN(  61)		int bba2 = ::hxnoise::Perlin_obj::P->__get(this->inc(xi));
HXLINE(  55)		int bba3 = bba->__get((bba1->__get((bba2 + this->inc(yi))) + zi));
HXLINE(  62)		::Array< int > bab = ::hxnoise::Perlin_obj::P;
HXDLIN(  62)		int bab1 = ::hxnoise::Perlin_obj::P->__get((::hxnoise::Perlin_obj::P->__get(this->inc(xi)) + yi));
HXLINE(  55)		int bab2 = bab->__get((bab1 + this->inc(zi)));
HXLINE(  63)		::Array< int > bbb = ::hxnoise::Perlin_obj::P;
HXDLIN(  63)		::Array< int > bbb1 = ::hxnoise::Perlin_obj::P;
HXDLIN(  63)		int bbb2 = ::hxnoise::Perlin_obj::P->__get(this->inc(xi));
HXDLIN(  63)		int bbb3 = bbb1->__get((bbb2 + this->inc(yi)));
HXLINE(  55)		int bbb4 = bbb->__get((bbb3 + this->inc(zi)));
HXLINE(  66)		Float x1 = ::hxnoise::Perlin_obj::grad(aaa,xf,yf,zf);
HXLINE(  65)		Float x11 = this->lerp(x1,::hxnoise::Perlin_obj::grad(baa,(xf - ( (Float)(1) )),yf,zf),u);
HXLINE(  70)		Float x2 = ::hxnoise::Perlin_obj::grad(aba1,xf,(yf - ( (Float)(1) )),zf);
HXLINE(  65)		Float x21 = this->lerp(x2,::hxnoise::Perlin_obj::grad(bba3,(xf - ( (Float)(1) )),(yf - ( (Float)(1) )),zf),u);
HXDLIN(  65)		Float y1 = this->lerp(x11,x21,v);
HXLINE(  76)		Float x12 = ::hxnoise::Perlin_obj::grad(aab1,xf,yf,(zf - ( (Float)(1) )));
HXDLIN(  76)		x11 = this->lerp(x12,::hxnoise::Perlin_obj::grad(bab2,(xf - ( (Float)(1) )),yf,(zf - ( (Float)(1) ))),u);
HXLINE(  80)		Float x22 = ::hxnoise::Perlin_obj::grad(abb3,xf,(yf - ( (Float)(1) )),(zf - ( (Float)(1) )));
HXDLIN(  80)		x21 = this->lerp(x22,::hxnoise::Perlin_obj::grad(bbb4,(xf - ( (Float)(1) )),(yf - ( (Float)(1) )),(zf - ( (Float)(1) ))),u);
HXLINE(  65)		Float y2 = this->lerp(x11,x21,v);
HXLINE(  85)		return ((this->lerp(y1,y2,w) + 1) / ( (Float)(2) ));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Perlin_obj,perlin,return )

Float Perlin_obj::OctavePerlin(Float x,Float y,Float z,int octaves,Float persistence,Float frequency){
            	HX_STACKFRAME(&_hx_pos_82ee5afde642e4f4_89_OctavePerlin)
HXLINE(  90)		Float total = ((Float)0.0);
HXLINE(  91)		Float maxValue = ((Float)0.0);
HXLINE(  92)		Float amplitude = ((Float)1.0);
HXLINE(  94)		{
HXLINE(  94)			int _g = 0;
HXDLIN(  94)			int _g1 = octaves;
HXDLIN(  94)			while((_g < _g1)){
HXLINE(  94)				_g = (_g + 1);
HXDLIN(  94)				int i = (_g - 1);
HXLINE(  96)				total = (total + (this->perlin((x * frequency),(y * frequency),(z * frequency)) * amplitude));
HXLINE(  97)				maxValue = (maxValue + amplitude);
HXLINE(  99)				amplitude = (amplitude * persistence);
HXLINE( 100)				frequency = (frequency * ((Float)2.0));
            			}
            		}
HXLINE( 103)		return (total / maxValue);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Perlin_obj,OctavePerlin,return )

Float Perlin_obj::fade(Float t){
            	HX_STACKFRAME(&_hx_pos_82ee5afde642e4f4_108_fade)
HXDLIN( 108)		return (((t * t) * t) * ((t * ((t * ( (Float)(6) )) - ( (Float)(15) ))) + 10));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Perlin_obj,fade,return )

int Perlin_obj::inc(int num){
            	HX_STACKFRAME(&_hx_pos_82ee5afde642e4f4_111_inc)
HXLINE( 112)		num = (num + 1);
HXLINE( 113)		if ((this->repeat > 0)) {
HXLINE( 113)			num = hx::Mod(num,this->repeat);
            		}
HXLINE( 115)		return num;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Perlin_obj,inc,return )

Float Perlin_obj::lerp(Float a,Float b,Float x){
            	HX_STACKFRAME(&_hx_pos_82ee5afde642e4f4_137_lerp)
HXDLIN( 137)		return (a + (x * (b - a)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Perlin_obj,lerp,return )

::Array< int > Perlin_obj::PERMUTATIONS;

::Array< int > Perlin_obj::P;

Float Perlin_obj::grad(int hash,Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_82ee5afde642e4f4_119_grad)
HXLINE( 120)		int h = (hash & 15);
HXLINE( 121)		Float u;
HXDLIN( 121)		if ((h < 8)) {
HXLINE( 121)			u = x;
            		}
            		else {
HXLINE( 121)			u = y;
            		}
HXLINE( 123)		Float v;
HXLINE( 125)		if ((h < 4)) {
HXLINE( 126)			v = y;
            		}
            		else {
HXLINE( 127)			bool _hx_tmp;
HXDLIN( 127)			if ((h != 12)) {
HXLINE( 127)				_hx_tmp = (h == 14);
            			}
            			else {
HXLINE( 127)				_hx_tmp = true;
            			}
HXDLIN( 127)			if (_hx_tmp) {
HXLINE( 128)				v = x;
            			}
            			else {
HXLINE( 130)				v = z;
            			}
            		}
HXLINE( 132)		Float _hx_tmp1;
HXDLIN( 132)		if (((h & 1) == 0)) {
HXLINE( 132)			_hx_tmp1 = u;
            		}
            		else {
HXLINE( 132)			_hx_tmp1 = -(u);
            		}
HXDLIN( 132)		Float _hx_tmp2;
HXDLIN( 132)		if (((h & 2) == 0)) {
HXLINE( 132)			_hx_tmp2 = v;
            		}
            		else {
HXLINE( 132)			_hx_tmp2 = -(v);
            		}
HXDLIN( 132)		return (_hx_tmp1 + _hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Perlin_obj,grad,return )


hx::ObjectPtr< Perlin_obj > Perlin_obj::__new(hx::Null< int >  __o_repeat) {
	hx::ObjectPtr< Perlin_obj > __this = new Perlin_obj();
	__this->__construct(__o_repeat);
	return __this;
}

hx::ObjectPtr< Perlin_obj > Perlin_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_repeat) {
	Perlin_obj *__this = (Perlin_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Perlin_obj), false, "hxnoise.Perlin"));
	*(void **)__this = Perlin_obj::_hx_vtable;
	__this->__construct(__o_repeat);
	return __this;
}

Perlin_obj::Perlin_obj()
{
}

hx::Val Perlin_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"inc") ) { return hx::Val( inc_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"fade") ) { return hx::Val( fade_dyn() ); }
		if (HX_FIELD_EQ(inName,"lerp") ) { return hx::Val( lerp_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"repeat") ) { return hx::Val( repeat ); }
		if (HX_FIELD_EQ(inName,"perlin") ) { return hx::Val( perlin_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"OctavePerlin") ) { return hx::Val( OctavePerlin_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Perlin_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"P") ) { outValue = ( P ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"grad") ) { outValue = grad_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"PERMUTATIONS") ) { outValue = ( PERMUTATIONS ); return true; }
	}
	return false;
}

hx::Val Perlin_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"repeat") ) { repeat=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Perlin_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"P") ) { P=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"PERMUTATIONS") ) { PERMUTATIONS=ioValue.Cast< ::Array< int > >(); return true; }
	}
	return false;
}

void Perlin_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("repeat",5b,97,7c,06));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Perlin_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Perlin_obj,repeat),HX_("repeat",5b,97,7c,06)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Perlin_obj_sStaticStorageInfo[] = {
	{hx::fsObject /* ::Array< int > */ ,(void *) &Perlin_obj::PERMUTATIONS,HX_("PERMUTATIONS",ad,f8,5e,80)},
	{hx::fsObject /* ::Array< int > */ ,(void *) &Perlin_obj::P,HX_("P",50,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Perlin_obj_sMemberFields[] = {
	HX_("repeat",5b,97,7c,06),
	HX_("perlin",94,a2,1d,3b),
	HX_("OctavePerlin",c4,f3,37,64),
	HX_("fade",7c,b5,b5,43),
	HX_("inc",de,0c,50,00),
	HX_("lerp",77,12,b0,47),
	::String(null()) };

static void Perlin_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Perlin_obj::PERMUTATIONS,"PERMUTATIONS");
	HX_MARK_MEMBER_NAME(Perlin_obj::P,"P");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Perlin_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Perlin_obj::PERMUTATIONS,"PERMUTATIONS");
	HX_VISIT_MEMBER_NAME(Perlin_obj::P,"P");
};

#endif

hx::Class Perlin_obj::__mClass;

static ::String Perlin_obj_sStaticFields[] = {
	HX_("PERMUTATIONS",ad,f8,5e,80),
	HX_("P",50,00,00,00),
	HX_("grad",ce,cf,6b,44),
	::String(null())
};

void Perlin_obj::__register()
{
	Perlin_obj _hx_dummy;
	Perlin_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("hxnoise.Perlin",18,18,c8,03);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Perlin_obj::__GetStatic;
	__mClass->mSetStaticField = &Perlin_obj::__SetStatic;
	__mClass->mMarkFunc = Perlin_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Perlin_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Perlin_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Perlin_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Perlin_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Perlin_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Perlin_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Perlin_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_82ee5afde642e4f4_6_boot)
HXDLIN(   6)		PERMUTATIONS = ::Array_obj< int >::fromData( _hx_array_data_03c81818_10,256);
            	}
}

} // end namespace hxnoise
