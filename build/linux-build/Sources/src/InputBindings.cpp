// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_InputBindings
#include <hxinc/InputBindings.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a66906f68108a45a_22_boot,"InputBindings","boot",0xf214f0c8,"InputBindings.boot","Main.hx",22,0x087e5c05)
static const int _hx_array_data_9f3e3b98_1[] = {
	(int)37,(int)65,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a66906f68108a45a_23_boot,"InputBindings","boot",0xf214f0c8,"InputBindings.boot","Main.hx",23,0x087e5c05)
static const int _hx_array_data_9f3e3b98_3[] = {
	(int)39,(int)68,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a66906f68108a45a_24_boot,"InputBindings","boot",0xf214f0c8,"InputBindings.boot","Main.hx",24,0x087e5c05)
static const int _hx_array_data_9f3e3b98_5[] = {
	(int)38,(int)87,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a66906f68108a45a_25_boot,"InputBindings","boot",0xf214f0c8,"InputBindings.boot","Main.hx",25,0x087e5c05)
static const int _hx_array_data_9f3e3b98_7[] = {
	(int)40,(int)83,
};

void InputBindings_obj::__construct() { }

Dynamic InputBindings_obj::__CreateEmpty() { return new InputBindings_obj; }

void *InputBindings_obj::_hx_vtable = 0;

Dynamic InputBindings_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InputBindings_obj > _hx_result = new InputBindings_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool InputBindings_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x08975594;
}

::Array< int > InputBindings_obj::left;

::Array< int > InputBindings_obj::right;

::Array< int > InputBindings_obj::up;

::Array< int > InputBindings_obj::down;


InputBindings_obj::InputBindings_obj()
{
}

bool InputBindings_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { outValue = ( up ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { outValue = ( left ); return true; }
		if (HX_FIELD_EQ(inName,"down") ) { outValue = ( down ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { outValue = ( right ); return true; }
	}
	return false;
}

bool InputBindings_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { up=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=ioValue.Cast< ::Array< int > >(); return true; }
		if (HX_FIELD_EQ(inName,"down") ) { down=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { right=ioValue.Cast< ::Array< int > >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *InputBindings_obj_sMemberStorageInfo = 0;
static hx::StaticInfo InputBindings_obj_sStaticStorageInfo[] = {
	{hx::fsObject /* ::Array< int > */ ,(void *) &InputBindings_obj::left,HX_("left",07,08,b0,47)},
	{hx::fsObject /* ::Array< int > */ ,(void *) &InputBindings_obj::right,HX_("right",dc,0b,64,e9)},
	{hx::fsObject /* ::Array< int > */ ,(void *) &InputBindings_obj::up,HX_("up",5b,66,00,00)},
	{hx::fsObject /* ::Array< int > */ ,(void *) &InputBindings_obj::down,HX_("down",62,f8,6d,42)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void InputBindings_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(InputBindings_obj::left,"left");
	HX_MARK_MEMBER_NAME(InputBindings_obj::right,"right");
	HX_MARK_MEMBER_NAME(InputBindings_obj::up,"up");
	HX_MARK_MEMBER_NAME(InputBindings_obj::down,"down");
};

#ifdef HXCPP_VISIT_ALLOCS
static void InputBindings_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(InputBindings_obj::left,"left");
	HX_VISIT_MEMBER_NAME(InputBindings_obj::right,"right");
	HX_VISIT_MEMBER_NAME(InputBindings_obj::up,"up");
	HX_VISIT_MEMBER_NAME(InputBindings_obj::down,"down");
};

#endif

hx::Class InputBindings_obj::__mClass;

static ::String InputBindings_obj_sStaticFields[] = {
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	HX_("up",5b,66,00,00),
	HX_("down",62,f8,6d,42),
	::String(null())
};

void InputBindings_obj::__register()
{
	InputBindings_obj _hx_dummy;
	InputBindings_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("InputBindings",98,3b,3e,9f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &InputBindings_obj::__GetStatic;
	__mClass->mSetStaticField = &InputBindings_obj::__SetStatic;
	__mClass->mMarkFunc = InputBindings_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(InputBindings_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< InputBindings_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = InputBindings_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InputBindings_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InputBindings_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void InputBindings_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a66906f68108a45a_22_boot)
HXDLIN(  22)		left = ::Array_obj< int >::fromData( _hx_array_data_9f3e3b98_1,2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a66906f68108a45a_23_boot)
HXDLIN(  23)		right = ::Array_obj< int >::fromData( _hx_array_data_9f3e3b98_3,2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a66906f68108a45a_24_boot)
HXDLIN(  24)		up = ::Array_obj< int >::fromData( _hx_array_data_9f3e3b98_5,2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a66906f68108a45a_25_boot)
HXDLIN(  25)		down = ::Array_obj< int >::fromData( _hx_array_data_9f3e3b98_7,2);
            	}
}

