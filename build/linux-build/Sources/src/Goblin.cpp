// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Goblin
#include <hxinc/Goblin.h>
#endif
#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
#ifndef INCLUDED_bonsai_render_AnimatedSprite
#include <hxinc/bonsai/render/AnimatedSprite.h>
#endif
#ifndef INCLUDED_bonsai_render_SpriteMap
#include <hxinc/bonsai/render/SpriteMap.h>
#endif
#ifndef INCLUDED_bonsai_render_Transformation
#include <hxinc/bonsai/render/Transformation.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <hxinc/haxe/Log.h>
#endif
#ifndef INCLUDED_kha_Assets
#include <hxinc/kha/Assets.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha__Assets_ImageList
#include <hxinc/kha/_Assets/ImageList.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <hxinc/kha/math/Vector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_865fe38fb1854e40_47_new,"Goblin","new",0xabf9e2e9,"Goblin.new","Main.hx",47,0x087e5c05)
static const int _hx_array_data_8dea3a77_1[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,
};
HX_LOCAL_STACK_FRAME(_hx_pos_865fe38fb1854e40_69_render,"Goblin","render",0xe5a8d46d,"Goblin.render","Main.hx",69,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_865fe38fb1854e40_77_update,"Goblin","update",0x6784ef20,"Goblin.update","Main.hx",77,0x087e5c05)

void Goblin_obj::__construct(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_865fe38fb1854e40_47_new)
HXLINE(  50)		this->height = 16;
HXLINE(  49)		this->width = 16;
HXLINE(  56)		super::__construct();
HXLINE(  57)		this->position->x = x;
HXLINE(  58)		this->position->y = y;
HXLINE(  59)		this->_hx_set_animation(HX_CTX,  ::bonsai::render::AnimatedSprite_obj::__alloc( HX_CTX , ::bonsai::render::SpriteMap_obj::__alloc( HX_CTX ,::kha::Assets_obj::images->goblinRun,this->width,this->height)));
HXLINE(  60)		this->animation->registerAnimation(HX_("walk",09,5d,f2,4e), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("frames",a6,af,85,ac),::Array_obj< int >::fromData( _hx_array_data_8dea3a77_1,6))));
HXLINE(  61)		this->animation->play(HX_("walk",09,5d,f2,4e));
HXLINE(  62)		this->_hx_set_transformation(HX_CTX,  ::bonsai::render::Transformation_obj::__alloc( HX_CTX ));
HXLINE(  64)		 ::kha::math::Vector2 _this = this->position;
HXDLIN(  64)		 ::kha::math::Vector2 _hx_tmp =  ::kha::math::Vector2_obj::__alloc( HX_CTX ,(_this->x * ( (Float)(-1) )),(_this->y * ( (Float)(-1) )));
HXDLIN(  64)		this->transformation->_hx_set_offset(HX_CTX, _hx_tmp);
HXLINE(  65)		this->transformation->_hx_set_origin(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,(( (Float)(this->width) ) / ( (Float)(2) )),(( (Float)(this->height) ) / ( (Float)(2) ))));
HXLINE(  66)		this->transformation->_hx_set_scale(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,8,8));
            	}

Dynamic Goblin_obj::__CreateEmpty() { return new Goblin_obj; }

void *Goblin_obj::_hx_vtable = 0;

Dynamic Goblin_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Goblin_obj > _hx_result = new Goblin_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Goblin_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0aaf013f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0aaf013f;
	} else {
		return inClassId==(int)0x61169fa0;
	}
}

void Goblin_obj::render( ::kha::graphics2::Graphics graphics){
            	HX_GC_STACKFRAME(&_hx_pos_865fe38fb1854e40_69_render)
HXLINE(  70)		this->transformation->apply(graphics);
HXLINE(  72)		 ::kha::math::Vector2 _this = this->position;
HXDLIN(  72)		 ::kha::math::Vector2 _hx_tmp =  ::kha::math::Vector2_obj::__alloc( HX_CTX ,(_this->x * ( (Float)(-1) )),(_this->y * ( (Float)(-1) )));
HXDLIN(  72)		this->transformation->_hx_set_offset(HX_CTX, _hx_tmp);
HXLINE(  73)		this->animation->render(graphics,( (float)(0) ),( (float)(0) ));
HXLINE(  74)		this->transformation->finish(graphics);
            	}


void Goblin_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_865fe38fb1854e40_77_update)
HXLINE(  78)		::haxe::Log_obj::trace(HX_("thing",ee,87,89,0f),hx::SourceInfo(HX_("Main.hx",05,5c,7e,08),78,HX_("Goblin",77,3a,ea,8d),HX_("update",09,86,05,87)));
HXLINE(  79)		this->animation->update(dt);
            	}



hx::ObjectPtr< Goblin_obj > Goblin_obj::__new(Float x,Float y) {
	hx::ObjectPtr< Goblin_obj > __this = new Goblin_obj();
	__this->__construct(x,y);
	return __this;
}

hx::ObjectPtr< Goblin_obj > Goblin_obj::__alloc(hx::Ctx *_hx_ctx,Float x,Float y) {
	Goblin_obj *__this = (Goblin_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Goblin_obj), true, "Goblin"));
	*(void **)__this = Goblin_obj::_hx_vtable;
	__this->__construct(x,y);
	return __this;
}

Goblin_obj::Goblin_obj()
{
}

void Goblin_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Goblin);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(spriteMap,"spriteMap");
	HX_MARK_MEMBER_NAME(animation,"animation");
	HX_MARK_MEMBER_NAME(transformation,"transformation");
	 ::bonsai::entity::Entity_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Goblin_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(spriteMap,"spriteMap");
	HX_VISIT_MEMBER_NAME(animation,"animation");
	HX_VISIT_MEMBER_NAME(transformation,"transformation");
	 ::bonsai::entity::Entity_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Goblin_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spriteMap") ) { return hx::Val( spriteMap ); }
		if (HX_FIELD_EQ(inName,"animation") ) { return hx::Val( animation ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformation") ) { return hx::Val( transformation ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Goblin_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spriteMap") ) { _hx_set_spriteMap(HX_CTX_GET,inValue.Cast<  ::bonsai::render::SpriteMap >()); return inValue; }
		if (HX_FIELD_EQ(inName,"animation") ) { _hx_set_animation(HX_CTX_GET,inValue.Cast<  ::bonsai::render::AnimatedSprite >()); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformation") ) { _hx_set_transformation(HX_CTX_GET,inValue.Cast<  ::bonsai::render::Transformation >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Goblin_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("spriteMap",97,77,04,56));
	outFields->push(HX_("animation",04,ef,34,4b));
	outFields->push(HX_("transformation",c9,bd,2f,0a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Goblin_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Goblin_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsInt,(int)offsetof(Goblin_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /*  ::bonsai::render::SpriteMap */ ,(int)offsetof(Goblin_obj,spriteMap),HX_("spriteMap",97,77,04,56)},
	{hx::fsObject /*  ::bonsai::render::AnimatedSprite */ ,(int)offsetof(Goblin_obj,animation),HX_("animation",04,ef,34,4b)},
	{hx::fsObject /*  ::bonsai::render::Transformation */ ,(int)offsetof(Goblin_obj,transformation),HX_("transformation",c9,bd,2f,0a)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Goblin_obj_sStaticStorageInfo = 0;
#endif

static ::String Goblin_obj_sMemberFields[] = {
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("spriteMap",97,77,04,56),
	HX_("animation",04,ef,34,4b),
	HX_("transformation",c9,bd,2f,0a),
	HX_("render",56,6b,29,05),
	HX_("update",09,86,05,87),
	::String(null()) };

hx::Class Goblin_obj::__mClass;

void Goblin_obj::__register()
{
	Goblin_obj _hx_dummy;
	Goblin_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Goblin",77,3a,ea,8d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Goblin_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Goblin_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Goblin_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Goblin_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

