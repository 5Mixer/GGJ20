// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_differ_math_Vector
#include <hxinc/differ/math/Vector.h>
#endif
#ifndef INCLUDED_differ_shapes_InfiniteState
#include <hxinc/differ/shapes/InfiniteState.h>
#endif
#ifndef INCLUDED_differ_shapes_Ray
#include <hxinc/differ/shapes/Ray.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0989ff01447f690b_25_new,"differ.shapes.Ray","new",0xc09e66bc,"differ.shapes.Ray.new","differ/shapes/Ray.hx",25,0xbf348e54)
HX_LOCAL_STACK_FRAME(_hx_pos_0989ff01447f690b_39_get_dir,"differ.shapes.Ray","get_dir",0xe7ebfa40,"differ.shapes.Ray.get_dir","differ/shapes/Ray.hx",39,0xbf348e54)
namespace differ{
namespace shapes{

void Ray_obj::__construct( ::differ::math::Vector _start, ::differ::math::Vector _end, ::differ::shapes::InfiniteState _infinite){
            	HX_GC_STACKFRAME(&_hx_pos_0989ff01447f690b_25_new)
HXLINE(  27)		this->_hx_set_start(HX_CTX, _start);
HXLINE(  28)		this->_hx_set_end(HX_CTX, _end);
HXLINE(  29)		 ::differ::shapes::InfiniteState _hx_tmp;
HXDLIN(  29)		if (hx::IsNull( _infinite )) {
HXLINE(  29)			_hx_tmp = ::differ::shapes::InfiniteState_obj::not_infinite_dyn();
            		}
            		else {
HXLINE(  29)			_hx_tmp = _infinite;
            		}
HXDLIN(  29)		this->_hx_set_infinite(HX_CTX, _hx_tmp);
HXLINE(  32)		this->_hx_set_dir_cache(HX_CTX,  ::differ::math::Vector_obj::__alloc( HX_CTX ,(this->end->x - this->start->x),(this->end->y - this->start->y)));
            	}

Dynamic Ray_obj::__CreateEmpty() { return new Ray_obj; }

void *Ray_obj::_hx_vtable = 0;

Dynamic Ray_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Ray_obj > _hx_result = new Ray_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Ray_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1e69e1e6;
}

 ::differ::math::Vector Ray_obj::get_dir(){
            	HX_STACKFRAME(&_hx_pos_0989ff01447f690b_39_get_dir)
HXLINE(  40)		this->dir_cache->x = (this->end->x - this->start->x);
HXLINE(  41)		this->dir_cache->y = (this->end->y - this->start->y);
HXLINE(  42)		return this->dir_cache;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Ray_obj,get_dir,return )


hx::ObjectPtr< Ray_obj > Ray_obj::__new( ::differ::math::Vector _start, ::differ::math::Vector _end, ::differ::shapes::InfiniteState _infinite) {
	hx::ObjectPtr< Ray_obj > __this = new Ray_obj();
	__this->__construct(_start,_end,_infinite);
	return __this;
}

hx::ObjectPtr< Ray_obj > Ray_obj::__alloc(hx::Ctx *_hx_ctx, ::differ::math::Vector _start, ::differ::math::Vector _end, ::differ::shapes::InfiniteState _infinite) {
	Ray_obj *__this = (Ray_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Ray_obj), true, "differ.shapes.Ray"));
	*(void **)__this = Ray_obj::_hx_vtable;
	__this->__construct(_start,_end,_infinite);
	return __this;
}

Ray_obj::Ray_obj()
{
}

void Ray_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Ray);
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(end,"end");
	HX_MARK_MEMBER_NAME(infinite,"infinite");
	HX_MARK_MEMBER_NAME(dir_cache,"dir_cache");
	HX_MARK_END_CLASS();
}

void Ray_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(end,"end");
	HX_VISIT_MEMBER_NAME(infinite,"infinite");
	HX_VISIT_MEMBER_NAME(dir_cache,"dir_cache");
}

hx::Val Ray_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end ); }
		if (HX_FIELD_EQ(inName,"dir") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_dir() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_dir") ) { return hx::Val( get_dir_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"infinite") ) { return hx::Val( infinite ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dir_cache") ) { return hx::Val( dir_cache ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Ray_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { _hx_set_end(HX_CTX_GET,inValue.Cast<  ::differ::math::Vector >()); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { _hx_set_start(HX_CTX_GET,inValue.Cast<  ::differ::math::Vector >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"infinite") ) { _hx_set_infinite(HX_CTX_GET,inValue.Cast<  ::differ::shapes::InfiniteState >()); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dir_cache") ) { _hx_set_dir_cache(HX_CTX_GET,inValue.Cast<  ::differ::math::Vector >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Ray_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("start",62,74,0b,84));
	outFields->push(HX_("end",db,03,4d,00));
	outFields->push(HX_("dir",4d,3d,4c,00));
	outFields->push(HX_("infinite",d4,16,69,da));
	outFields->push(HX_("dir_cache",90,96,88,9d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Ray_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::differ::math::Vector */ ,(int)offsetof(Ray_obj,start),HX_("start",62,74,0b,84)},
	{hx::fsObject /*  ::differ::math::Vector */ ,(int)offsetof(Ray_obj,end),HX_("end",db,03,4d,00)},
	{hx::fsObject /*  ::differ::shapes::InfiniteState */ ,(int)offsetof(Ray_obj,infinite),HX_("infinite",d4,16,69,da)},
	{hx::fsObject /*  ::differ::math::Vector */ ,(int)offsetof(Ray_obj,dir_cache),HX_("dir_cache",90,96,88,9d)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Ray_obj_sStaticStorageInfo = 0;
#endif

static ::String Ray_obj_sMemberFields[] = {
	HX_("start",62,74,0b,84),
	HX_("end",db,03,4d,00),
	HX_("infinite",d4,16,69,da),
	HX_("dir_cache",90,96,88,9d),
	HX_("get_dir",e4,05,c1,26),
	::String(null()) };

hx::Class Ray_obj::__mClass;

void Ray_obj::__register()
{
	Ray_obj _hx_dummy;
	Ray_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("differ.shapes.Ray",ca,98,45,64);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Ray_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Ray_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ray_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace differ
} // end namespace shapes
