// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_differ_shapes_InfiniteState
#include <hxinc/differ/shapes/InfiniteState.h>
#endif
namespace differ{
namespace shapes{

::differ::shapes::InfiniteState InfiniteState_obj::infinite;

::differ::shapes::InfiniteState InfiniteState_obj::infinite_from_start;

::differ::shapes::InfiniteState InfiniteState_obj::not_infinite;

bool InfiniteState_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("infinite",d4,16,69,da)) { outValue = InfiniteState_obj::infinite; return true; }
	if (inName==HX_("infinite_from_start",58,8b,55,a3)) { outValue = InfiniteState_obj::infinite_from_start; return true; }
	if (inName==HX_("not_infinite",c0,fa,6e,64)) { outValue = InfiniteState_obj::not_infinite; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(InfiniteState_obj)

int InfiniteState_obj::__FindIndex(::String inName)
{
	if (inName==HX_("infinite",d4,16,69,da)) return 2;
	if (inName==HX_("infinite_from_start",58,8b,55,a3)) return 1;
	if (inName==HX_("not_infinite",c0,fa,6e,64)) return 0;
	return super::__FindIndex(inName);
}

int InfiniteState_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("infinite",d4,16,69,da)) return 0;
	if (inName==HX_("infinite_from_start",58,8b,55,a3)) return 0;
	if (inName==HX_("not_infinite",c0,fa,6e,64)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val InfiniteState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("infinite",d4,16,69,da)) return infinite;
	if (inName==HX_("infinite_from_start",58,8b,55,a3)) return infinite_from_start;
	if (inName==HX_("not_infinite",c0,fa,6e,64)) return not_infinite;
	return super::__Field(inName,inCallProp);
}

static ::String InfiniteState_obj_sStaticFields[] = {
	HX_("not_infinite",c0,fa,6e,64),
	HX_("infinite_from_start",58,8b,55,a3),
	HX_("infinite",d4,16,69,da),
	::String(null())
};

hx::Class InfiniteState_obj::__mClass;

Dynamic __Create_InfiniteState_obj() { return new InfiniteState_obj; }

void InfiniteState_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_("differ.shapes.InfiniteState",7d,a9,1b,a7), hx::TCanCast< InfiniteState_obj >,InfiniteState_obj_sStaticFields,0,
	&__Create_InfiniteState_obj, &__Create,
	&super::__SGetClass(), &CreateInfiniteState_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &InfiniteState_obj::__GetStatic;
}

void InfiniteState_obj::__boot()
{
infinite = hx::CreateConstEnum< InfiniteState_obj >(HX_("infinite",d4,16,69,da),2);
infinite_from_start = hx::CreateConstEnum< InfiniteState_obj >(HX_("infinite_from_start",58,8b,55,a3),1);
not_infinite = hx::CreateConstEnum< InfiniteState_obj >(HX_("not_infinite",c0,fa,6e,64),0);
}


} // end namespace differ
} // end namespace shapes
