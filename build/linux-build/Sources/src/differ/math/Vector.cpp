// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_differ_math_Matrix
#include <hxinc/differ/math/Matrix.h>
#endif
#ifndef INCLUDED_differ_math_Vector
#include <hxinc/differ/math/Vector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_340c439663f93830_13_new,"differ.math.Vector","new",0xd223a37f,"differ.math.Vector.new","differ/math/Vector.hx",13,0x52c5a871)
HX_LOCAL_STACK_FRAME(_hx_pos_340c439663f93830_35_clone,"differ.math.Vector","clone",0x0c252c3c,"differ.math.Vector.clone","differ/math/Vector.hx",35,0x52c5a871)
HX_LOCAL_STACK_FRAME(_hx_pos_340c439663f93830_40_transform,"differ.math.Vector","transform",0x169ca1cb,"differ.math.Vector.transform","differ/math/Vector.hx",40,0x52c5a871)
HX_LOCAL_STACK_FRAME(_hx_pos_340c439663f93830_52_normalize,"differ.math.Vector","normalize",0x7caaabec,"differ.math.Vector.normalize","differ/math/Vector.hx",52,0x52c5a871)
HX_LOCAL_STACK_FRAME(_hx_pos_340c439663f93830_71_truncate,"differ.math.Vector","truncate",0xc0fd3ae7,"differ.math.Vector.truncate","differ/math/Vector.hx",71,0x52c5a871)
HX_LOCAL_STACK_FRAME(_hx_pos_340c439663f93830_80_invert,"differ.math.Vector","invert",0x25ec9157,"differ.math.Vector.invert","differ/math/Vector.hx",80,0x52c5a871)
HX_LOCAL_STACK_FRAME(_hx_pos_340c439663f93830_92_dot,"differ.math.Vector","dot",0xd21c15a8,"differ.math.Vector.dot","differ/math/Vector.hx",92,0x52c5a871)
HX_LOCAL_STACK_FRAME(_hx_pos_340c439663f93830_99_cross,"differ.math.Vector","cross",0x101c785f,"differ.math.Vector.cross","differ/math/Vector.hx",99,0x52c5a871)
HX_LOCAL_STACK_FRAME(_hx_pos_340c439663f93830_104_add,"differ.math.Vector","add",0xd219c540,"differ.math.Vector.add","differ/math/Vector.hx",104,0x52c5a871)
HX_LOCAL_STACK_FRAME(_hx_pos_340c439663f93830_114_subtract,"differ.math.Vector","subtract",0xea14f195,"differ.math.Vector.subtract","differ/math/Vector.hx",114,0x52c5a871)
HX_LOCAL_STACK_FRAME(_hx_pos_340c439663f93830_124_toString,"differ.math.Vector","toString",0x2a724d2d,"differ.math.Vector.toString","differ/math/Vector.hx",124,0x52c5a871)
HX_LOCAL_STACK_FRAME(_hx_pos_340c439663f93830_129_set_length,"differ.math.Vector","set_length",0xaa4901e4,"differ.math.Vector.set_length","differ/math/Vector.hx",129,0x52c5a871)
HX_LOCAL_STACK_FRAME(_hx_pos_340c439663f93830_144_get_length,"differ.math.Vector","get_length",0xa6cb6370,"differ.math.Vector.get_length","differ/math/Vector.hx",144,0x52c5a871)
HX_LOCAL_STACK_FRAME(_hx_pos_340c439663f93830_145_get_lengthsq,"differ.math.Vector","get_lengthsq",0x7aff840e,"differ.math.Vector.get_lengthsq","differ/math/Vector.hx",145,0x52c5a871)
namespace differ{
namespace math{

void Vector_obj::__construct(hx::Null< Float >  __o__x,hx::Null< Float >  __o__y){
            		Float _x = __o__x.Default(0);
            		Float _y = __o__y.Default(0);
            	HX_STACKFRAME(&_hx_pos_340c439663f93830_13_new)
HXLINE(  18)		this->y = ((Float)0);
HXLINE(  16)		this->x = ((Float)0);
HXLINE(  27)		this->x = _x;
HXLINE(  28)		this->y = _y;
            	}

Dynamic Vector_obj::__CreateEmpty() { return new Vector_obj; }

void *Vector_obj::_hx_vtable = 0;

Dynamic Vector_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vector_obj > _hx_result = new Vector_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Vector_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3d69575d;
}

 ::differ::math::Vector Vector_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_340c439663f93830_35_clone)
HXDLIN(  35)		return  ::differ::math::Vector_obj::__alloc( HX_CTX ,this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector_obj,clone,return )

 ::differ::math::Vector Vector_obj::transform( ::differ::math::Matrix matrix){
            	HX_GC_STACKFRAME(&_hx_pos_340c439663f93830_40_transform)
HXLINE(  42)		 ::differ::math::Vector v =  ::differ::math::Vector_obj::__alloc( HX_CTX ,this->x,this->y);
HXLINE(  44)		v->x = (((this->x * matrix->a) + (this->y * matrix->c)) + matrix->tx);
HXLINE(  45)		v->y = (((this->x * matrix->b) + (this->y * matrix->d)) + matrix->ty);
HXLINE(  47)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector_obj,transform,return )

 ::differ::math::Vector Vector_obj::normalize(){
            	HX_STACKFRAME(&_hx_pos_340c439663f93830_52_normalize)
HXLINE(  54)		if ((::Math_obj::sqrt(((this->x * this->x) + (this->y * this->y))) == 0)) {
HXLINE(  55)			this->x = ( (Float)(1) );
HXLINE(  56)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(  59)		Float len = ::Math_obj::sqrt(((this->x * this->x) + (this->y * this->y)));
HXLINE(  61)		 ::differ::math::Vector _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  61)		_hx_tmp->x = (_hx_tmp->x / len);
HXLINE(  62)		 ::differ::math::Vector _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  62)		_hx_tmp1->y = (_hx_tmp1->y / len);
HXLINE(  64)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector_obj,normalize,return )

 ::differ::math::Vector Vector_obj::truncate(Float max){
            	HX_STACKFRAME(&_hx_pos_340c439663f93830_71_truncate)
HXLINE(  73)		{
HXLINE(  73)			Float value = ::Math_obj::min(max,::Math_obj::sqrt(((this->x * this->x) + (this->y * this->y))));
HXDLIN(  73)			Float ep = ((Float)0.00000001);
HXDLIN(  73)			Float _angle = ::Math_obj::atan2(this->y,this->x);
HXDLIN(  73)			this->x = (::Math_obj::cos(_angle) * value);
HXDLIN(  73)			this->y = (::Math_obj::sin(_angle) * value);
HXDLIN(  73)			if ((::Math_obj::abs(this->x) < ep)) {
HXLINE(  73)				this->x = ( (Float)(0) );
            			}
HXDLIN(  73)			if ((::Math_obj::abs(this->y) < ep)) {
HXLINE(  73)				this->y = ( (Float)(0) );
            			}
            		}
HXLINE(  75)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector_obj,truncate,return )

 ::differ::math::Vector Vector_obj::invert(){
            	HX_STACKFRAME(&_hx_pos_340c439663f93830_80_invert)
HXLINE(  82)		this->x = -(this->x);
HXLINE(  83)		this->y = -(this->y);
HXLINE(  85)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector_obj,invert,return )

Float Vector_obj::dot( ::differ::math::Vector other){
            	HX_STACKFRAME(&_hx_pos_340c439663f93830_92_dot)
HXDLIN(  92)		return ((this->x * other->x) + (this->y * other->y));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector_obj,dot,return )

Float Vector_obj::cross( ::differ::math::Vector other){
            	HX_STACKFRAME(&_hx_pos_340c439663f93830_99_cross)
HXDLIN(  99)		return ((this->x * other->y) - (this->y * other->x));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector_obj,cross,return )

 ::differ::math::Vector Vector_obj::add( ::differ::math::Vector other){
            	HX_STACKFRAME(&_hx_pos_340c439663f93830_104_add)
HXLINE( 106)		 ::differ::math::Vector _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 106)		_hx_tmp->x = (_hx_tmp->x + other->x);
HXLINE( 107)		 ::differ::math::Vector _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 107)		_hx_tmp1->y = (_hx_tmp1->y + other->y);
HXLINE( 109)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector_obj,add,return )

 ::differ::math::Vector Vector_obj::subtract( ::differ::math::Vector other){
            	HX_STACKFRAME(&_hx_pos_340c439663f93830_114_subtract)
HXLINE( 116)		 ::differ::math::Vector _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 116)		_hx_tmp->x = (_hx_tmp->x - other->x);
HXLINE( 117)		 ::differ::math::Vector _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 117)		_hx_tmp1->y = (_hx_tmp1->y - other->y);
HXLINE( 119)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector_obj,subtract,return )

::String Vector_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_340c439663f93830_124_toString)
HXDLIN( 124)		return (((HX_("Vector x:",df,7b,20,19) + this->x) + HX_(", y:",15,15,2e,1d)) + this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector_obj,toString,return )

Float Vector_obj::set_length(Float value){
            	HX_STACKFRAME(&_hx_pos_340c439663f93830_129_set_length)
HXLINE( 131)		Float ep = ((Float)0.00000001);
HXLINE( 132)		Float _angle = ::Math_obj::atan2(this->y,this->x);
HXLINE( 134)		this->x = (::Math_obj::cos(_angle) * value);
HXLINE( 135)		this->y = (::Math_obj::sin(_angle) * value);
HXLINE( 137)		if ((::Math_obj::abs(this->x) < ep)) {
HXLINE( 137)			this->x = ( (Float)(0) );
            		}
HXLINE( 138)		if ((::Math_obj::abs(this->y) < ep)) {
HXLINE( 138)			this->y = ( (Float)(0) );
            		}
HXLINE( 140)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector_obj,set_length,return )

Float Vector_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_340c439663f93830_144_get_length)
HXDLIN( 144)		return ::Math_obj::sqrt(((this->x * this->x) + (this->y * this->y)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector_obj,get_length,return )

Float Vector_obj::get_lengthsq(){
            	HX_STACKFRAME(&_hx_pos_340c439663f93830_145_get_lengthsq)
HXDLIN( 145)		return ((this->x * this->x) + (this->y * this->y));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector_obj,get_lengthsq,return )


hx::ObjectPtr< Vector_obj > Vector_obj::__new(hx::Null< Float >  __o__x,hx::Null< Float >  __o__y) {
	hx::ObjectPtr< Vector_obj > __this = new Vector_obj();
	__this->__construct(__o__x,__o__y);
	return __this;
}

hx::ObjectPtr< Vector_obj > Vector_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o__x,hx::Null< Float >  __o__y) {
	Vector_obj *__this = (Vector_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Vector_obj), false, "differ.math.Vector"));
	*(void **)__this = Vector_obj::_hx_vtable;
	__this->__construct(__o__x,__o__y);
	return __this;
}

Vector_obj::Vector_obj()
{
}

hx::Val Vector_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dot") ) { return hx::Val( dot_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"cross") ) { return hx::Val( cross_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"invert") ) { return hx::Val( invert_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lengthsq") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_lengthsq() ); }
		if (HX_FIELD_EQ(inName,"truncate") ) { return hx::Val( truncate_dyn() ); }
		if (HX_FIELD_EQ(inName,"subtract") ) { return hx::Val( subtract_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform_dyn() ); }
		if (HX_FIELD_EQ(inName,"normalize") ) { return hx::Val( normalize_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"set_length") ) { return hx::Val( set_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_lengthsq") ) { return hx::Val( get_lengthsq_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Vector_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_length(inValue.Cast< Float >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vector_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("lengthsq",04,7f,c3,1f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Vector_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Vector_obj,x),HX_("x",78,00,00,00)},
	{hx::fsFloat,(int)offsetof(Vector_obj,y),HX_("y",79,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Vector_obj_sStaticStorageInfo = 0;
#endif

static ::String Vector_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("clone",5d,13,63,48),
	HX_("transform",6c,2d,93,45),
	HX_("normalize",8d,37,a1,ab),
	HX_("truncate",66,be,f9,ce),
	HX_("invert",16,e7,d8,9f),
	HX_("dot",89,42,4c,00),
	HX_("cross",80,5f,5a,4c),
	HX_("add",21,f2,49,00),
	HX_("subtract",14,75,11,f8),
	HX_("toString",ac,d0,6e,38),
	HX_("set_length",23,a3,0c,93),
	HX_("get_length",af,04,8f,8f),
	HX_("get_lengthsq",0d,33,dd,d4),
	::String(null()) };

hx::Class Vector_obj::__mClass;

void Vector_obj::__register()
{
	Vector_obj _hx_dummy;
	Vector_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("differ.math.Vector",0d,78,96,1e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vector_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vector_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vector_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vector_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace differ
} // end namespace math
