// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_differ_math_Util
#include <hxinc/differ/math/Util.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0c3269d229c05f32_7_vec_lengthsq,"differ.math.Util","vec_lengthsq",0x6da2ce71,"differ.math.Util.vec_lengthsq","differ/math/Util.hx",7,0x68b6e112)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3269d229c05f32_11_vec_length,"differ.math.Util","vec_length",0x20463f13,"differ.math.Util.vec_length","differ/math/Util.hx",11,0x68b6e112)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3269d229c05f32_14_vec_normalize,"differ.math.Util","vec_normalize",0x81276780,"differ.math.Util.vec_normalize","differ/math/Util.hx",14,0x68b6e112)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3269d229c05f32_20_vec_dot,"differ.math.Util","vec_dot",0x57292a3c,"differ.math.Util.vec_dot","differ/math/Util.hx",20,0x68b6e112)
namespace differ{
namespace math{

void Util_obj::__construct() { }

Dynamic Util_obj::__CreateEmpty() { return new Util_obj; }

void *Util_obj::_hx_vtable = 0;

Dynamic Util_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Util_obj > _hx_result = new Util_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Util_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7ca59688;
}

Float Util_obj::vec_lengthsq(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_0c3269d229c05f32_7_vec_lengthsq)
HXDLIN(   7)		return ((x * x) + (y * y));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Util_obj,vec_lengthsq,return )

Float Util_obj::vec_length(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_0c3269d229c05f32_11_vec_length)
HXDLIN(  11)		return ::Math_obj::sqrt(((x * x) + (y * y)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Util_obj,vec_length,return )

Float Util_obj::vec_normalize(Float length,Float component){
            	HX_STACKFRAME(&_hx_pos_0c3269d229c05f32_14_vec_normalize)
HXLINE(  15)		if ((length == 0)) {
HXLINE(  15)			return ( (Float)(0) );
            		}
HXLINE(  16)		component = (component / length);
HXDLIN(  16)		return component;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Util_obj,vec_normalize,return )

Float Util_obj::vec_dot(Float x,Float y,Float otherx,Float othery){
            	HX_STACKFRAME(&_hx_pos_0c3269d229c05f32_20_vec_dot)
HXDLIN(  20)		return ((x * otherx) + (y * othery));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Util_obj,vec_dot,return )


Util_obj::Util_obj()
{
}

bool Util_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"vec_dot") ) { outValue = vec_dot_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vec_length") ) { outValue = vec_length_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"vec_lengthsq") ) { outValue = vec_lengthsq_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"vec_normalize") ) { outValue = vec_normalize_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Util_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Util_obj_sStaticStorageInfo = 0;
#endif

hx::Class Util_obj::__mClass;

static ::String Util_obj_sStaticFields[] = {
	HX_("vec_lengthsq",8f,a9,22,ea),
	HX_("vec_length",b1,76,92,07),
	HX_("vec_normalize",a2,46,87,f4),
	HX_("vec_dot",de,23,b3,cc),
	::String(null())
};

void Util_obj::__register()
{
	Util_obj _hx_dummy;
	Util_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("differ.math.Util",cc,d8,6d,c5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Util_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Util_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Util_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Util_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Util_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace differ
} // end namespace math
