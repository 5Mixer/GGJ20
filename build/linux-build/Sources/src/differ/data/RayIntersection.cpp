// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_differ_data_RayIntersection
#include <hxinc/differ/data/RayIntersection.h>
#endif
#ifndef INCLUDED_differ_shapes_Ray
#include <hxinc/differ/shapes/Ray.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_768cb0bd585f67d0_9_new,"differ.data.RayIntersection","new",0x029d859d,"differ.data.RayIntersection.new","differ/data/RayIntersection.hx",9,0x6d91d0d3)
HX_LOCAL_STACK_FRAME(_hx_pos_768cb0bd585f67d0_24_reset,"differ.data.RayIntersection","reset",0x56d7884c,"differ.data.RayIntersection.reset","differ/data/RayIntersection.hx",24,0x6d91d0d3)
HX_LOCAL_STACK_FRAME(_hx_pos_768cb0bd585f67d0_35_copy_from,"differ.data.RayIntersection","copy_from",0xde3e3671,"differ.data.RayIntersection.copy_from","differ/data/RayIntersection.hx",35,0x6d91d0d3)
HX_LOCAL_STACK_FRAME(_hx_pos_768cb0bd585f67d0_44_clone,"differ.data.RayIntersection","clone",0xb87251da,"differ.data.RayIntersection.clone","differ/data/RayIntersection.hx",44,0x6d91d0d3)
namespace differ{
namespace data{

void RayIntersection_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_768cb0bd585f67d0_9_new)
HXLINE(  19)		this->u2 = ((Float)0.0);
HXLINE(  17)		this->u1 = ((Float)0.0);
            	}

Dynamic RayIntersection_obj::__CreateEmpty() { return new RayIntersection_obj; }

void *RayIntersection_obj::_hx_vtable = 0;

Dynamic RayIntersection_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RayIntersection_obj > _hx_result = new RayIntersection_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RayIntersection_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1c25a10f;
}

 ::differ::data::RayIntersection RayIntersection_obj::reset(){
            	HX_GC_STACKFRAME(&_hx_pos_768cb0bd585f67d0_24_reset)
HXLINE(  26)		this->_hx_set_ray1(HX_CTX, null());
HXLINE(  27)		this->_hx_set_ray2(HX_CTX, null());
HXLINE(  28)		this->u1 = ((Float)0.0);
HXLINE(  29)		this->u2 = ((Float)0.0);
HXLINE(  31)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RayIntersection_obj,reset,return )

void RayIntersection_obj::copy_from( ::differ::data::RayIntersection other){
            	HX_GC_STACKFRAME(&_hx_pos_768cb0bd585f67d0_35_copy_from)
HXLINE(  37)		this->_hx_set_ray1(HX_CTX, other->ray1);
HXLINE(  38)		this->_hx_set_ray2(HX_CTX, other->ray2);
HXLINE(  39)		this->u1 = other->u1;
HXLINE(  40)		this->u2 = other->u2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RayIntersection_obj,copy_from,(void))

 ::differ::data::RayIntersection RayIntersection_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_768cb0bd585f67d0_44_clone)
HXLINE(  46)		 ::differ::data::RayIntersection _clone =  ::differ::data::RayIntersection_obj::__alloc( HX_CTX );
HXLINE(  48)		{
HXLINE(  48)			_clone->_hx_set_ray1(HX_CTX, this->ray1);
HXDLIN(  48)			_clone->_hx_set_ray2(HX_CTX, this->ray2);
HXDLIN(  48)			_clone->u1 = this->u1;
HXDLIN(  48)			_clone->u2 = this->u2;
            		}
HXLINE(  50)		return _clone;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RayIntersection_obj,clone,return )


hx::ObjectPtr< RayIntersection_obj > RayIntersection_obj::__new() {
	hx::ObjectPtr< RayIntersection_obj > __this = new RayIntersection_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< RayIntersection_obj > RayIntersection_obj::__alloc(hx::Ctx *_hx_ctx) {
	RayIntersection_obj *__this = (RayIntersection_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RayIntersection_obj), true, "differ.data.RayIntersection"));
	*(void **)__this = RayIntersection_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

RayIntersection_obj::RayIntersection_obj()
{
}

void RayIntersection_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RayIntersection);
	HX_MARK_MEMBER_NAME(ray1,"ray1");
	HX_MARK_MEMBER_NAME(ray2,"ray2");
	HX_MARK_MEMBER_NAME(u1,"u1");
	HX_MARK_MEMBER_NAME(u2,"u2");
	HX_MARK_END_CLASS();
}

void RayIntersection_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ray1,"ray1");
	HX_VISIT_MEMBER_NAME(ray2,"ray2");
	HX_VISIT_MEMBER_NAME(u1,"u1");
	HX_VISIT_MEMBER_NAME(u2,"u2");
}

hx::Val RayIntersection_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"u1") ) { return hx::Val( u1 ); }
		if (HX_FIELD_EQ(inName,"u2") ) { return hx::Val( u2 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ray1") ) { return hx::Val( ray1 ); }
		if (HX_FIELD_EQ(inName,"ray2") ) { return hx::Val( ray2 ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copy_from") ) { return hx::Val( copy_from_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RayIntersection_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"u1") ) { u1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"u2") ) { u2=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ray1") ) { _hx_set_ray1(HX_CTX_GET,inValue.Cast<  ::differ::shapes::Ray >()); return inValue; }
		if (HX_FIELD_EQ(inName,"ray2") ) { _hx_set_ray2(HX_CTX_GET,inValue.Cast<  ::differ::shapes::Ray >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RayIntersection_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("ray1",07,57,a4,4b));
	outFields->push(HX_("ray2",08,57,a4,4b));
	outFields->push(HX_("u1",1c,66,00,00));
	outFields->push(HX_("u2",1d,66,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo RayIntersection_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::differ::shapes::Ray */ ,(int)offsetof(RayIntersection_obj,ray1),HX_("ray1",07,57,a4,4b)},
	{hx::fsObject /*  ::differ::shapes::Ray */ ,(int)offsetof(RayIntersection_obj,ray2),HX_("ray2",08,57,a4,4b)},
	{hx::fsFloat,(int)offsetof(RayIntersection_obj,u1),HX_("u1",1c,66,00,00)},
	{hx::fsFloat,(int)offsetof(RayIntersection_obj,u2),HX_("u2",1d,66,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RayIntersection_obj_sStaticStorageInfo = 0;
#endif

static ::String RayIntersection_obj_sMemberFields[] = {
	HX_("ray1",07,57,a4,4b),
	HX_("ray2",08,57,a4,4b),
	HX_("u1",1c,66,00,00),
	HX_("u2",1d,66,00,00),
	HX_("reset",cf,49,c8,e6),
	HX_("copy_from",74,75,a1,e9),
	HX_("clone",5d,13,63,48),
	::String(null()) };

hx::Class RayIntersection_obj::__mClass;

void RayIntersection_obj::__register()
{
	RayIntersection_obj _hx_dummy;
	RayIntersection_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("differ.data.RayIntersection",2b,73,71,80);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RayIntersection_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RayIntersection_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RayIntersection_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RayIntersection_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace differ
} // end namespace data
