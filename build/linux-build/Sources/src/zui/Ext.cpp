// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_System
#include <hxinc/kha/System.h>
#endif
#ifndef INCLUDED_kha__Color_Color_Impl_
#include <hxinc/kha/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_input_Keyboard
#include <hxinc/kha/input/Keyboard.h>
#endif
#ifndef INCLUDED_kha_netsync_Controller
#include <hxinc/kha/netsync/Controller.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <hxinc/sys/FileSystem.h>
#endif
#ifndef INCLUDED_zui_Ext
#include <hxinc/zui/Ext.h>
#endif
#ifndef INCLUDED_zui_Handle
#include <hxinc/zui/Handle.h>
#endif
#ifndef INCLUDED_zui_Popup
#include <hxinc/zui/Popup.h>
#endif
#ifndef INCLUDED_zui_Zui
#include <hxinc/zui/Zui.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_24_floatInput,"zui.Ext","floatInput",0x0f643abb,"zui.Ext.floatInput","Sources/zui/Ext.hx",24,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_31_keyInput,"zui.Ext","keyInput",0x9222c698,"zui.Ext.keyInput","Sources/zui/Ext.hx",31,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_62_listenToKey,"zui.Ext","listenToKey",0x19688e90,"zui.Ext.listenToKey","Sources/zui/Ext.hx",62,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_76_list,"zui.Ext","list",0x0efd5e8b,"zui.Ext.list","Sources/zui/Ext.hx",76,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_80_list,"zui.Ext","list",0x0efd5e8b,"zui.Ext.list","Sources/zui/Ext.hx",80,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_81_list,"zui.Ext","list",0x0efd5e8b,"zui.Ext.list","Sources/zui/Ext.hx",81,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_82_list,"zui.Ext","list",0x0efd5e8b,"zui.Ext.list","Sources/zui/Ext.hx",82,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_83_list,"zui.Ext","list",0x0efd5e8b,"zui.Ext.list","Sources/zui/Ext.hx",83,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_84_list,"zui.Ext","list",0x0efd5e8b,"zui.Ext.list","Sources/zui/Ext.hx",84,0x3e745f95)
static const Float _hx_array_data_2cab4d61_10[] = {
	0.12,0.68,0.2,
};
static const Float _hx_array_data_2cab4d61_11[] = {
	0.8,0.2,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_122_panelList,"zui.Ext","panelList",0xb0285035,"zui.Ext.panelList","Sources/zui/Ext.hx",122,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_124_panelList,"zui.Ext","panelList",0xb0285035,"zui.Ext.panelList","Sources/zui/Ext.hx",124,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_125_panelList,"zui.Ext","panelList",0xb0285035,"zui.Ext.panelList","Sources/zui/Ext.hx",125,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_126_panelList,"zui.Ext","panelList",0xb0285035,"zui.Ext.panelList","Sources/zui/Ext.hx",126,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_127_panelList,"zui.Ext","panelList",0xb0285035,"zui.Ext.panelList","Sources/zui/Ext.hx",127,0x3e745f95)
static const Float _hx_array_data_2cab4d61_18[] = {
	0.12,0.68,0.2,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_146_colorField,"zui.Ext","colorField",0x57ad4e44,"zui.Ext.colorField","Sources/zui/Ext.hx",146,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_157_colorField,"zui.Ext","colorField",0x57ad4e44,"zui.Ext.colorField","Sources/zui/Ext.hx",157,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_165_colorPicker,"zui.Ext","colorPicker",0x5e359ac4,"zui.Ext.colorPicker","Sources/zui/Ext.hx",165,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_177_initPath,"zui.Ext","initPath",0xdea47182,"zui.Ext.initPath","Sources/zui/Ext.hx",177,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_184_fileBrowser,"zui.Ext","fileBrowser",0x70db69ff,"zui.Ext.fileBrowser","Sources/zui/Ext.hx",184,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_263_inlineRadio,"zui.Ext","inlineRadio",0xcb8ca155,"zui.Ext.inlineRadio","Sources/zui/Ext.hx",263,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_278_drawInlineRadio,"zui.Ext","drawInlineRadio",0x9dc37931,"zui.Ext.drawInlineRadio","Sources/zui/Ext.hx",278,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_293_colorWheel,"zui.Ext","colorWheel",0x20d3ee25,"zui.Ext.colorWheel","Sources/zui/Ext.hx",293,0x3e745f95)
static const Float _hx_array_data_2cab4d61_28[] = {
	0.333333333333333315,0.333333333333333315,0.333333333333333315,
};
static const Float _hx_array_data_2cab4d61_29[] = {
	0.5,0.5,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_357_textArea,"zui.Ext","textArea",0xd30b3b87,"zui.Ext.textArea","Sources/zui/Ext.hx",357,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_414_keycodeToString,"zui.Ext","keycodeToString",0xf355f20b,"zui.Ext.keycodeToString","Sources/zui/Ext.hx",414,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_572_dist,"zui.Ext","dist",0x09b3a993,"zui.Ext.dist","Sources/zui/Ext.hx",572,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_577_fract,"zui.Ext","fract",0xa03314b9,"zui.Ext.fract","Sources/zui/Ext.hx",577,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_578_mix,"zui.Ext","mix",0x316ef40f,"zui.Ext.mix","Sources/zui/Ext.hx",578,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_579_clamp,"zui.Ext","clamp",0xe208182e,"zui.Ext.clamp","Sources/zui/Ext.hx",579,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_580_step,"zui.Ext","step",0x13a62979,"zui.Ext.step","Sources/zui/Ext.hx",580,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_586_hsvToRgb,"zui.Ext","hsvToRgb",0x4fa0a1f4,"zui.Ext.hsvToRgb","Sources/zui/Ext.hx",586,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_599_rgbToHsv,"zui.Ext","rgbToHsv",0x996cc2b0,"zui.Ext.rgbToHsv","Sources/zui/Ext.hx",599,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_182_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",182,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_183_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",183,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_292_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",292,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_581_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",581,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_582_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",582,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_583_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",583,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_584_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",584,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_585_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",585,0x3e745f95)
static const Float _hx_array_data_2cab4d61_48[] = {
	0.0,0.0,0.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_594_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",594,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_595_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",595,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_596_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",596,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_597_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",597,0x3e745f95)
HX_LOCAL_STACK_FRAME(_hx_pos_e1bfd625ad8d8ccd_598_boot,"zui.Ext","boot",0x0865c65f,"zui.Ext.boot","Sources/zui/Ext.hx",598,0x3e745f95)
namespace zui{

void Ext_obj::__construct() { }

Dynamic Ext_obj::__CreateEmpty() { return new Ext_obj; }

void *Ext_obj::_hx_vtable = 0;

Dynamic Ext_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Ext_obj > _hx_result = new Ext_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Ext_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x30e85a17;
}

Float Ext_obj::floatInput( ::zui::Zui ui, ::zui::Handle handle,::String __o_label,hx::Null< int >  __o_align){
            		::String label = __o_label;
            		if (hx::IsNull(__o_label)) label = HX_("",00,00,00,00);
            		int align = __o_align.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_24_floatInput)
HXLINE(  25)		handle->_hx_set_text(HX_CTX, ::Std_obj::string(handle->value));
HXLINE(  26)		::String text = ui->textInput(handle,label,align);
HXLINE(  27)		handle->value = ::Std_obj::parseFloat(text);
HXLINE(  28)		return handle->value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Ext_obj,floatInput,return )

int Ext_obj::keyInput( ::zui::Zui ui, ::zui::Handle handle,::String __o_label,hx::Null< int >  __o_align){
            		::String label = __o_label;
            		if (hx::IsNull(__o_label)) label = HX_("",00,00,00,00);
            		int align = __o_align.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_31_keyInput)
HXLINE(  32)		if (!(ui->isVisible((( (Float)(ui->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))))) {
HXLINE(  32)			ui->endElement(null());
HXDLIN(  32)			return ::Std_obj::_hx_int(handle->value);
            		}
HXLINE(  34)		bool hover = ui->getHover(null());
HXLINE(  35)		bool _hx_tmp;
HXDLIN(  35)		if (hover) {
HXLINE(  35)			_hx_tmp = hx::IsNotNull( ::zui::Zui_obj::onTextHover );
            		}
            		else {
HXLINE(  35)			_hx_tmp = false;
            		}
HXDLIN(  35)		if (_hx_tmp) {
HXLINE(  35)			::zui::Zui_obj::onTextHover();
            		}
HXLINE(  36)		int _hx_tmp1;
HXDLIN(  36)		if (hover) {
HXLINE(  36)			_hx_tmp1 = ( (int)(ui->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  36)			_hx_tmp1 = ( (int)(ui->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),hx::paccDynamic)) );
            		}
HXDLIN(  36)		ui->g->set_color(_hx_tmp1);
HXLINE(  37)		{
HXLINE(  37)			 ::kha::graphics2::Graphics g = ui->g;
HXDLIN(  37)			bool fill = ( (bool)(ui->t->__Field(HX_("FILL_ACCENT_BG",de,70,14,63),hx::paccDynamic)) );
HXDLIN(  37)			Float x = (ui->_x + ui->buttonOffsetY);
HXDLIN(  37)			Float y = (ui->_y + ui->buttonOffsetY);
HXDLIN(  37)			Float w = (( (Float)(ui->_w) ) - (ui->buttonOffsetY * ( (Float)(2) )));
HXDLIN(  37)			Float h = (( (Float)(ui->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXDLIN(  37)			Float strength = ((Float)0.0);
HXDLIN(  37)			if ((strength == ((Float)0.0))) {
HXLINE(  37)				strength = ( (Float)(1) );
            			}
HXDLIN(  37)			if (!(ui->enabled)) {
HXLINE(  37)				ui->fadeColor();
            			}
HXDLIN(  37)			if (fill) {
HXLINE(  37)				g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            			}
            			else {
HXLINE(  37)				g->drawRect(x,y,w,h,strength);
            			}
            		}
HXLINE(  39)		bool startEdit;
HXDLIN(  39)		if (!(ui->getReleased(null()))) {
HXLINE(  39)			startEdit = ui->tabPressed;
            		}
            		else {
HXLINE(  39)			startEdit = true;
            		}
HXLINE(  40)		bool _hx_tmp2;
HXDLIN(  40)		if (hx::IsNotEq( ui->textSelectedHandle,handle )) {
HXLINE(  40)			_hx_tmp2 = startEdit;
            		}
            		else {
HXLINE(  40)			_hx_tmp2 = false;
            		}
HXDLIN(  40)		if (_hx_tmp2) {
HXLINE(  40)			ui->startTextEdit(handle);
            		}
HXLINE(  41)		if (hx::IsEq( ui->textSelectedHandle,handle )) {
HXLINE(  41)			::zui::Ext_obj::listenToKey(ui,handle);
            		}
            		else {
HXLINE(  42)			handle->changed = false;
            		}
HXLINE(  44)		if ((label != HX_("",00,00,00,00))) {
HXLINE(  45)			ui->g->set_color(( (int)(ui->t->__Field(HX_("LABEL_COL",f5,20,15,76),hx::paccDynamic)) ));
HXLINE(  46)			int labelAlign;
HXDLIN(  46)			if ((align == 2)) {
HXLINE(  46)				labelAlign = 0;
            			}
            			else {
HXLINE(  46)				labelAlign = 2;
            			}
HXLINE(  47)			int xOffset;
HXDLIN(  47)			if ((labelAlign == 0)) {
HXLINE(  47)				xOffset = 7;
            			}
            			else {
HXLINE(  47)				xOffset = 0;
            			}
HXLINE(  48)			ui->drawString(ui->g,label,xOffset,0,labelAlign);
            		}
HXLINE(  51)		handle->_hx_set_text(HX_CTX, ::zui::Ext_obj::keycodeToString(::Std_obj::_hx_int(handle->value)));
HXLINE(  53)		ui->g->set_color(( (int)(ui->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),hx::paccDynamic)) ));
HXLINE(  54)		if (hx::IsNotEq( ui->textSelectedHandle,handle )) {
HXLINE(  54)			ui->drawString(ui->g,handle->text,null(),0,align);
            		}
            		else {
HXLINE(  54)			ui->drawString(ui->g,ui->textSelected,null(),0,align);
            		}
HXLINE(  56)		ui->endElement(null());
HXLINE(  58)		return ::Std_obj::_hx_int(handle->value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Ext_obj,keyInput,return )

void Ext_obj::listenToKey( ::zui::Zui ui, ::zui::Handle handle){
            	HX_GC_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_62_listenToKey)
HXDLIN(  62)		if (ui->isKeyDown) {
HXLINE(  63)			handle->value = ( (Float)(ui->key) );
HXLINE(  64)			handle->changed = (ui->changed = true);
HXLINE(  66)			ui->_hx_set_textSelectedHandle(HX_CTX, null());
HXLINE(  67)			ui->isTyping = false;
HXLINE(  69)			if (hx::IsNotNull( ::kha::input::Keyboard_obj::get(null()) )) {
HXLINE(  69)				::kha::input::Keyboard_obj::get(null())->hide();
            			}
            		}
            		else {
HXLINE(  72)			ui->_hx_set_textSelected(HX_CTX, HX_("Press a key...",eb,81,85,98));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ext_obj,listenToKey,(void))

int Ext_obj::list( ::zui::Zui ui, ::zui::Handle handle,::cpp::VirtualArray ar, ::Dynamic opts){
            	HX_GC_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_76_list)
HXLINE(  77)		int selected = 0;
HXLINE(  78)		if (hx::IsNull( opts )) {
HXLINE(  78)			opts =  ::Dynamic(hx::Anon_obj::Create(0));
            		}
HXLINE(  80)		 ::Dynamic addCb;
HXDLIN(  80)		if (hx::IsNotNull( opts->__Field(HX_("addCb",20,b7,43,1c),hx::paccDynamic) )) {
HXLINE(  80)			addCb = opts->__Field(HX_("addCb",20,b7,43,1c),hx::paccDynamic);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::cpp::VirtualArray,ar) HXARGC(1)
            			void _hx_run(::String name){
            				HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_80_list)
HXLINE(  80)				ar->push(name);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  80)			addCb =  ::Dynamic(new _hx_Closure_0(ar));
            		}
HXLINE(  81)		 ::Dynamic removeCb;
HXDLIN(  81)		if (hx::IsNotNull( opts->__Field(HX_("removeCb",03,70,1b,ad),hx::paccDynamic) )) {
HXLINE(  81)			removeCb = opts->__Field(HX_("removeCb",03,70,1b,ad),hx::paccDynamic);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::cpp::VirtualArray,ar) HXARGC(1)
            			void _hx_run(int i){
            				HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_81_list)
HXLINE(  81)				ar->splice(i,1);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  81)			removeCb =  ::Dynamic(new _hx_Closure_1(ar));
            		}
HXLINE(  82)		 ::Dynamic getNameCb;
HXDLIN(  82)		if (hx::IsNotNull( opts->__Field(HX_("getNameCb",00,9f,cf,99),hx::paccDynamic) )) {
HXLINE(  82)			getNameCb = opts->__Field(HX_("getNameCb",00,9f,cf,99),hx::paccDynamic);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2,::cpp::VirtualArray,ar) HXARGC(1)
            			::String _hx_run(int i1){
            				HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_82_list)
HXLINE(  82)				return ( (::String)(ar->__get(i1)) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(  82)			getNameCb =  ::Dynamic(new _hx_Closure_2(ar));
            		}
HXLINE(  83)		 ::Dynamic setNameCb;
HXDLIN(  83)		if (hx::IsNotNull( opts->__Field(HX_("setNameCb",0c,8b,20,7d),hx::paccDynamic) )) {
HXLINE(  83)			setNameCb = opts->__Field(HX_("setNameCb",0c,8b,20,7d),hx::paccDynamic);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3,::cpp::VirtualArray,ar) HXARGC(2)
            			void _hx_run(int i2,::String name1){
            				HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_83_list)
HXLINE(  83)				ar->set(i2,name1);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(  83)			setNameCb =  ::Dynamic(new _hx_Closure_3(ar));
            		}
HXLINE(  84)		 ::Dynamic getLabelCb;
HXDLIN(  84)		if (hx::IsNotNull( opts->__Field(HX_("getLabelCb",bd,33,67,53),hx::paccDynamic) )) {
HXLINE(  84)			getLabelCb = opts->__Field(HX_("getLabelCb",bd,33,67,53),hx::paccDynamic);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            			::String _hx_run(int i3){
            				HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_84_list)
HXLINE(  84)				return HX_("",00,00,00,00);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(  84)			getLabelCb =  ::Dynamic(new _hx_Closure_4());
            		}
HXLINE(  85)		 ::Dynamic itemDrawCb = opts->__Field(HX_("itemDrawCb",36,39,e4,cd),hx::paccDynamic);
HXLINE(  86)		 ::Dynamic showRadio;
HXDLIN(  86)		if (hx::IsNotNull( opts->__Field(HX_("showRadio",be,76,7c,12),hx::paccDynamic) )) {
HXLINE(  86)			showRadio = opts->__Field(HX_("showRadio",be,76,7c,12),hx::paccDynamic);
            		}
            		else {
HXLINE(  86)			showRadio = false;
            		}
HXLINE(  87)		 ::Dynamic editable;
HXDLIN(  87)		if (hx::IsNotNull( opts->__Field(HX_("editable",a4,04,a6,d5),hx::paccDynamic) )) {
HXLINE(  87)			editable = opts->__Field(HX_("editable",a4,04,a6,d5),hx::paccDynamic);
            		}
            		else {
HXLINE(  87)			editable = true;
            		}
HXLINE(  88)		 ::Dynamic showAdd;
HXDLIN(  88)		if (hx::IsNotNull( opts->__Field(HX_("showAdd",24,51,96,7b),hx::paccDynamic) )) {
HXLINE(  88)			showAdd = opts->__Field(HX_("showAdd",24,51,96,7b),hx::paccDynamic);
            		}
            		else {
HXLINE(  88)			showAdd = true;
            		}
HXLINE(  89)		::String addLabel;
HXDLIN(  89)		if (hx::IsNotNull( opts->__Field(HX_("addLabel",13,34,0c,e9),hx::paccDynamic) )) {
HXLINE(  89)			addLabel = ( (::String)(opts->__Field(HX_("addLabel",13,34,0c,e9),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  89)			addLabel = HX_("Add",01,aa,31,00);
            		}
HXLINE(  91)		int i4 = 0;
HXLINE(  92)		while((i4 < ar->get_length())){
HXLINE(  93)			if (( (bool)(showRadio) )) {
HXLINE(  94)				ui->row(::Array_obj< Float >::fromData( _hx_array_data_2cab4d61_10,3));
HXLINE(  95)				if (ui->radio(handle->nest(0,null()),i4,HX_("",00,00,00,00))) {
HXLINE(  96)					selected = i4;
            				}
            			}
            			else {
HXLINE(  99)				ui->row(::Array_obj< Float >::fromData( _hx_array_data_2cab4d61_11,2));
            			}
HXLINE( 101)			 ::zui::Handle itemHandle = handle->nest(i4,null());
HXLINE( 102)			itemHandle->_hx_set_text(HX_CTX, ( (::String)(getNameCb(i4)) ));
HXLINE( 103)			if (( (bool)(editable) )) {
HXLINE( 103)				setNameCb(i4,ui->textInput(itemHandle,( (::String)(getLabelCb(i4)) ),null()));
            			}
            			else {
HXLINE( 103)				ui->text(( (::String)(getNameCb(i4)) ),null(),null());
            			}
HXLINE( 104)			if (ui->button(HX_("X",58,00,00,00),null(),null())) {
HXLINE( 104)				removeCb(i4);
            			}
            			else {
HXLINE( 105)				i4 = (i4 + 1);
            			}
HXLINE( 107)			if (hx::IsNotNull( itemDrawCb )) {
HXLINE( 107)				itemDrawCb(itemHandle->nest(i4,null()),(i4 - 1));
            			}
            		}
HXLINE( 109)		bool _hx_tmp;
HXDLIN( 109)		if (( (bool)(showAdd) )) {
HXLINE( 109)			_hx_tmp = ui->button(addLabel,null(),null());
            		}
            		else {
HXLINE( 109)			_hx_tmp = false;
            		}
HXDLIN( 109)		if (_hx_tmp) {
HXLINE( 109)			addCb(HX_("untitled",e5,fe,be,25));
            		}
HXLINE( 111)		return selected;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Ext_obj,list,return )

void Ext_obj::panelList( ::zui::Zui ui, ::zui::Handle handle,::cpp::VirtualArray ar, ::Dynamic addCb, ::Dynamic removeCb, ::Dynamic getNameCb, ::Dynamic setNameCb, ::Dynamic itemDrawCb,hx::Null< bool >  __o_editable,hx::Null< bool >  __o_showAdd,::String __o_addLabel){
            		bool editable = __o_editable.Default(true);
            		bool showAdd = __o_showAdd.Default(true);
            		::String addLabel = __o_addLabel;
            		if (hx::IsNull(__o_addLabel)) addLabel = HX_("Add",01,aa,31,00);
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_122_panelList)
HXLINE( 124)		if (hx::IsNull( addCb )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::cpp::VirtualArray,ar) HXARGC(1)
            			void _hx_run(::String name){
            				HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_124_panelList)
HXLINE( 124)				ar->push(name);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 124)			addCb =  ::Dynamic(new _hx_Closure_0(ar));
            		}
HXLINE( 125)		if (hx::IsNull( removeCb )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::cpp::VirtualArray,ar) HXARGC(1)
            			void _hx_run(int i){
            				HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_125_panelList)
HXLINE( 125)				ar->splice(i,1);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 125)			removeCb =  ::Dynamic(new _hx_Closure_1(ar));
            		}
HXLINE( 126)		if (hx::IsNull( getNameCb )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2,::cpp::VirtualArray,ar) HXARGC(1)
            			::String _hx_run(int i1){
            				HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_126_panelList)
HXLINE( 126)				return ( (::String)(ar->__get(i1)) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 126)			getNameCb =  ::Dynamic(new _hx_Closure_2(ar));
            		}
HXLINE( 127)		if (hx::IsNull( setNameCb )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3,::cpp::VirtualArray,ar) HXARGC(2)
            			void _hx_run(int i2,::String name1){
            				HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_127_panelList)
HXLINE( 127)				ar->set(i2,name1);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 127)			setNameCb =  ::Dynamic(new _hx_Closure_3(ar));
            		}
HXLINE( 129)		int i3 = 0;
HXLINE( 130)		while((i3 < ar->get_length())){
HXLINE( 131)			ui->row(::Array_obj< Float >::fromData( _hx_array_data_2cab4d61_18,3));
HXLINE( 132)			bool expanded = ui->panel(handle->nest(i3,null()),HX_("",00,00,00,00),null());
HXLINE( 134)			 ::zui::Handle itemHandle = handle->nest(i3,null());
HXLINE( 135)			if (editable) {
HXLINE( 135)				setNameCb(i3,ui->textInput(itemHandle,( (::String)(getNameCb(i3)) ),null()));
            			}
            			else {
HXLINE( 135)				ui->text(( (::String)(getNameCb(i3)) ),null(),null());
            			}
HXLINE( 136)			if (ui->button(HX_("X",58,00,00,00),null(),null())) {
HXLINE( 136)				removeCb(i3);
            			}
            			else {
HXLINE( 137)				i3 = (i3 + 1);
            			}
HXLINE( 139)			bool _hx_tmp;
HXDLIN( 139)			if (hx::IsNotNull( itemDrawCb )) {
HXLINE( 139)				_hx_tmp = expanded;
            			}
            			else {
HXLINE( 139)				_hx_tmp = false;
            			}
HXDLIN( 139)			if (_hx_tmp) {
HXLINE( 139)				itemDrawCb(itemHandle->nest(i3,null()),(i3 - 1));
            			}
            		}
HXLINE( 141)		bool _hx_tmp1;
HXDLIN( 141)		if (showAdd) {
HXLINE( 141)			_hx_tmp1 = ui->button(addLabel,null(),null());
            		}
            		else {
HXLINE( 141)			_hx_tmp1 = false;
            		}
HXDLIN( 141)		if (_hx_tmp1) {
HXLINE( 142)			addCb(HX_("untitled",e5,fe,be,25));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(Ext_obj,panelList,(void))

int Ext_obj::colorField( ::zui::Zui ui, ::zui::Handle handle,hx::Null< bool >  __o_alpha){
            		bool alpha = __o_alpha.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_146_colorField)
HXLINE( 147)		ui->g->set_color(handle->color);
HXLINE( 149)		{
HXLINE( 149)			 ::kha::graphics2::Graphics g = ui->g;
HXDLIN( 149)			Float x = (ui->_x + 2);
HXDLIN( 149)			Float y = ui->_y;
HXDLIN( 149)			Float w = ( (Float)((ui->_w - 4)) );
HXDLIN( 149)			Float h = (( (Float)(ui->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXDLIN( 149)			Float strength = ((Float)0.0);
HXDLIN( 149)			if ((strength == ((Float)0.0))) {
HXLINE( 149)				strength = ( (Float)(1) );
            			}
HXDLIN( 149)			if (!(ui->enabled)) {
HXLINE( 149)				ui->fadeColor();
            			}
HXDLIN( 149)			g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            		}
HXLINE( 150)		 ::kha::graphics2::Graphics ui1 = ui->g;
HXDLIN( 150)		int _hx_tmp;
HXDLIN( 150)		if (ui->getHover(null())) {
HXLINE( 150)			_hx_tmp = ( (int)(ui->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),hx::paccDynamic)) );
            		}
            		else {
HXLINE( 150)			_hx_tmp = ( (int)(ui->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),hx::paccDynamic)) );
            		}
HXDLIN( 150)		ui1->set_color(_hx_tmp);
HXLINE( 151)		{
HXLINE( 151)			 ::kha::graphics2::Graphics g1 = ui->g;
HXDLIN( 151)			Float x1 = (ui->_x + 2);
HXDLIN( 151)			Float y1 = ui->_y;
HXDLIN( 151)			Float w1 = ( (Float)((ui->_w - 4)) );
HXDLIN( 151)			Float h1 = (( (Float)(ui->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXDLIN( 151)			Float strength1 = ((Float)1.0);
HXDLIN( 151)			if ((strength1 == ((Float)0.0))) {
HXLINE( 151)				strength1 = ( (Float)(1) );
            			}
HXDLIN( 151)			if (!(ui->enabled)) {
HXLINE( 151)				ui->fadeColor();
            			}
HXDLIN( 151)			g1->drawRect(x1,y1,w1,h1,strength1);
            		}
HXLINE( 153)		if (ui->getStarted(null())) {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::zui::Handle,handle,bool,alpha) HXARGC(1)
            			void _hx_run( ::zui::Zui ui2){
            				HX_GC_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_157_colorField)
HXLINE( 157)				::zui::Ext_obj::colorWheel(ui2,handle,alpha,null(),null(),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 155)			 ::zui::Zui _hx_tmp1 =  ::zui::Zui_obj::__alloc( HX_CTX ,ui->ops);
HXLINE( 158)			int _hx_tmp2 = ::Std_obj::_hx_int(ui->inputX);
HXLINE( 154)			::zui::Popup_obj::showCustom(_hx_tmp1, ::Dynamic(new _hx_Closure_0(handle,alpha)),_hx_tmp2,::Std_obj::_hx_int(ui->inputY),200,500);
            		}
HXLINE( 161)		ui->endElement(null());
HXLINE( 162)		return handle->color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ext_obj,colorField,return )

int Ext_obj::colorPicker( ::zui::Zui ui, ::zui::Handle handle,hx::Null< bool >  __o_alpha){
            		bool alpha = __o_alpha.Default(false);
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_165_colorPicker)
HXLINE( 166)		Float r = ui->slider(handle->nest(0, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("value",71,7f,b8,31),(( (float)(hx::UShr((handle->color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))))),HX_("R",52,00,00,00),0,1,true,null(),null(),null(),null());
HXLINE( 167)		Float g = ui->slider(handle->nest(1, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("value",71,7f,b8,31),(( (float)(hx::UShr((handle->color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))))),HX_("G",47,00,00,00),0,1,true,null(),null(),null(),null());
HXLINE( 168)		Float b = ui->slider(handle->nest(2, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("value",71,7f,b8,31),(( (float)((handle->color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))))),HX_("B",42,00,00,00),0,1,true,null(),null(),null(),null());
HXLINE( 169)		float a = (( (float)(hx::UShr(handle->color,24)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXLINE( 170)		if (alpha) {
HXLINE( 170)			a = ( (float)(ui->slider(handle->nest(3, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("value",71,7f,b8,31),a))),HX_("A",41,00,00,00),0,1,true,null(),null(),null(),null())) );
            		}
HXLINE( 171)		int col = ::kha::_Color::Color_Impl__obj::fromFloats(( (float)(r) ),( (float)(g) ),( (float)(b) ),a);
HXLINE( 172)		ui->text(HX_("",00,00,00,00),2,col);
HXLINE( 173)		return col;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ext_obj,colorPicker,return )

void Ext_obj::initPath( ::zui::Handle handle,::String systemId){
            	HX_GC_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_177_initPath)
HXDLIN( 177)		::String _hx_tmp;
HXDLIN( 177)		if ((systemId == HX_("Windows",63,06,c6,b5))) {
HXDLIN( 177)			_hx_tmp = HX_("C:\\Users",a3,d7,45,6a);
            		}
            		else {
HXDLIN( 177)			_hx_tmp = HX_("/",2f,00,00,00);
            		}
HXDLIN( 177)		handle->_hx_set_text(HX_CTX, _hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ext_obj,initPath,(void))

::String Ext_obj::dataPath;

::String Ext_obj::lastPath;

::String Ext_obj::fileBrowser( ::zui::Zui ui, ::zui::Handle handle,hx::Null< bool >  __o_foldersOnly){
            		bool foldersOnly = __o_foldersOnly.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_184_fileBrowser)
HXLINE( 185)		::String sep = HX_("/",2f,00,00,00);
HXLINE( 208)		if ((handle->text == HX_("",00,00,00,00))) {
HXLINE( 208)			::zui::Ext_obj::initPath(handle,::kha::System_obj::get_systemId());
            		}
HXLINE( 209)		::Array< ::String > files;
HXDLIN( 209)		if (::sys::FileSystem_obj::isDirectory(handle->text)) {
HXLINE( 209)			files = ::sys::FileSystem_obj::readDirectory(handle->text);
            		}
            		else {
HXLINE( 209)			files = ::Array_obj< ::String >::__new(0);
            		}
HXLINE( 237)		int i1 = handle->text.indexOf(HX_("/",2f,00,00,00),null());
HXLINE( 238)		int i2 = handle->text.indexOf(HX_("\\",5c,00,00,00),null());
HXLINE( 239)		bool nested;
HXLINE( 240)		bool nested1;
HXDLIN( 240)		if ((i1 > -1)) {
HXLINE( 240)			nested1 = ((handle->text.length - 1) > i1);
            		}
            		else {
HXLINE( 240)			nested1 = false;
            		}
HXDLIN( 240)		if (!(nested1)) {
HXLINE( 241)			if ((i2 > -1)) {
HXLINE( 239)				nested = ((handle->text.length - 1) > i2);
            			}
            			else {
HXLINE( 239)				nested = false;
            			}
            		}
            		else {
HXLINE( 239)			nested = true;
            		}
HXLINE( 242)		handle->changed = false;
HXLINE( 243)		bool _hx_tmp;
HXDLIN( 243)		if (nested) {
HXLINE( 243)			_hx_tmp = ui->button(HX_("..",40,28,00,00),0,null());
            		}
            		else {
HXLINE( 243)			_hx_tmp = false;
            		}
HXDLIN( 243)		if (_hx_tmp) {
HXLINE( 244)			handle->changed = (ui->changed = true);
HXLINE( 245)			::String handle1 = handle->text;
HXDLIN( 245)			handle->_hx_set_text(HX_CTX, handle1.substring(0,handle->text.lastIndexOf(sep,null())));
HXLINE( 247)			bool _hx_tmp1;
HXDLIN( 247)			if ((handle->text.length == 2)) {
HXLINE( 247)				_hx_tmp1 = (handle->text.charAt(1) == HX_(":",3a,00,00,00));
            			}
            			else {
HXLINE( 247)				_hx_tmp1 = false;
            			}
HXDLIN( 247)			if (_hx_tmp1) {
HXLINE( 247)				 ::zui::Handle handle2 = handle;
HXDLIN( 247)				handle2->_hx_set_text(HX_CTX, (handle2->text + sep));
            			}
            		}
HXLINE( 251)		{
HXLINE( 251)			int _g = 0;
HXDLIN( 251)			while((_g < files->length)){
HXLINE( 251)				::String f = files->__get(_g);
HXDLIN( 251)				_g = (_g + 1);
HXLINE( 252)				bool _hx_tmp2;
HXDLIN( 252)				if ((f != HX_("",00,00,00,00))) {
HXLINE( 252)					_hx_tmp2 = (f.charAt(0) == HX_(".",2e,00,00,00));
            				}
            				else {
HXLINE( 252)					_hx_tmp2 = true;
            				}
HXDLIN( 252)				if (_hx_tmp2) {
HXLINE( 252)					continue;
            				}
HXLINE( 253)				if (ui->button(f,0,null())) {
HXLINE( 254)					handle->changed = (ui->changed = true);
HXLINE( 255)					if ((handle->text.charAt((handle->text.length - 1)) != sep)) {
HXLINE( 255)						 ::zui::Handle handle3 = handle;
HXDLIN( 255)						handle3->_hx_set_text(HX_CTX, (handle3->text + sep));
            					}
HXLINE( 256)					 ::zui::Handle handle4 = handle;
HXDLIN( 256)					handle4->_hx_set_text(HX_CTX, (handle4->text + f));
            				}
            			}
            		}
HXLINE( 260)		return handle->text;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ext_obj,fileBrowser,return )

int Ext_obj::inlineRadio( ::zui::Zui ui, ::zui::Handle handle,::Array< ::String > texts,hx::Null< int >  __o_align){
            		int align = __o_align.Default(1);
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_263_inlineRadio)
HXLINE( 264)		if (!(ui->isVisible((( (Float)(ui->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))))) {
HXLINE( 264)			ui->endElement(null());
HXDLIN( 264)			return handle->position;
            		}
HXLINE( 265)		if (ui->getReleased(null())) {
HXLINE( 266)			if ((++handle->position >= texts->length)) {
HXLINE( 266)				handle->position = 0;
            			}
HXLINE( 267)			handle->changed = (ui->changed = true);
            		}
            		else {
HXLINE( 269)			handle->changed = false;
            		}
HXLINE( 271)		bool hover = ui->getHover(null());
HXLINE( 272)		::zui::Ext_obj::drawInlineRadio(ui,texts->__get(handle->position),hover,align);
HXLINE( 274)		ui->endElement(null());
HXLINE( 275)		return handle->position;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Ext_obj,inlineRadio,return )

void Ext_obj::drawInlineRadio( ::zui::Zui ui,::String text,bool hover,hx::Null< int >  __o_align){
            		int align = __o_align.Default(1);
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_278_drawInlineRadio)
HXLINE( 279)		if (hover) {
HXLINE( 280)			ui->g->set_color(( (int)(ui->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),hx::paccDynamic)) ));
HXLINE( 281)			ui->g->fillRect((ui->_x + ui->buttonOffsetY),(ui->_y + ui->buttonOffsetY),(( (Float)(ui->_w) ) - (ui->buttonOffsetY * ( (Float)(2) ))),(( (Float)(ui->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            		}
            		else {
HXLINE( 284)			ui->g->set_color(( (int)(ui->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),hx::paccDynamic)) ));
HXLINE( 285)			if (!(ui->enabled)) {
HXLINE( 285)				ui->fadeColor();
            			}
HXLINE( 286)			ui->g->drawRect((ui->_x + ui->buttonOffsetY),(ui->_y + ui->buttonOffsetY),(( (Float)(ui->_w) ) - (ui->buttonOffsetY * ( (Float)(2) ))),(( (Float)(ui->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),null());
            		}
HXLINE( 288)		ui->g->set_color(( (int)(ui->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),hx::paccDynamic)) ));
HXLINE( 289)		ui->drawString(ui->g,text,(( (Float)(ui->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),0,align);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Ext_obj,drawInlineRadio,(void))

 ::zui::Handle Ext_obj::wheelSelectedHande;

int Ext_obj::colorWheel( ::zui::Zui ui, ::zui::Handle handle,hx::Null< bool >  __o_alpha, ::Dynamic w,hx::Null< bool >  __o_rowAlign,hx::Null< bool >  __o_colorPreview){
            		bool alpha = __o_alpha.Default(false);
            		bool rowAlign = __o_rowAlign.Default(false);
            		bool colorPreview = __o_colorPreview.Default(true);
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_293_colorWheel)
HXLINE( 294)		if (hx::IsNull( w )) {
HXLINE( 294)			w = ui->_w;
            		}
HXLINE( 295)		::zui::Ext_obj::rgbToHsv(( (Float)((( (float)(hx::UShr((handle->color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ))) ),( (Float)((( (float)(hx::UShr((handle->color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ))) ),( (Float)((( (float)((handle->color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ))) ),::zui::Ext_obj::ar);
HXLINE( 296)		Float chue = ::zui::Ext_obj::ar->__get(0);
HXLINE( 297)		Float csat = ::zui::Ext_obj::ar->__get(1);
HXLINE( 298)		Float cval = ::zui::Ext_obj::ar->__get(2);
HXLINE( 299)		float calpha = (( (float)(hx::UShr(handle->color,24)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXLINE( 301)		Float px = ui->_x;
HXLINE( 302)		Float py = ui->_y;
HXLINE( 303)		bool scroll;
HXDLIN( 303)		if (hx::IsNotNull( ui->currentWindow )) {
HXLINE( 303)			scroll = ui->currentWindow->scrollEnabled;
            		}
            		else {
HXLINE( 303)			scroll = false;
            		}
HXLINE( 304)		if (!(scroll)) {
HXLINE( 304)			w = (w - ::Std_obj::_hx_int((( (Float)(ui->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
HXDLIN( 304)			px = (px + (( (Float)(::Std_obj::_hx_int((( (Float)(ui->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ) / ( (Float)(2) )));
            		}
HXLINE( 305)		 ::kha::Image ui1 = ( ( ::kha::Image)(ui->ops->__Field(HX_("color_wheel",7f,99,35,4b),hx::paccDynamic)) );
HXDLIN( 305)		ui->image(ui1,::kha::_Color::Color_Impl__obj::fromFloats(( (float)(cval) ),( (float)(cval) ),( (float)(cval) ),null()),null(),null(),null(),null(),null());
HXLINE( 307)		Float ph = (ui->_y - py);
HXLINE( 308)		Float ox = (px + (( (Float)(w) ) / ( (Float)(2) )));
HXLINE( 309)		Float oy = (py + (ph / ( (Float)(2) )));
HXLINE( 310)		Float cw = (( (Float)(w) ) * ((Float)0.7));
HXLINE( 311)		Float cwh = (cw / ( (Float)(2) ));
HXLINE( 312)		Float cx = ox;
HXLINE( 313)		Float cy = (oy + (csat * cwh));
HXLINE( 315)		Float theta = (chue * (::Math_obj::PI * ((Float)2.0)));
HXLINE( 316)		Float cx2 = (((::Math_obj::cos(theta) * (cx - ox)) - (::Math_obj::sin(theta) * (cy - oy))) + ox);
HXLINE( 317)		Float cy2 = (((::Math_obj::sin(theta) * (cx - ox)) + (::Math_obj::cos(theta) * (cy - oy))) + oy);
HXLINE( 318)		cx = cx2;
HXLINE( 319)		cy = cy2;
HXLINE( 321)		ui->g->set_color(-16777216);
HXLINE( 322)		ui->g->fillRect((cx - (( (Float)(3) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))),(cy - (( (Float)(3) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))),(( (Float)(6) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),(( (Float)(6) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
HXLINE( 323)		ui->g->set_color(-1);
HXLINE( 324)		ui->g->fillRect((cx - (( (Float)(2) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))),(cy - (( (Float)(2) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))),(( (Float)(4) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),(( (Float)(4) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
HXLINE( 326)		if (rowAlign) {
HXLINE( 326)			if (alpha) {
HXLINE( 326)				ui->row(::Array_obj< Float >::fromData( _hx_array_data_2cab4d61_28,3));
            			}
            			else {
HXLINE( 326)				ui->row(::Array_obj< Float >::fromData( _hx_array_data_2cab4d61_29,2));
            			}
            		}
HXLINE( 327)		 ::zui::Handle valHandle = handle->nest(0,null());
HXLINE( 328)		valHandle->value = (( (Float)(::Math_obj::round((cval * ( (Float)(100) )))) ) / ( (Float)(100) ));
HXLINE( 329)		cval = ui->slider(valHandle,HX_("Value",51,ef,e5,c4),((Float)0.0),((Float)1.0),true,null(),null(),null(),null());
HXLINE( 330)		if (valHandle->changed) {
HXLINE( 330)			handle->changed = (ui->changed = true);
            		}
            		else {
HXLINE( 331)			handle->changed = false;
            		}
HXLINE( 332)		if (alpha) {
HXLINE( 333)			 ::zui::Handle alphaHandle = handle->nest(1, ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("value",71,7f,b8,31),(( (Float)(::Math_obj::round(( (Float)((calpha * ( (float)(100) ))) ))) ) / ( (Float)(100) )))));
HXLINE( 334)			calpha = ( (float)(ui->slider(alphaHandle,HX_("Alpha",3e,17,c4,b4),((Float)0.0),((Float)1.0),true,null(),null(),null(),null())) );
HXLINE( 335)			if (alphaHandle->changed) {
HXLINE( 335)				handle->changed = (ui->changed = true);
            			}
            		}
HXLINE( 338)		Float gx = (ox + ui->_windowX);
HXLINE( 339)		Float gy = (oy + ui->_windowY);
HXLINE( 340)		bool _hx_tmp;
HXDLIN( 340)		if (ui->inputStarted) {
HXLINE( 340)			_hx_tmp = ui->getInputInRect((gx - cwh),(gy - cwh),cw,cw,null());
            		}
            		else {
HXLINE( 340)			_hx_tmp = false;
            		}
HXDLIN( 340)		if (_hx_tmp) {
HXLINE( 340)			::zui::Ext_obj::wheelSelectedHande = handle;
            		}
HXLINE( 341)		if (ui->inputReleased) {
HXLINE( 341)			::zui::Ext_obj::wheelSelectedHande = null();
            		}
HXLINE( 342)		bool _hx_tmp1;
HXDLIN( 342)		if (ui->inputDown) {
HXLINE( 342)			_hx_tmp1 = hx::IsEq( ::zui::Ext_obj::wheelSelectedHande,handle );
            		}
            		else {
HXLINE( 342)			_hx_tmp1 = false;
            		}
HXDLIN( 342)		if (_hx_tmp1) {
HXLINE( 343)			Float vx = (gx - ui->inputX);
HXDLIN( 343)			Float vy = (gy - ui->inputY);
HXDLIN( 343)			csat = (::Math_obj::min(::Math_obj::sqrt(((vx * vx) + (vy * vy))),cwh) / cwh);
HXLINE( 344)			Float angle = ::Math_obj::atan2((ui->inputX - gx),(ui->inputY - gy));
HXLINE( 345)			if ((angle < 0)) {
HXLINE( 345)				angle = (::Math_obj::PI + (::Math_obj::PI - ::Math_obj::abs(angle)));
            			}
HXLINE( 346)			angle = ((::Math_obj::PI * ( (Float)(2) )) - angle);
HXLINE( 347)			chue = (angle / (::Math_obj::PI * ( (Float)(2) )));
HXLINE( 348)			handle->changed = (ui->changed = true);
            		}
HXLINE( 351)		::zui::Ext_obj::hsvToRgb(chue,csat,cval,::zui::Ext_obj::ar);
HXLINE( 352)		handle->color = ::kha::_Color::Color_Impl__obj::fromFloats(( (float)(::zui::Ext_obj::ar->__get(0)) ),( (float)(::zui::Ext_obj::ar->__get(1)) ),( (float)(::zui::Ext_obj::ar->__get(2)) ),calpha);
HXLINE( 353)		if (colorPreview) {
HXLINE( 353)			ui->text(HX_("",00,00,00,00),2,handle->color);
            		}
HXLINE( 354)		return handle->color;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Ext_obj,colorWheel,return )

::String Ext_obj::textArea( ::zui::Zui ui, ::zui::Handle handle,hx::Null< int >  __o_align){
            		int align = __o_align.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_357_textArea)
HXLINE( 358)		::Array< ::String > lines = handle->text.split(HX_("\n",0a,00,00,00));
HXLINE( 359)		bool selected = hx::IsEq( ui->textSelectedHandle,handle );
HXLINE( 360)		int cursorStartX = ui->cursorX;
HXLINE( 361)		bool keyPressed;
HXDLIN( 361)		if (selected) {
HXLINE( 361)			keyPressed = ui->isKeyPressed;
            		}
            		else {
HXLINE( 361)			keyPressed = false;
            		}
HXLINE( 362)		ui->highlightOnSelect = false;
HXLINE( 363)		ui->tabSwitchEnabled = false;
HXLINE( 364)		ui->g->set_color(( (int)(ui->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),hx::paccDynamic)) ));
HXLINE( 365)		{
HXLINE( 365)			 ::kha::graphics2::Graphics g = ui->g;
HXDLIN( 365)			Float x = (ui->_x + ui->buttonOffsetY);
HXDLIN( 365)			Float y = (ui->_y + ui->buttonOffsetY);
HXDLIN( 365)			Float w = (( (Float)(ui->_w) ) - (ui->buttonOffsetY * ( (Float)(2) )));
HXDLIN( 365)			Float h = ((( (Float)(lines->length) ) * (( (Float)(ui->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))) - (ui->buttonOffsetY * ( (Float)(2) )));
HXDLIN( 365)			Float strength = ((Float)0.0);
HXDLIN( 365)			if ((strength == ((Float)0.0))) {
HXLINE( 365)				strength = ( (Float)(1) );
            			}
HXDLIN( 365)			if (!(ui->enabled)) {
HXLINE( 365)				ui->fadeColor();
            			}
HXDLIN( 365)			g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            		}
HXLINE( 367)		{
HXLINE( 367)			int _g = 0;
HXDLIN( 367)			int _g1 = lines->length;
HXDLIN( 367)			while((_g < _g1)){
HXLINE( 367)				_g = (_g + 1);
HXDLIN( 367)				int i = (_g - 1);
HXLINE( 368)				bool _hx_tmp;
HXDLIN( 368)				bool _hx_tmp1;
HXDLIN( 368)				if (!(selected)) {
HXLINE( 368)					_hx_tmp1 = ui->getHover(null());
            				}
            				else {
HXLINE( 368)					_hx_tmp1 = false;
            				}
HXDLIN( 368)				if (!(_hx_tmp1)) {
HXLINE( 368)					if (selected) {
HXLINE( 368)						_hx_tmp = (i == handle->position);
            					}
            					else {
HXLINE( 368)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 368)					_hx_tmp = true;
            				}
HXDLIN( 368)				if (_hx_tmp) {
HXLINE( 369)					handle->position = i;
HXLINE( 370)					handle->_hx_set_text(HX_CTX, lines->__get(i));
HXLINE( 371)					ui->textInput(handle,HX_("",00,00,00,00),align);
HXLINE( 372)					bool _hx_tmp2;
HXDLIN( 372)					if (keyPressed) {
HXLINE( 372)						_hx_tmp2 = hx::IsNotEq( ui->key,13 );
            					}
            					else {
HXLINE( 372)						_hx_tmp2 = false;
            					}
HXDLIN( 372)					if (_hx_tmp2) {
HXLINE( 373)						lines->setCtx( HX_CTX, i,ui->textSelected);
            					}
            				}
            				else {
HXLINE( 377)					ui->text(lines->__get(i),align,null());
            				}
HXLINE( 379)				 ::zui::Zui ui1 = ui;
HXDLIN( 379)				ui1->_y = (ui1->_y - (( (Float)(ui->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            			}
            		}
HXLINE( 381)		 ::zui::Zui ui2 = ui;
HXDLIN( 381)		ui2->_y = (ui2->_y + (( (Float)(ui->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),hx::paccDynamic)) ) * ( (Float)(ui->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
HXLINE( 383)		if (keyPressed) {
HXLINE( 385)			bool _hx_tmp3;
HXDLIN( 385)			if (hx::IsEq( ui->key,40 )) {
HXLINE( 385)				_hx_tmp3 = (handle->position < (lines->length - 1));
            			}
            			else {
HXLINE( 385)				_hx_tmp3 = false;
            			}
HXDLIN( 385)			if (_hx_tmp3) {
HXLINE( 385)				handle->position++;
            			}
HXLINE( 386)			bool _hx_tmp4;
HXDLIN( 386)			if (hx::IsEq( ui->key,38 )) {
HXLINE( 386)				_hx_tmp4 = (handle->position > 0);
            			}
            			else {
HXLINE( 386)				_hx_tmp4 = false;
            			}
HXDLIN( 386)			if (_hx_tmp4) {
HXLINE( 386)				handle->position--;
            			}
HXLINE( 388)			if (hx::IsEq( ui->key,13 )) {
HXLINE( 389)				handle->position++;
HXLINE( 390)				int handle1 = handle->position;
HXDLIN( 390)				lines->insert(handle1,lines->__get((handle->position - 1)).substr(ui->cursorX,null()));
HXLINE( 391)				lines->setCtx( HX_CTX, (handle->position - 1),lines->__get((handle->position - 1)).substr(0,ui->cursorX));
HXLINE( 392)				ui->startTextEdit(handle);
HXLINE( 393)				ui->cursorX = (ui->highlightAnchor = 0);
            			}
HXLINE( 396)			bool _hx_tmp5;
HXDLIN( 396)			bool _hx_tmp6;
HXDLIN( 396)			if (hx::IsEq( ui->key,8 )) {
HXLINE( 396)				_hx_tmp6 = (cursorStartX == 0);
            			}
            			else {
HXLINE( 396)				_hx_tmp6 = false;
            			}
HXDLIN( 396)			if (_hx_tmp6) {
HXLINE( 396)				_hx_tmp5 = (handle->position > 0);
            			}
            			else {
HXLINE( 396)				_hx_tmp5 = false;
            			}
HXDLIN( 396)			if (_hx_tmp5) {
HXLINE( 397)				handle->position--;
HXLINE( 398)				ui->cursorX = (ui->highlightAnchor = lines->__get(handle->position).length);
HXLINE( 399)				::Array< ::String > lines1 = lines;
HXDLIN( 399)				int handle2 = handle->position;
HXDLIN( 399)				lines1->setCtx( HX_CTX, handle2,(lines1->__get(handle2) + lines->__get((handle->position + 1))));
HXLINE( 400)				lines->removeRange((handle->position + 1),1);
            			}
HXLINE( 402)			ui->_hx_set_textSelected(HX_CTX, lines->__get(handle->position));
            		}
HXLINE( 405)		ui->highlightOnSelect = true;
HXLINE( 406)		ui->tabSwitchEnabled = true;
HXLINE( 407)		handle->_hx_set_text(HX_CTX, lines->join(HX_("\n",0a,00,00,00)));
HXLINE( 408)		return handle->text;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ext_obj,textArea,return )

::String Ext_obj::keycodeToString(int keycode){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_414_keycodeToString)
HXLINE( 415)		switch((int)(keycode)){
            			case (int)-1: {
HXLINE( 416)				return HX_("None",d8,3e,e3,33);
            			}
            			break;
            			case (int)0: {
HXLINE( 417)				return HX_("Unknown",6a,4b,cc,ae);
            			}
            			break;
            			case (int)1: {
HXLINE( 418)				return HX_("Back",47,06,ea,2b);
            			}
            			break;
            			case (int)3: {
HXLINE( 419)				return HX_("Cancel",9a,61,c8,ec);
            			}
            			break;
            			case (int)6: {
HXLINE( 420)				return HX_("Help",e1,5e,e4,2f);
            			}
            			break;
            			case (int)8: {
HXLINE( 421)				return HX_("Backspace",1f,65,bd,6c);
            			}
            			break;
            			case (int)9: {
HXLINE( 422)				return HX_("Tab",35,12,40,00);
            			}
            			break;
            			case (int)12: {
HXLINE( 423)				return HX_("Clear",6d,e1,88,db);
            			}
            			break;
            			case (int)13: {
HXLINE( 424)				return HX_("Return",d0,18,c2,3d);
            			}
            			break;
            			case (int)16: {
HXLINE( 425)				return HX_("Shift",62,5c,50,0f);
            			}
            			break;
            			case (int)17: {
HXLINE( 426)				return HX_("Ctrl",cb,b4,a1,2c);
            			}
            			break;
            			case (int)18: {
HXLINE( 427)				return HX_("Alt",09,b1,31,00);
            			}
            			break;
            			case (int)19: {
HXLINE( 428)				return HX_("Pause",d6,46,85,50);
            			}
            			break;
            			case (int)20: {
HXLINE( 429)				return HX_("CapsLock",cc,c4,73,eb);
            			}
            			break;
            			case (int)21: {
HXLINE( 430)				return HX_("Kana",69,fb,dc,31);
            			}
            			break;
            			case (int)22: {
HXLINE( 432)				return HX_("Eisu",26,ca,eb,2d);
            			}
            			break;
            			case (int)23: {
HXLINE( 433)				return HX_("Junja",9a,b8,50,e9);
            			}
            			break;
            			case (int)24: {
HXLINE( 434)				return HX_("Final",56,cf,c7,93);
            			}
            			break;
            			case (int)25: {
HXLINE( 435)				return HX_("Hanja",2c,4b,4b,b5);
            			}
            			break;
            			case (int)27: {
HXLINE( 437)				return HX_("Esc",15,c0,34,00);
            			}
            			break;
            			case (int)28: {
HXLINE( 438)				return HX_("Convert",d3,25,1b,e8);
            			}
            			break;
            			case (int)29: {
HXLINE( 439)				return HX_("NonConvert",86,3c,25,89);
            			}
            			break;
            			case (int)30: {
HXLINE( 440)				return HX_("Accept",28,07,9b,3f);
            			}
            			break;
            			case (int)31: {
HXLINE( 441)				return HX_("ModeChange",53,09,c6,f8);
            			}
            			break;
            			case (int)32: {
HXLINE( 442)				return HX_("Space",a6,fc,93,14);
            			}
            			break;
            			case (int)33: {
HXLINE( 443)				return HX_("PageUp",aa,0a,cd,1a);
            			}
            			break;
            			case (int)34: {
HXLINE( 444)				return HX_("PageDown",71,8e,e7,24);
            			}
            			break;
            			case (int)35: {
HXLINE( 445)				return HX_("End",bb,bb,34,00);
            			}
            			break;
            			case (int)36: {
HXLINE( 446)				return HX_("Home",3f,f6,eb,2f);
            			}
            			break;
            			case (int)37: {
HXLINE( 447)				return HX_("Left",27,34,89,32);
            			}
            			break;
            			case (int)38: {
HXLINE( 448)				return HX_("Up",7b,4a,00,00);
            			}
            			break;
            			case (int)39: {
HXLINE( 449)				return HX_("Right",bc,7b,91,7c);
            			}
            			break;
            			case (int)40: {
HXLINE( 450)				return HX_("Down",82,24,47,2d);
            			}
            			break;
            			case (int)41: {
HXLINE( 451)				return HX_("Select",1c,8f,c7,9e);
            			}
            			break;
            			case (int)42: {
HXLINE( 452)				return HX_("Print",0d,c8,b8,5b);
            			}
            			break;
            			case (int)43: {
HXLINE( 453)				return HX_("Execute",15,32,5e,99);
            			}
            			break;
            			case (int)44: {
HXLINE( 454)				return HX_("PrintScreen",59,7f,07,53);
            			}
            			break;
            			case (int)45: {
HXLINE( 455)				return HX_("Insert",59,b7,71,d2);
            			}
            			break;
            			case (int)46: {
HXLINE( 456)				return HX_("Delete",4b,34,6d,9f);
            			}
            			break;
            			case (int)58: {
HXLINE( 457)				return HX_("Colon",3f,e1,89,dd);
            			}
            			break;
            			case (int)59: {
HXLINE( 458)				return HX_("Semicolon",11,f6,a4,ef);
            			}
            			break;
            			case (int)60: {
HXLINE( 459)				return HX_("LessThan",7a,1b,e6,cc);
            			}
            			break;
            			case (int)61: {
HXLINE( 460)				return HX_("Equals",5f,62,87,f4);
            			}
            			break;
            			case (int)62: {
HXLINE( 461)				return HX_("GreaterThan",5b,59,7d,59);
            			}
            			break;
            			case (int)63: {
HXLINE( 462)				return HX_("QuestionMark",73,de,15,37);
            			}
            			break;
            			case (int)64: {
HXLINE( 463)				return HX_("At",13,39,00,00);
            			}
            			break;
            			case (int)91: {
HXLINE( 464)				return HX_("Win",fc,5f,42,00);
            			}
            			break;
            			case (int)93: {
HXLINE( 465)				return HX_("ContextMenu",0e,c3,8f,09);
            			}
            			break;
            			case (int)95: {
HXLINE( 466)				return HX_("Sleep",f7,2c,f2,11);
            			}
            			break;
            			case (int)96: {
HXLINE( 467)				return HX_("Numpad0",a3,78,4a,80);
            			}
            			break;
            			case (int)97: {
HXLINE( 468)				return HX_("Numpad1",a4,78,4a,80);
            			}
            			break;
            			case (int)98: {
HXLINE( 469)				return HX_("Numpad2",a5,78,4a,80);
            			}
            			break;
            			case (int)99: {
HXLINE( 470)				return HX_("Numpad3",a6,78,4a,80);
            			}
            			break;
            			case (int)100: {
HXLINE( 471)				return HX_("Numpad4",a7,78,4a,80);
            			}
            			break;
            			case (int)101: {
HXLINE( 472)				return HX_("Numpad5",a8,78,4a,80);
            			}
            			break;
            			case (int)102: {
HXLINE( 473)				return HX_("Numpad6",a9,78,4a,80);
            			}
            			break;
            			case (int)103: {
HXLINE( 474)				return HX_("Numpad7",aa,78,4a,80);
            			}
            			break;
            			case (int)104: {
HXLINE( 475)				return HX_("Numpad8",ab,78,4a,80);
            			}
            			break;
            			case (int)105: {
HXLINE( 476)				return HX_("Numpad9",ac,78,4a,80);
            			}
            			break;
            			case (int)106: {
HXLINE( 477)				return HX_("Multiply",44,9e,3e,74);
            			}
            			break;
            			case (int)107: {
HXLINE( 478)				return HX_("Add",01,aa,31,00);
            			}
            			break;
            			case (int)108: {
HXLINE( 479)				return HX_("Separator",45,40,52,d3);
            			}
            			break;
            			case (int)109: {
HXLINE( 480)				return HX_("Subtract",34,31,c3,d1);
            			}
            			break;
            			case (int)110: {
HXLINE( 481)				return HX_("Decimal",71,dc,24,b4);
            			}
            			break;
            			case (int)111: {
HXLINE( 482)				return HX_("Divide",99,a3,a6,f3);
            			}
            			break;
            			case (int)112: {
HXLINE( 483)				return HX_("F1",2b,3d,00,00);
            			}
            			break;
            			case (int)113: {
HXLINE( 484)				return HX_("F2",2c,3d,00,00);
            			}
            			break;
            			case (int)114: {
HXLINE( 485)				return HX_("F3",2d,3d,00,00);
            			}
            			break;
            			case (int)115: {
HXLINE( 486)				return HX_("F4",2e,3d,00,00);
            			}
            			break;
            			case (int)116: {
HXLINE( 487)				return HX_("F5",2f,3d,00,00);
            			}
            			break;
            			case (int)117: {
HXLINE( 488)				return HX_("F6",30,3d,00,00);
            			}
            			break;
            			case (int)118: {
HXLINE( 489)				return HX_("F7",31,3d,00,00);
            			}
            			break;
            			case (int)119: {
HXLINE( 490)				return HX_("F8",32,3d,00,00);
            			}
            			break;
            			case (int)120: {
HXLINE( 491)				return HX_("F9",33,3d,00,00);
            			}
            			break;
            			case (int)121: {
HXLINE( 492)				return HX_("F10",a5,48,35,00);
            			}
            			break;
            			case (int)122: {
HXLINE( 493)				return HX_("F11",a6,48,35,00);
            			}
            			break;
            			case (int)123: {
HXLINE( 494)				return HX_("F12",a7,48,35,00);
            			}
            			break;
            			case (int)124: {
HXLINE( 495)				return HX_("F13",a8,48,35,00);
            			}
            			break;
            			case (int)125: {
HXLINE( 496)				return HX_("F14",a9,48,35,00);
            			}
            			break;
            			case (int)126: {
HXLINE( 497)				return HX_("F15",aa,48,35,00);
            			}
            			break;
            			case (int)127: {
HXLINE( 498)				return HX_("F16",ab,48,35,00);
            			}
            			break;
            			case (int)128: {
HXLINE( 499)				return HX_("F17",ac,48,35,00);
            			}
            			break;
            			case (int)129: {
HXLINE( 500)				return HX_("F18",ad,48,35,00);
            			}
            			break;
            			case (int)130: {
HXLINE( 501)				return HX_("F19",ae,48,35,00);
            			}
            			break;
            			case (int)131: {
HXLINE( 502)				return HX_("F20",84,49,35,00);
            			}
            			break;
            			case (int)132: {
HXLINE( 503)				return HX_("F21",85,49,35,00);
            			}
            			break;
            			case (int)133: {
HXLINE( 504)				return HX_("F22",86,49,35,00);
            			}
            			break;
            			case (int)134: {
HXLINE( 505)				return HX_("F23",87,49,35,00);
            			}
            			break;
            			case (int)135: {
HXLINE( 506)				return HX_("F24",88,49,35,00);
            			}
            			break;
            			case (int)144: {
HXLINE( 507)				return HX_("NumLock",31,69,89,68);
            			}
            			break;
            			case (int)145: {
HXLINE( 508)				return HX_("ScrollLock",b8,2e,28,fc);
            			}
            			break;
            			case (int)146: {
HXLINE( 509)				return HX_("WinOemFjJisho",3c,60,4d,98);
            			}
            			break;
            			case (int)147: {
HXLINE( 510)				return HX_("WinOemFjMasshou",bb,d2,b8,9f);
            			}
            			break;
            			case (int)148: {
HXLINE( 511)				return HX_("WinOemFjTouroku",e2,5d,f7,81);
            			}
            			break;
            			case (int)149: {
HXLINE( 512)				return HX_("WinOemFjLoya",ca,58,57,69);
            			}
            			break;
            			case (int)150: {
HXLINE( 513)				return HX_("WinOemFjRoya",84,a0,4e,6d);
            			}
            			break;
            			case (int)160: {
HXLINE( 514)				return HX_("Circumflex",c8,b0,f1,33);
            			}
            			break;
            			case (int)161: {
HXLINE( 515)				return HX_("Exclamation",cd,3f,e2,10);
            			}
            			break;
            			case (int)162: {
HXLINE( 516)				return HX_("DoubleQuote",4b,42,3c,c7);
            			}
            			break;
            			case (int)163: {
HXLINE( 517)				return HX_("Hash",ee,5b,e1,2f);
            			}
            			break;
            			case (int)164: {
HXLINE( 518)				return HX_("Dollar",9c,40,74,61);
            			}
            			break;
            			case (int)165: {
HXLINE( 519)				return HX_("Percent",a5,d2,2b,46);
            			}
            			break;
            			case (int)166: {
HXLINE( 520)				return HX_("Ampersand",15,4c,31,6d);
            			}
            			break;
            			case (int)167: {
HXLINE( 521)				return HX_("Underscore",5a,ef,a9,49);
            			}
            			break;
            			case (int)168: {
HXLINE( 522)				return HX_("OpenParen",c0,d3,4d,d2);
            			}
            			break;
            			case (int)169: {
HXLINE( 523)				return HX_("CloseParen",52,e5,e7,7e);
            			}
            			break;
            			case (int)170: {
HXLINE( 524)				return HX_("Asterisk",92,28,7c,08);
            			}
            			break;
            			case (int)171: {
HXLINE( 525)				return HX_("Plus",7a,6b,33,35);
            			}
            			break;
            			case (int)172: {
HXLINE( 526)				return HX_("Pipe",4e,20,31,35);
            			}
            			break;
            			case (int)173: {
HXLINE( 527)				return HX_("HyphenMinus",fe,9a,ac,a6);
            			}
            			break;
            			case (int)174: {
HXLINE( 528)				return HX_("OpenCurlyBracket",a5,68,7c,98);
            			}
            			break;
            			case (int)175: {
HXLINE( 529)				return HX_("CloseCurlyBracket",53,8d,7b,0b);
            			}
            			break;
            			case (int)176: {
HXLINE( 530)				return HX_("Tilde",78,6c,62,a3);
            			}
            			break;
            			case (int)181: {
HXLINE( 531)				return HX_("VolumeMute",f3,bd,e5,21);
            			}
            			break;
            			case (int)182: {
HXLINE( 532)				return HX_("VolumeDown",7c,47,ee,1b);
            			}
            			break;
            			case (int)183: {
HXLINE( 533)				return HX_("VolumeUp",f5,da,86,13);
            			}
            			break;
            			case (int)188: {
HXLINE( 534)				return HX_("Comma",b5,a1,8a,dd);
            			}
            			break;
            			case (int)190: {
HXLINE( 535)				return HX_("Period",21,d5,af,6f);
            			}
            			break;
            			case (int)191: {
HXLINE( 536)				return HX_("Slash",1d,30,ef,11);
            			}
            			break;
            			case (int)192: {
HXLINE( 537)				return HX_("BackQuote",75,6b,76,dc);
            			}
            			break;
            			case (int)219: {
HXLINE( 538)				return HX_("OpenBracket",5e,af,fa,1a);
            			}
            			break;
            			case (int)220: {
HXLINE( 539)				return HX_("BackSlash",76,08,46,fd);
            			}
            			break;
            			case (int)221: {
HXLINE( 540)				return HX_("CloseBracket",70,c9,69,af);
            			}
            			break;
            			case (int)222: {
HXLINE( 541)				return HX_("Quote",1c,93,1f,f1);
            			}
            			break;
            			case (int)224: {
HXLINE( 542)				return HX_("Meta",e5,76,32,33);
            			}
            			break;
            			case (int)225: {
HXLINE( 543)				return HX_("AltGr",94,03,c7,b4);
            			}
            			break;
            			case (int)227: {
HXLINE( 544)				return HX_("WinIcoHelp",1a,30,52,fc);
            			}
            			break;
            			case (int)228: {
HXLINE( 545)				return HX_("WinIco00",f9,0a,b9,c3);
            			}
            			break;
            			case (int)230: {
HXLINE( 546)				return HX_("WinIcoClear",14,22,32,ef);
            			}
            			break;
            			case (int)233: {
HXLINE( 547)				return HX_("WinOemReset",d4,db,41,6b);
            			}
            			break;
            			case (int)234: {
HXLINE( 548)				return HX_("WinOemJump",89,1a,1b,9d);
            			}
            			break;
            			case (int)235: {
HXLINE( 549)				return HX_("WinOemPA1",05,cc,e7,09);
            			}
            			break;
            			case (int)236: {
HXLINE( 550)				return HX_("WinOemPA2",06,cc,e7,09);
            			}
            			break;
            			case (int)237: {
HXLINE( 551)				return HX_("WinOemPA3",07,cc,e7,09);
            			}
            			break;
            			case (int)238: {
HXLINE( 552)				return HX_("WinOemWSCTRL",02,99,29,f1);
            			}
            			break;
            			case (int)239: {
HXLINE( 553)				return HX_("WinOemCUSEL",2d,5a,93,bd);
            			}
            			break;
            			case (int)240: {
HXLINE( 554)				return HX_("WinOemATTN",a8,0e,0f,97);
            			}
            			break;
            			case (int)241: {
HXLINE( 555)				return HX_("WinOemFinish",ae,72,65,ec);
            			}
            			break;
            			case (int)242: {
HXLINE( 556)				return HX_("WinOemCopy",50,11,76,98);
            			}
            			break;
            			case (int)243: {
HXLINE( 557)				return HX_("WinOemAuto",0a,35,28,97);
            			}
            			break;
            			case (int)244: {
HXLINE( 558)				return HX_("WinOemENLW",af,54,af,99);
            			}
            			break;
            			case (int)245: {
HXLINE( 559)				return HX_("WinOemBackTab",b3,a7,00,bf);
            			}
            			break;
            			case (int)246: {
HXLINE( 560)				return HX_("ATTN",2d,e5,36,2b);
            			}
            			break;
            			case (int)247: {
HXLINE( 561)				return HX_("CRSEL",2b,94,4b,ca);
            			}
            			break;
            			case (int)248: {
HXLINE( 562)				return HX_("EXSEL",e7,04,10,f5);
            			}
            			break;
            			case (int)249: {
HXLINE( 563)				return HX_("EREOF",4f,26,0e,f1);
            			}
            			break;
            			case (int)250: {
HXLINE( 564)				return HX_("Play",14,5a,33,35);
            			}
            			break;
            			case (int)251: {
HXLINE( 565)				return HX_("Zoom",33,cf,d1,3b);
            			}
            			break;
            			case (int)253: {
HXLINE( 566)				return HX_("PA1",20,ed,3c,00);
            			}
            			break;
            			case (int)254: {
HXLINE( 567)				return HX_("WinOemClear",92,03,d5,cc);
            			}
            			break;
            		}
HXLINE( 569)		return ::String::fromCharCode(keycode);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ext_obj,keycodeToString,return )

Float Ext_obj::dist(Float x1,Float y1,Float x2,Float y2){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_572_dist)
HXLINE( 573)		Float vx = (x1 - x2);
HXLINE( 574)		Float vy = (y1 - y2);
HXLINE( 575)		return ::Math_obj::sqrt(((vx * vx) + (vy * vy)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Ext_obj,dist,return )

Float Ext_obj::fract(Float f){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_577_fract)
HXDLIN( 577)		return (f - ( (Float)(::Std_obj::_hx_int(f)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ext_obj,fract,return )

Float Ext_obj::mix(Float x,Float y,Float a){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_578_mix)
HXDLIN( 578)		return ((x * (((Float)1.0) - a)) + (y * a));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ext_obj,mix,return )

Float Ext_obj::clamp(Float x,Float minVal,Float maxVal){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_579_clamp)
HXDLIN( 579)		return ::Math_obj::min(::Math_obj::max(x,minVal),maxVal);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Ext_obj,clamp,return )

Float Ext_obj::step(Float edge,Float x){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_580_step)
HXDLIN( 580)		if ((x < edge)) {
HXDLIN( 580)			return ((Float)0.0);
            		}
            		else {
HXDLIN( 580)			return ((Float)1.0);
            		}
HXDLIN( 580)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ext_obj,step,return )

Float Ext_obj::kx;

Float Ext_obj::ky;

Float Ext_obj::kz;

Float Ext_obj::kw;

::Array< Float > Ext_obj::ar;

void Ext_obj::hsvToRgb(Float cR,Float cG,Float cB,::Array< Float > out){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_586_hsvToRgb)
HXLINE( 587)		Float f = (cR + ((Float)1.0));
HXDLIN( 587)		Float px = ::Math_obj::abs((((f - ( (Float)(::Std_obj::_hx_int(f)) )) * ((Float)6.0)) - ((Float)3.0)));
HXLINE( 588)		Float f1 = (cR + ((Float)0.66666666666666663));
HXDLIN( 588)		Float py = ::Math_obj::abs((((f1 - ( (Float)(::Std_obj::_hx_int(f1)) )) * ((Float)6.0)) - ((Float)3.0)));
HXLINE( 589)		Float f2 = (cR + ((Float)0.333333333333333315));
HXDLIN( 589)		Float pz = ::Math_obj::abs((((f2 - ( (Float)(::Std_obj::_hx_int(f2)) )) * ((Float)6.0)) - ((Float)3.0)));
HXLINE( 590)		out[0] = (cB * ((((Float)1.0) - cG) + (::Math_obj::min(::Math_obj::max((px - ((Float)1.0)),((Float)0.0)),((Float)1.0)) * cG)));
HXLINE( 591)		out[1] = (cB * ((((Float)1.0) - cG) + (::Math_obj::min(::Math_obj::max((py - ((Float)1.0)),((Float)0.0)),((Float)1.0)) * cG)));
HXLINE( 592)		out[2] = (cB * ((((Float)1.0) - cG) + (::Math_obj::min(::Math_obj::max((pz - ((Float)1.0)),((Float)0.0)),((Float)1.0)) * cG)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Ext_obj,hsvToRgb,(void))

Float Ext_obj::Kx;

Float Ext_obj::Ky;

Float Ext_obj::Kz;

Float Ext_obj::Kw;

Float Ext_obj::e;

void Ext_obj::rgbToHsv(Float cR,Float cG,Float cB,::Array< Float > out){
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_599_rgbToHsv)
HXLINE( 600)		Float a;
HXDLIN( 600)		if ((cG < cB)) {
HXLINE( 600)			a = ((Float)0.0);
            		}
            		else {
HXLINE( 600)			a = ((Float)1.0);
            		}
HXDLIN( 600)		Float px = ((cB * (((Float)1.0) - a)) + (cG * a));
HXLINE( 601)		Float a1;
HXDLIN( 601)		if ((cG < cB)) {
HXLINE( 601)			a1 = ((Float)0.0);
            		}
            		else {
HXLINE( 601)			a1 = ((Float)1.0);
            		}
HXDLIN( 601)		Float py = ((cG * (((Float)1.0) - a1)) + (cB * a1));
HXLINE( 602)		Float a2;
HXDLIN( 602)		if ((cG < cB)) {
HXLINE( 602)			a2 = ((Float)0.0);
            		}
            		else {
HXLINE( 602)			a2 = ((Float)1.0);
            		}
HXDLIN( 602)		Float pz = ((((Float)-1.0) * (((Float)1.0) - a2)) + (((Float)0.0) * a2));
HXLINE( 603)		Float a3;
HXDLIN( 603)		if ((cG < cB)) {
HXLINE( 603)			a3 = ((Float)0.0);
            		}
            		else {
HXLINE( 603)			a3 = ((Float)1.0);
            		}
HXDLIN( 603)		Float pw = ((((Float)0.66666666666666663) * (((Float)1.0) - a3)) + (((Float)-0.333333333333333315) * a3));
HXLINE( 604)		Float a4;
HXDLIN( 604)		if ((cR < px)) {
HXLINE( 604)			a4 = ((Float)0.0);
            		}
            		else {
HXLINE( 604)			a4 = ((Float)1.0);
            		}
HXDLIN( 604)		Float qx = ((px * (((Float)1.0) - a4)) + (cR * a4));
HXLINE( 605)		Float a5;
HXDLIN( 605)		if ((cR < px)) {
HXLINE( 605)			a5 = ((Float)0.0);
            		}
            		else {
HXLINE( 605)			a5 = ((Float)1.0);
            		}
HXDLIN( 605)		Float qy = ((py * (((Float)1.0) - a5)) + (py * a5));
HXLINE( 606)		Float a6;
HXDLIN( 606)		if ((cR < px)) {
HXLINE( 606)			a6 = ((Float)0.0);
            		}
            		else {
HXLINE( 606)			a6 = ((Float)1.0);
            		}
HXDLIN( 606)		Float qz = ((pw * (((Float)1.0) - a6)) + (pz * a6));
HXLINE( 607)		Float a7;
HXDLIN( 607)		if ((cR < px)) {
HXLINE( 607)			a7 = ((Float)0.0);
            		}
            		else {
HXLINE( 607)			a7 = ((Float)1.0);
            		}
HXDLIN( 607)		Float qw = ((cR * (((Float)1.0) - a7)) + (px * a7));
HXLINE( 608)		Float d = (qx - ::Math_obj::min(qw,qy));
HXLINE( 609)		out[0] = ::Math_obj::abs((qz + ((qw - qy) / ((((Float)6.0) * d) + ((Float)1.0e-10)))));
HXLINE( 610)		out[1] = (d / (qx + ((Float)1.0e-10)));
HXLINE( 611)		out[2] = qx;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Ext_obj,rgbToHsv,(void))


Ext_obj::Ext_obj()
{
}

bool Ext_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ar") ) { outValue = ( ar ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"mix") ) { outValue = mix_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dist") ) { outValue = dist_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"step") ) { outValue = step_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fract") ) { outValue = fract_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clamp") ) { outValue = clamp_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyInput") ) { outValue = keyInput_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initPath") ) { outValue = initPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dataPath") ) { outValue = ( dataPath ); return true; }
		if (HX_FIELD_EQ(inName,"lastPath") ) { outValue = ( lastPath ); return true; }
		if (HX_FIELD_EQ(inName,"textArea") ) { outValue = textArea_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hsvToRgb") ) { outValue = hsvToRgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rgbToHsv") ) { outValue = rgbToHsv_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"panelList") ) { outValue = panelList_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"floatInput") ) { outValue = floatInput_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"colorField") ) { outValue = colorField_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"colorWheel") ) { outValue = colorWheel_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"listenToKey") ) { outValue = listenToKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"colorPicker") ) { outValue = colorPicker_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fileBrowser") ) { outValue = fileBrowser_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"inlineRadio") ) { outValue = inlineRadio_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"drawInlineRadio") ) { outValue = drawInlineRadio_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"keycodeToString") ) { outValue = keycodeToString_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"wheelSelectedHande") ) { outValue = ( wheelSelectedHande ); return true; }
	}
	return false;
}

bool Ext_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ar") ) { ar=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dataPath") ) { dataPath=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"lastPath") ) { lastPath=ioValue.Cast< ::String >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"wheelSelectedHande") ) { wheelSelectedHande=ioValue.Cast<  ::zui::Handle >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Ext_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Ext_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Ext_obj::dataPath,HX_("dataPath",ef,c4,c5,89)},
	{hx::fsString,(void *) &Ext_obj::lastPath,HX_("lastPath",1b,ff,9a,dd)},
	{hx::fsObject /*  ::zui::Handle */ ,(void *) &Ext_obj::wheelSelectedHande,HX_("wheelSelectedHande",20,c8,36,9e)},
	{hx::fsFloat,(void *) &Ext_obj::kx,HX_("kx",ad,5d,00,00)},
	{hx::fsFloat,(void *) &Ext_obj::ky,HX_("ky",ae,5d,00,00)},
	{hx::fsFloat,(void *) &Ext_obj::kz,HX_("kz",af,5d,00,00)},
	{hx::fsFloat,(void *) &Ext_obj::kw,HX_("kw",ac,5d,00,00)},
	{hx::fsObject /* ::Array< Float > */ ,(void *) &Ext_obj::ar,HX_("ar",f1,54,00,00)},
	{hx::fsFloat,(void *) &Ext_obj::Kx,HX_("Kx",cd,41,00,00)},
	{hx::fsFloat,(void *) &Ext_obj::Ky,HX_("Ky",ce,41,00,00)},
	{hx::fsFloat,(void *) &Ext_obj::Kz,HX_("Kz",cf,41,00,00)},
	{hx::fsFloat,(void *) &Ext_obj::Kw,HX_("Kw",cc,41,00,00)},
	{hx::fsFloat,(void *) &Ext_obj::e,HX_("e",65,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Ext_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ext_obj::dataPath,"dataPath");
	HX_MARK_MEMBER_NAME(Ext_obj::lastPath,"lastPath");
	HX_MARK_MEMBER_NAME(Ext_obj::wheelSelectedHande,"wheelSelectedHande");
	HX_MARK_MEMBER_NAME(Ext_obj::kx,"kx");
	HX_MARK_MEMBER_NAME(Ext_obj::ky,"ky");
	HX_MARK_MEMBER_NAME(Ext_obj::kz,"kz");
	HX_MARK_MEMBER_NAME(Ext_obj::kw,"kw");
	HX_MARK_MEMBER_NAME(Ext_obj::ar,"ar");
	HX_MARK_MEMBER_NAME(Ext_obj::Kx,"Kx");
	HX_MARK_MEMBER_NAME(Ext_obj::Ky,"Ky");
	HX_MARK_MEMBER_NAME(Ext_obj::Kz,"Kz");
	HX_MARK_MEMBER_NAME(Ext_obj::Kw,"Kw");
	HX_MARK_MEMBER_NAME(Ext_obj::e,"e");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ext_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ext_obj::dataPath,"dataPath");
	HX_VISIT_MEMBER_NAME(Ext_obj::lastPath,"lastPath");
	HX_VISIT_MEMBER_NAME(Ext_obj::wheelSelectedHande,"wheelSelectedHande");
	HX_VISIT_MEMBER_NAME(Ext_obj::kx,"kx");
	HX_VISIT_MEMBER_NAME(Ext_obj::ky,"ky");
	HX_VISIT_MEMBER_NAME(Ext_obj::kz,"kz");
	HX_VISIT_MEMBER_NAME(Ext_obj::kw,"kw");
	HX_VISIT_MEMBER_NAME(Ext_obj::ar,"ar");
	HX_VISIT_MEMBER_NAME(Ext_obj::Kx,"Kx");
	HX_VISIT_MEMBER_NAME(Ext_obj::Ky,"Ky");
	HX_VISIT_MEMBER_NAME(Ext_obj::Kz,"Kz");
	HX_VISIT_MEMBER_NAME(Ext_obj::Kw,"Kw");
	HX_VISIT_MEMBER_NAME(Ext_obj::e,"e");
};

#endif

hx::Class Ext_obj::__mClass;

static ::String Ext_obj_sStaticFields[] = {
	HX_("floatInput",ce,98,b6,dc),
	HX_("keyInput",eb,69,87,02),
	HX_("listenToKey",1d,81,28,f4),
	HX_("list",5e,1c,b3,47),
	HX_("panelList",82,95,d2,97),
	HX_("colorField",57,ac,ff,24),
	HX_("colorPicker",51,8d,f5,38),
	HX_("initPath",d5,14,09,4f),
	HX_("dataPath",ef,c4,c5,89),
	HX_("lastPath",1b,ff,9a,dd),
	HX_("fileBrowser",8c,5c,9b,4b),
	HX_("inlineRadio",e2,93,4c,a6),
	HX_("drawInlineRadio",3e,36,e4,6b),
	HX_("wheelSelectedHande",20,c8,36,9e),
	HX_("colorWheel",38,4c,26,ee),
	HX_("textArea",da,de,6f,43),
	HX_("keycodeToString",18,af,76,c1),
	HX_("dist",66,67,69,42),
	HX_("fract",86,6f,83,06),
	HX_("mix",9c,11,53,00),
	HX_("clamp",fb,72,58,48),
	HX_("step",4c,e7,5b,4c),
	HX_("kx",ad,5d,00,00),
	HX_("ky",ae,5d,00,00),
	HX_("kz",af,5d,00,00),
	HX_("kw",ac,5d,00,00),
	HX_("ar",f1,54,00,00),
	HX_("hsvToRgb",47,45,05,c0),
	HX_("Kx",cd,41,00,00),
	HX_("Ky",ce,41,00,00),
	HX_("Kz",cf,41,00,00),
	HX_("Kw",cc,41,00,00),
	HX_("e",65,00,00,00),
	HX_("rgbToHsv",03,66,d1,09),
	::String(null())
};

void Ext_obj::__register()
{
	Ext_obj _hx_dummy;
	Ext_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zui.Ext",61,4d,ab,2c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Ext_obj::__GetStatic;
	__mClass->mSetStaticField = &Ext_obj::__SetStatic;
	__mClass->mMarkFunc = Ext_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Ext_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Ext_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ext_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ext_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ext_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Ext_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_182_boot)
HXDLIN( 182)		dataPath = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_183_boot)
HXDLIN( 183)		lastPath = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_292_boot)
HXDLIN( 292)		wheelSelectedHande = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_581_boot)
HXDLIN( 581)		kx = ((Float)1.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_582_boot)
HXDLIN( 582)		ky = ((Float)0.66666666666666663);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_583_boot)
HXDLIN( 583)		kz = ((Float)0.333333333333333315);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_584_boot)
HXDLIN( 584)		kw = ((Float)3.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_585_boot)
HXDLIN( 585)		ar = ::Array_obj< Float >::fromData( _hx_array_data_2cab4d61_48,3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_594_boot)
HXDLIN( 594)		Kx = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_595_boot)
HXDLIN( 595)		Ky = ((Float)-0.333333333333333315);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_596_boot)
HXDLIN( 596)		Kz = ((Float)0.66666666666666663);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_597_boot)
HXDLIN( 597)		Kw = ((Float)-1.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e1bfd625ad8d8ccd_598_boot)
HXDLIN( 598)		e = ((Float)1.0e-10);
            	}
}

} // end namespace zui
