// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Framebuffer
#include <hxinc/kha/Framebuffer.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_System
#include <hxinc/kha/System.h>
#endif
#ifndef INCLUDED_kha__Color_Color_Impl_
#include <hxinc/kha/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <hxinc/kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <hxinc/kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_input_Keyboard
#include <hxinc/kha/input/Keyboard.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <hxinc/kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_netsync_Controller
#include <hxinc/kha/netsync/Controller.h>
#endif
#ifndef INCLUDED_zui_Handle
#include <hxinc/zui/Handle.h>
#endif
#ifndef INCLUDED_zui_Themes
#include <hxinc/zui/Themes.h>
#endif
#ifndef INCLUDED_zui_Zui
#include <hxinc/zui/Zui.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_21_new,"zui.Zui","new",0x1237fa00,"zui.Zui.new","Sources/zui/Zui.hx",21,0xe279dd08)
HX_DEFINE_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_172_new,"zui.Zui","new",0x1237fa00,"zui.Zui.new","Sources/zui/Zui.hx",172,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_181_setScale,"zui.Zui","setScale",0xb58429e8,"zui.Zui.setScale","Sources/zui/Zui.hx",181,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_201_bakeElements,"zui.Zui","bakeElements",0xa2bcb6d0,"zui.Zui.bakeElements","Sources/zui/Zui.hx",201,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_216_remove,"zui.Zui","remove",0xbca636a4,"zui.Zui.remove","Sources/zui/Zui.hx",216,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_219_registerInput,"zui.Zui","registerInput",0xb49af847,"zui.Zui.registerInput","Sources/zui/Zui.hx",219,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_225_unregisterInput,"zui.Zui","unregisterInput",0x354c764e,"zui.Zui.unregisterInput","Sources/zui/Zui.hx",225,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_234_begin,"zui.Zui","begin",0x22cfbbc9,"zui.Zui.begin","Sources/zui/Zui.hx",234,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_244_end,"zui.Zui","end",0x12312d7b,"zui.Zui.end","Sources/zui/Zui.hx",244,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_252_beginRegion,"zui.Zui","beginRegion",0xb1496d9d,"zui.Zui.beginRegion","Sources/zui/Zui.hx",252,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_268_endRegion,"zui.Zui","endRegion",0xc2c230cf,"zui.Zui.endRegion","Sources/zui/Zui.hx",268,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_274_endInput,"zui.Zui","endInput",0xea9c488f,"zui.Zui.endInput","Sources/zui/Zui.hx",274,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_293_inputChanged,"zui.Zui","inputChanged",0x1252ac6a,"zui.Zui.inputChanged","Sources/zui/Zui.hx",293,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_296_windowDirty,"zui.Zui","windowDirty",0xe139afa2,"zui.Zui.windowDirty","Sources/zui/Zui.hx",296,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_304_window,"zui.Zui","window",0x0aaa2e50,"zui.Zui.window","Sources/zui/Zui.hx",304,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_382_endWindow,"zui.Zui","endWindow",0x14c203cb,"zui.Zui.endWindow","Sources/zui/Zui.hx",382,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_469_scroll,"zui.Zui","scroll",0xff82726d,"zui.Zui.scroll","Sources/zui/Zui.hx",469,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_472_tab,"zui.Zui","tab",0x123c83f5,"zui.Zui.tab","Sources/zui/Zui.hx",472,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_496_drawTabs,"zui.Zui","drawTabs",0x8fe14d02,"zui.Zui.drawTabs","Sources/zui/Zui.hx",496,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_561_panel,"zui.Zui","panel",0x2fcc4ca4,"zui.Zui.panel","Sources/zui/Zui.hx",561,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_579_image,"zui.Zui","image",0x2fe2f0fb,"zui.Zui.image","Sources/zui/Zui.hx",579,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_630_text,"zui.Zui","text",0xe2ba0f0d,"zui.Zui.text","Sources/zui/Zui.hx",630,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_650_splitText,"zui.Zui","splitText",0xd3ac7a47,"zui.Zui.splitText","Sources/zui/Zui.hx",650,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_653_startTextEdit,"zui.Zui","startTextEdit",0x4bd9f179,"zui.Zui.startTextEdit","Sources/zui/Zui.hx",653,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_676_submitTextEdit,"zui.Zui","submitTextEdit",0xe34b03ef,"zui.Zui.submitTextEdit","Sources/zui/Zui.hx",676,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_684_updateTextEdit,"zui.Zui","updateTextEdit",0x6c030ae0,"zui.Zui.updateTextEdit","Sources/zui/Zui.hx",684,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_807_textInput,"zui.Zui","textInput",0xd95e75bd,"zui.Zui.textInput","Sources/zui/Zui.hx",807,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_835_deselectText,"zui.Zui","deselectText",0xef7606ea,"zui.Zui.deselectText","Sources/zui/Zui.hx",835,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_845_button,"zui.Zui","button",0x91fdfc52,"zui.Zui.button","Sources/zui/Zui.hx",845,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_870_check,"zui.Zui","check",0xb8306a68,"zui.Zui.check","Sources/zui/Zui.hx",870,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_889_radio,"zui.Zui","radio",0x5691e29b,"zui.Zui.radio","Sources/zui/Zui.hx",889,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_908_combo,"zui.Zui","combo",0xbcd6f9ee,"zui.Zui.combo","Sources/zui/Zui.hx",908,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_960_slider,"zui.Zui","slider",0x28226081,"zui.Zui.slider","Sources/zui/Zui.hx",960,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1014_separator,"zui.Zui","separator",0xb3d28205,"zui.Zui.separator","Sources/zui/Zui.hx",1014,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1023_tooltip,"zui.Zui","tooltip",0xcc5626a3,"zui.Zui.tooltip","Sources/zui/Zui.hx",1023,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1028_tooltipImage,"zui.Zui","tooltipImage",0xc86279b8,"zui.Zui.tooltipImage","Sources/zui/Zui.hx",1028,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1035_drawArrow,"zui.Zui","drawArrow",0x6fedd0c5,"zui.Zui.drawArrow","Sources/zui/Zui.hx",1035,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1051_drawTree,"zui.Zui","drawTree",0x8fee35e2,"zui.Zui.drawTree","Sources/zui/Zui.hx",1051,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1065_drawCheck,"zui.Zui","drawCheck",0x9014efc4,"zui.Zui.drawCheck","Sources/zui/Zui.hx",1065,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1080_drawRadio,"zui.Zui","drawRadio",0x2e7667f7,"zui.Zui.drawRadio","Sources/zui/Zui.hx",1080,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1093_drawSlider,"zui.Zui","drawSlider",0x38328ba5,"zui.Zui.drawSlider","Sources/zui/Zui.hx",1093,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1111_drawCombo,"zui.Zui","drawCombo",0x94bb7f4a,"zui.Zui.drawCombo","Sources/zui/Zui.hx",1111,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1164_drawTooltip,"zui.Zui","drawTooltip",0xca6bbaff,"zui.Zui.drawTooltip","Sources/zui/Zui.hx",1164,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1181_drawTooltipText,"zui.Zui","drawTooltipText",0x6ed19f4c,"zui.Zui.drawTooltipText","Sources/zui/Zui.hx",1181,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1201_drawTooltipImage,"zui.Zui","drawTooltipImage",0x386997dc,"zui.Zui.drawTooltipImage","Sources/zui/Zui.hx",1201,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1218_drawString,"zui.Zui","drawString",0xd95dee55,"zui.Zui.drawString","Sources/zui/Zui.hx",1218,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1238_endElement,"zui.Zui","endElement",0x32e11e81,"zui.Zui.endElement","Sources/zui/Zui.hx",1238,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1261_row,"zui.Zui","row",0x123b0bba,"zui.Zui.row","Sources/zui/Zui.hx",1261,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1269_indent,"zui.Zui","indent",0x4c10a6cc,"zui.Zui.indent","Sources/zui/Zui.hx",1269,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1273_unindent,"zui.Zui","unindent",0xc4bb2de5,"zui.Zui.unindent","Sources/zui/Zui.hx",1273,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1279_fadeColor,"zui.Zui","fadeColor",0xb897ebe7,"zui.Zui.fadeColor","Sources/zui/Zui.hx",1279,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1282_fill,"zui.Zui","fill",0xd97c10e3,"zui.Zui.fill","Sources/zui/Zui.hx",1282,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1289_rect,"zui.Zui","rect",0xe1678f84,"zui.Zui.rect","Sources/zui/Zui.hx",1289,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1296_drawRect,"zui.Zui","drawRect",0x8e91e9a8,"zui.Zui.drawRect","Sources/zui/Zui.hx",1296,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1302_isVisible,"zui.Zui","isVisible",0x29761748,"zui.Zui.isVisible","Sources/zui/Zui.hx",1302,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1307_getReleased,"zui.Zui","getReleased",0xb3721513,"zui.Zui.getReleased","Sources/zui/Zui.hx",1307,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1312_getPushed,"zui.Zui","getPushed",0x70d6bf8f,"zui.Zui.getPushed","Sources/zui/Zui.hx",1312,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1317_getStarted,"zui.Zui","getStarted",0x0ae6f9ab,"zui.Zui.getStarted","Sources/zui/Zui.hx",1317,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1322_getInitialHover,"zui.Zui","getInitialHover",0xd6ab55ee,"zui.Zui.getInitialHover","Sources/zui/Zui.hx",1322,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1329_getHover,"zui.Zui","getHover",0xb9bce7a6,"zui.Zui.getHover","Sources/zui/Zui.hx",1329,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1338_getInputInRect,"zui.Zui","getInputInRect",0xf5ae54bd,"zui.Zui.getInputInRect","Sources/zui/Zui.hx",1338,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1343_onMouseDown,"zui.Zui","onMouseDown",0x279c5da8,"zui.Zui.onMouseDown","Sources/zui/Zui.hx",1343,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1351_onMouseUp,"zui.Zui","onMouseUp",0x1a70ce21,"zui.Zui.onMouseUp","Sources/zui/Zui.hx",1351,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1369_onMouseMove,"zui.Zui","onMouseMove",0x2d8f4857,"zui.Zui.onMouseMove","Sources/zui/Zui.hx",1369,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1373_onMouseWheel,"zui.Zui","onMouseWheel",0x6d246c95,"zui.Zui.onMouseWheel","Sources/zui/Zui.hx",1373,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1376_setInputPosition,"zui.Zui","setInputPosition",0x18492431,"zui.Zui.setInputPosition","Sources/zui/Zui.hx",1376,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1383_onKeyDown,"zui.Zui","onKeyDown",0xf64543e2,"zui.Zui.onKeyDown","Sources/zui/Zui.hx",1383,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1401_onKeyUp,"zui.Zui","onKeyUp",0xd705d1db,"zui.Zui.onKeyUp","Sources/zui/Zui.hx",1401,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1415_onKeyPress,"zui.Zui","onKeyPress",0x71131803,"zui.Zui.onKeyPress","Sources/zui/Zui.hx",1415,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1420_onCut,"zui.Zui","onCut",0xa4dceb43,"zui.Zui.onCut","Sources/zui/Zui.hx",1420,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1421_onCopy,"zui.Zui","onCopy",0x9c6c5ed4,"zui.Zui.onCopy","Sources/zui/Zui.hx",1421,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1422_onPaste,"zui.Zui","onPaste",0xb55d6b54,"zui.Zui.onPaste","Sources/zui/Zui.hx",1422,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1424_ELEMENT_W,"zui.Zui","ELEMENT_W",0x4596d654,"zui.Zui.ELEMENT_W","Sources/zui/Zui.hx",1424,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1425_ELEMENT_H,"zui.Zui","ELEMENT_H",0x4596d645,"zui.Zui.ELEMENT_H","Sources/zui/Zui.hx",1425,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1426_ELEMENT_OFFSET,"zui.Zui","ELEMENT_OFFSET",0xf9919876,"zui.Zui.ELEMENT_OFFSET","Sources/zui/Zui.hx",1426,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1427_ARROW_SIZE,"zui.Zui","ARROW_SIZE",0xc52078b7,"zui.Zui.ARROW_SIZE","Sources/zui/Zui.hx",1427,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1428_BUTTON_H,"zui.Zui","BUTTON_H",0xe43933db,"zui.Zui.BUTTON_H","Sources/zui/Zui.hx",1428,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1429_CHECK_SIZE,"zui.Zui","CHECK_SIZE",0x616d9d58,"zui.Zui.CHECK_SIZE","Sources/zui/Zui.hx",1429,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1430_CHECK_SELECT_SIZE,"zui.Zui","CHECK_SELECT_SIZE",0xc767886d,"zui.Zui.CHECK_SELECT_SIZE","Sources/zui/Zui.hx",1430,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1431_FONT_SIZE,"zui.Zui","FONT_SIZE",0x02911211,"zui.Zui.FONT_SIZE","Sources/zui/Zui.hx",1431,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1432_SCROLL_W,"zui.Zui","SCROLL_W",0x145ba6c5,"zui.Zui.SCROLL_W","Sources/zui/Zui.hx",1432,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1433_TEXT_OFFSET,"zui.Zui","TEXT_OFFSET",0xfc6729c5,"zui.Zui.TEXT_OFFSET","Sources/zui/Zui.hx",1433,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1434_TAB_W,"zui.Zui","TAB_W",0xfb4bd22d,"zui.Zui.TAB_W","Sources/zui/Zui.hx",1434,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1435_HEADER_DRAG_H,"zui.Zui","HEADER_DRAG_H",0x520f754f,"zui.Zui.HEADER_DRAG_H","Sources/zui/Zui.hx",1435,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1436_SCALE,"zui.Zui","SCALE",0x6936d80a,"zui.Zui.SCALE","Sources/zui/Zui.hx",1436,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1437_FLASH_SPEED,"zui.Zui","FLASH_SPEED",0x3172d9d8,"zui.Zui.FLASH_SPEED","Sources/zui/Zui.hx",1437,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1438_TOOLTIP_DELAY,"zui.Zui","TOOLTIP_DELAY",0xdf599567,"zui.Zui.TOOLTIP_DELAY","Sources/zui/Zui.hx",1438,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1440_resize,"zui.Zui","resize",0xc098f454,"zui.Zui.resize","Sources/zui/Zui.hx",1440,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_35_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",35,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_36_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",36,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_37_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",37,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_38_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",38,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_39_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",39,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_67_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",67,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_68_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",68,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_69_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",69,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_70_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",70,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_71_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",71,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_72_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",72,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_73_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",73,0xe279dd08)
HX_LOCAL_STACK_FRAME(_hx_pos_7c77aca9aabbe4ed_1110_boot,"zui.Zui","boot",0xd6dbc692,"zui.Zui.boot","Sources/zui/Zui.hx",1110,0xe279dd08)
namespace zui{

void Zui_obj::__construct( ::Dynamic ops){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_21_new)
HXLINE( 156)		this->_hx_set_checkSelectImage(HX_CTX, null());
HXLINE( 155)		this->elementsBaked = false;
HXLINE( 153)		this->tabVertical = false;
HXLINE( 152)		this->tabScroll = ((Float)0.0);
HXLINE( 151)		this->_hx_set_tabHandle(HX_CTX, null());
HXLINE( 150)		this->_hx_set_tabColors(HX_CTX, null());
HXLINE( 149)		this->_hx_set_tabNames(HX_CTX, null());
HXLINE( 148)		this->tooltipTime = ((Float)0.0);
HXLINE( 147)		this->tooltipWait = false;
HXLINE( 146)		this->tooltipShown = false;
HXLINE( 145)		this->tooltipY = ((Float)0.0);
HXLINE( 144)		this->tooltipX = ((Float)0.0);
HXLINE( 143)		this->tooltipInvertY = false;
HXLINE( 142)		this->_hx_set_tooltipImgMaxWidth(HX_CTX, null());
HXLINE( 141)		this->_hx_set_tooltipImg(HX_CTX, null());
HXLINE( 140)		this->_hx_set_tooltipText(HX_CTX, HX_("",00,00,00,00));
HXLINE( 139)		this->comboToSubmit = 0;
HXLINE( 138)		this->_hx_set_submitComboHandle(HX_CTX, null());
HXLINE( 131)		this->_hx_set_comboSelectedWindow(HX_CTX, null());
HXLINE( 130)		this->_hx_set_comboSelectedHandle(HX_CTX, null());
HXLINE( 129)		this->_hx_set_tabPressedHandle(HX_CTX, null());
HXLINE( 128)		this->tabPressed = false;
HXLINE( 127)		this->_hx_set_textToSubmit(HX_CTX, HX_("",00,00,00,00));
HXLINE( 126)		this->_hx_set_submitTextHandle(HX_CTX, null());
HXLINE( 124)		this->_hx_set_textSelectedHandle(HX_CTX, null());
HXLINE( 122)		this->restoreY = ((Float)-1.0);
HXLINE( 121)		this->restoreX = ((Float)-1.0);
HXLINE( 120)		this->windowHeaderH = ((Float)0.0);
HXLINE( 119)		this->windowHeaderW = ((Float)0.0);
HXLINE( 118)		this->_hx_set_dragHandle(HX_CTX, null());
HXLINE( 117)		this->_hx_set_scrollHandle(HX_CTX, null());
HXLINE( 116)		this->windowEnded = true;
HXLINE( 112)		this->_windowY = ((Float)0.0);
HXLINE( 111)		this->_windowX = ((Float)0.0);
HXLINE( 104)		this->imageScrollAlign = true;
HXLINE( 103)		this->scrollAlign = ((Float)0.0);
HXLINE(  79)		this->curRatio = -1;
HXLINE(  76)		this->highlightAnchor = 0;
HXLINE(  75)		this->cursorX = 0;
HXLINE(  65)		this->_hx_set_key(HX_CTX, null());
HXLINE(  64)		this->isReturnDown = false;
HXLINE(  63)		this->isEscapeDown = false;
HXLINE(  62)		this->isDeleteDown = false;
HXLINE(  61)		this->isBackspaceDown = false;
HXLINE(  60)		this->isAltDown = false;
HXLINE(  59)		this->isCtrlDown = false;
HXLINE(  58)		this->isShiftDown = false;
HXLINE(  57)		this->isKeyDown = false;
HXLINE(  56)		this->isKeyPressed = false;
HXLINE(  49)		this->inputWheelDelta = 0;
HXLINE(  42)		this->inputEnabled = true;
HXLINE(  41)		this->inputRegistered = false;
HXLINE(  34)		this->tabSwitchEnabled = true;
HXLINE(  33)		this->highlightOnSelect = true;
HXLINE(  32)		this->alwaysRedraw = false;
HXLINE(  31)		this->scrollEnabled = true;
HXLINE(  30)		this->imageInvertY = false;
HXLINE(  29)		this->changed = false;
HXLINE(  28)		this->isReleased = false;
HXLINE(  27)		this->isHovered = false;
HXLINE(  26)		this->isPushed = false;
HXLINE(  25)		this->isStarted = false;
HXLINE(  24)		this->enabled = true;
HXLINE(  23)		this->isTyping = false;
HXLINE(  22)		this->isScrolling = false;
HXLINE( 159)		if (hx::IsNull( ops->__Field(HX_("theme",09,7e,86,0f),hx::paccDynamic) )) {
HXLINE( 159)			ops->__SetField(HX_("theme",09,7e,86,0f),::zui::Themes_obj::dark,hx::paccDynamic);
            		}
HXLINE( 160)		this->_hx_set_t(HX_CTX, ops->__Field(HX_("theme",09,7e,86,0f),hx::paccDynamic));
HXLINE( 161)		if (hx::IsNull( ops->__Field(HX_("khaWindowId",2f,bc,2f,40),hx::paccDynamic) )) {
HXLINE( 161)			ops->__SetField(HX_("khaWindowId",2f,bc,2f,40),0,hx::paccDynamic);
            		}
HXLINE( 162)		if (hx::IsNull( ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic) )) {
HXLINE( 162)			ops->__SetField(HX_("scaleFactor",f9,5e,11,d0),((Float)1.0),hx::paccDynamic);
            		}
HXLINE( 163)		if (hx::IsNull( ops->__Field(HX_("autoNotifyInput",52,41,f2,7c),hx::paccDynamic) )) {
HXLINE( 163)			ops->__SetField(HX_("autoNotifyInput",52,41,f2,7c),true,hx::paccDynamic);
            		}
HXLINE( 164)		this->_hx_set_ops(HX_CTX, ops);
HXLINE( 165)		this->setScale(( (Float)(ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXLINE( 166)		if (( (bool)(ops->__Field(HX_("autoNotifyInput",52,41,f2,7c),hx::paccDynamic)) )) {
HXLINE( 166)			this->registerInput();
            		}
HXLINE( 167)		if (hx::IsNull( ::zui::Zui_obj::copyReceiver )) {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run(::Array< ::Dynamic> frames){
            				HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_172_new)
HXLINE( 172)				bool _hx_tmp;
HXDLIN( 172)				bool _hx_tmp1;
HXDLIN( 172)				if (!(::zui::Zui_obj::isCopy)) {
HXLINE( 172)					_hx_tmp1 = ::zui::Zui_obj::isPaste;
            				}
            				else {
HXLINE( 172)					_hx_tmp1 = true;
            				}
HXDLIN( 172)				if (_hx_tmp1) {
HXLINE( 172)					_hx_tmp = (++::zui::Zui_obj::copyFrame > 1);
            				}
            				else {
HXLINE( 172)					_hx_tmp = false;
            				}
HXDLIN( 172)				if (_hx_tmp) {
HXLINE( 172)					::zui::Zui_obj::isCopy = (::zui::Zui_obj::isCut = (::zui::Zui_obj::isPaste = false));
HXDLIN( 172)					::zui::Zui_obj::copyFrame = 0;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 168)			::zui::Zui_obj::copyReceiver = hx::ObjectPtr<OBJ_>(this);
HXLINE( 169)			::kha::System_obj::notifyOnCutCopyPaste(this->onCut_dyn(),this->onCopy_dyn(),this->onPaste_dyn());
HXLINE( 170)			::kha::System_obj::notifyOnFrames( ::Dynamic(new _hx_Closure_0()));
            		}
HXLINE( 175)		 ::kha::graphics4::VertexStructure rtTextVS = ::kha::graphics4::Graphics2_obj::createTextVertexStructure();
HXLINE( 176)		this->_hx_set_rtTextPipeline(HX_CTX, ::kha::graphics4::Graphics2_obj::createTextPipeline(rtTextVS));
HXLINE( 177)		this->rtTextPipeline->alphaBlendSource = 1;
HXLINE( 178)		this->rtTextPipeline->compile();
            	}

Dynamic Zui_obj::__CreateEmpty() { return new Zui_obj; }

void *Zui_obj::_hx_vtable = 0;

Dynamic Zui_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Zui_obj > _hx_result = new Zui_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Zui_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x30f846c4;
}

void Zui_obj::setScale(Float factor){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_181_setScale)
HXLINE( 182)		this->ops->__SetField(HX_("scaleFactor",f9,5e,11,d0),factor,hx::paccDynamic);
HXLINE( 183)		this->fontSize = ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("FONT_SIZE",71,f0,3d,80),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
HXLINE( 184)		Float fontHeight = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) )->height(this->fontSize);
HXLINE( 185)		this->fontOffsetY = (((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) - fontHeight) / ( (Float)(2) ));
HXLINE( 186)		this->arrowOffsetY = (((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) - (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))) / ( (Float)(2) ));
HXLINE( 187)		this->arrowOffsetX = this->arrowOffsetY;
HXLINE( 188)		this->titleOffsetX = (((this->arrowOffsetX * ( (Float)(2) )) + (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))) / ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXLINE( 189)		this->buttonOffsetY = (((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) - (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))) / ( (Float)(2) ));
HXLINE( 190)		this->checkOffsetY = (((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) - (( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))) / ( (Float)(2) ));
HXLINE( 191)		this->checkOffsetX = this->checkOffsetY;
HXLINE( 192)		this->checkSelectOffsetY = (((( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) - (( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))) / ( (Float)(2) ));
HXLINE( 193)		this->checkSelectOffsetX = this->checkSelectOffsetY;
HXLINE( 194)		this->radioOffsetY = (((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) - (( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))) / ( (Float)(2) ));
HXLINE( 195)		this->radioOffsetX = this->radioOffsetY;
HXLINE( 196)		this->radioSelectOffsetY = (((( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) - (( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))) / ( (Float)(2) ));
HXLINE( 197)		this->radioSelectOffsetX = this->radioSelectOffsetY;
HXLINE( 198)		this->elementsBaked = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,setScale,(void))

void Zui_obj::bakeElements(){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_201_bakeElements)
HXLINE( 202)		if (hx::IsNotNull( this->checkSelectImage )) {
HXLINE( 203)			this->checkSelectImage->unload();
            		}
HXLINE( 205)		int _hx_tmp = ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
HXDLIN( 205)		int _hx_tmp1 = ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
HXDLIN( 205)		this->_hx_set_checkSelectImage(HX_CTX, ::kha::Image_obj::createRenderTarget(_hx_tmp,_hx_tmp1,null(),0,1,this->ops->__Field(HX_("khaWindowId",2f,bc,2f,40),hx::paccDynamic)));
HXLINE( 206)		 ::kha::graphics2::Graphics g = this->checkSelectImage->get_g2();
HXLINE( 207)		g->begin(true,0);
HXLINE( 208)		g->set_color(( (int)(this->t->__Field(HX_("ACCENT_SELECT_COL",32,b6,1e,48),hx::paccDynamic)) ));
HXLINE( 209)		int _hx_tmp2 = this->checkSelectImage->get_width();
HXDLIN( 209)		int _hx_tmp3 = this->checkSelectImage->get_height();
HXDLIN( 209)		g->drawLine(( (Float)(0) ),( (Float)(0) ),( (Float)(_hx_tmp2) ),( (Float)(_hx_tmp3) ),(( (Float)(2) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
HXLINE( 210)		int _hx_tmp4 = this->checkSelectImage->get_width();
HXDLIN( 210)		int _hx_tmp5 = this->checkSelectImage->get_height();
HXDLIN( 210)		g->drawLine(( (Float)(_hx_tmp4) ),( (Float)(0) ),( (Float)(0) ),( (Float)(_hx_tmp5) ),(( (Float)(2) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
HXLINE( 211)		g->end();
HXLINE( 212)		this->elementsBaked = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,bakeElements,(void))

void Zui_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_216_remove)
HXDLIN( 216)		if (( (bool)(this->ops->__Field(HX_("autoNotifyInput",52,41,f2,7c),hx::paccDynamic)) )) {
HXDLIN( 216)			this->unregisterInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,remove,(void))

void Zui_obj::registerInput(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_219_registerInput)
HXLINE( 220)		::kha::input::Mouse_obj::get(null())->notifyWindowed(( (int)(this->ops->__Field(HX_("khaWindowId",2f,bc,2f,40),hx::paccDynamic)) ),this->onMouseDown_dyn(),this->onMouseUp_dyn(),this->onMouseMove_dyn(),this->onMouseWheel_dyn(),null());
HXLINE( 221)		::kha::input::Keyboard_obj::get(null())->notify(this->onKeyDown_dyn(),this->onKeyUp_dyn(),this->onKeyPress_dyn());
HXLINE( 222)		this->inputRegistered = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,registerInput,(void))

void Zui_obj::unregisterInput(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_225_unregisterInput)
HXLINE( 226)		::kha::input::Mouse_obj::get(null())->removeWindowed(( (int)(this->ops->__Field(HX_("khaWindowId",2f,bc,2f,40),hx::paccDynamic)) ),this->onMouseDown_dyn(),this->onMouseUp_dyn(),this->onMouseMove_dyn(),this->onMouseWheel_dyn(),null());
HXLINE( 227)		::kha::input::Keyboard_obj::get(null())->remove(this->onKeyDown_dyn(),this->onKeyUp_dyn(),this->onKeyPress_dyn());
HXLINE( 229)		this->endInput();
HXLINE( 230)		this->inputX = (this->inputY = ( (Float)(0) ));
HXLINE( 231)		this->inputRegistered = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,unregisterInput,(void))

void Zui_obj::begin( ::kha::graphics2::Graphics g){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_234_begin)
HXLINE( 235)		if (!(this->elementsBaked)) {
HXLINE( 235)			this->bakeElements();
            		}
HXLINE( 236)		this->changed = false;
HXLINE( 237)		this->_hx_set_globalG(HX_CTX, g);
HXLINE( 238)		this->_x = ( (Float)(0) );
HXLINE( 239)		this->_y = ( (Float)(0) );
HXLINE( 240)		this->_w = 0;
HXLINE( 241)		this->_h = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,begin,(void))

void Zui_obj::end(hx::Null< bool >  __o_last){
            		bool last = __o_last.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_244_end)
HXLINE( 245)		if (!(this->windowEnded)) {
HXLINE( 245)			this->endWindow(null());
            		}
HXLINE( 246)		this->drawCombo();
HXLINE( 247)		this->drawTooltip();
HXLINE( 248)		this->_hx_set_tabPressedHandle(HX_CTX, null());
HXLINE( 249)		if (last) {
HXLINE( 249)			this->endInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,end,(void))

void Zui_obj::beginRegion( ::kha::graphics2::Graphics g,int x,int y,int w){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_252_beginRegion)
HXLINE( 253)		if (!(this->elementsBaked)) {
HXLINE( 253)			g->end();
HXDLIN( 253)			this->bakeElements();
HXDLIN( 253)			g->begin(false,null());
            		}
HXLINE( 254)		this->changed = false;
HXLINE( 255)		this->_hx_set_globalG(HX_CTX, g);
HXLINE( 256)		this->_hx_set_g(HX_CTX, g);
HXLINE( 257)		this->_hx_set_currentWindow(HX_CTX, null());
HXLINE( 258)		this->_hx_set_tooltipText(HX_CTX, HX_("",00,00,00,00));
HXLINE( 259)		this->_hx_set_tooltipImg(HX_CTX, null());
HXLINE( 260)		this->_windowX = ( (Float)(0) );
HXLINE( 261)		this->_windowY = ( (Float)(0) );
HXLINE( 262)		this->_windowW = ( (Float)(w) );
HXLINE( 263)		this->_x = ( (Float)(x) );
HXLINE( 264)		this->_y = ( (Float)(y) );
HXLINE( 265)		this->_w = w;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Zui_obj,beginRegion,(void))

void Zui_obj::endRegion(hx::Null< bool >  __o_last){
            		bool last = __o_last.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_268_endRegion)
HXLINE( 269)		this->drawTooltip();
HXLINE( 270)		this->_hx_set_tabPressedHandle(HX_CTX, null());
HXLINE( 271)		if (last) {
HXLINE( 271)			this->endInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,endRegion,(void))

void Zui_obj::endInput(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_274_endInput)
HXLINE( 275)		this->isKeyPressed = false;
HXLINE( 276)		this->inputStarted = false;
HXLINE( 277)		this->inputStartedR = false;
HXLINE( 278)		this->inputReleased = false;
HXLINE( 279)		this->inputReleasedR = false;
HXLINE( 280)		this->inputDX = ( (Float)(0) );
HXLINE( 281)		this->inputDY = ( (Float)(0) );
HXLINE( 282)		this->inputWheelDelta = 0;
HXLINE( 283)		::zui::Zui_obj::textToPaste = HX_("",00,00,00,00);
HXLINE( 284)		bool _hx_tmp;
HXDLIN( 284)		bool _hx_tmp1;
HXDLIN( 284)		if (::zui::Zui_obj::keyRepeat) {
HXLINE( 284)			_hx_tmp1 = this->isKeyDown;
            		}
            		else {
HXLINE( 284)			_hx_tmp1 = false;
            		}
HXDLIN( 284)		if (_hx_tmp1) {
HXLINE( 284)			Float _hx_tmp2 = ::kha::Scheduler_obj::time();
HXDLIN( 284)			_hx_tmp = ((_hx_tmp2 - ::zui::Zui_obj::keyRepeatTime) > ((Float)0.05));
            		}
            		else {
HXLINE( 284)			_hx_tmp = false;
            		}
HXDLIN( 284)		if (_hx_tmp) {
HXLINE( 285)			bool _hx_tmp3;
HXDLIN( 285)			bool _hx_tmp4;
HXDLIN( 285)			bool _hx_tmp5;
HXDLIN( 285)			bool _hx_tmp6;
HXDLIN( 285)			bool _hx_tmp7;
HXDLIN( 285)			if (hx::IsNotEq( this->key,8 )) {
HXLINE( 285)				_hx_tmp7 = hx::IsEq( this->key,46 );
            			}
            			else {
HXLINE( 285)				_hx_tmp7 = true;
            			}
HXDLIN( 285)			if (!(_hx_tmp7)) {
HXLINE( 285)				_hx_tmp6 = hx::IsEq( this->key,37 );
            			}
            			else {
HXLINE( 285)				_hx_tmp6 = true;
            			}
HXDLIN( 285)			if (!(_hx_tmp6)) {
HXLINE( 285)				_hx_tmp5 = hx::IsEq( this->key,39 );
            			}
            			else {
HXLINE( 285)				_hx_tmp5 = true;
            			}
HXDLIN( 285)			if (!(_hx_tmp5)) {
HXLINE( 285)				_hx_tmp4 = hx::IsEq( this->key,38 );
            			}
            			else {
HXLINE( 285)				_hx_tmp4 = true;
            			}
HXDLIN( 285)			if (!(_hx_tmp4)) {
HXLINE( 285)				_hx_tmp3 = hx::IsEq( this->key,40 );
            			}
            			else {
HXLINE( 285)				_hx_tmp3 = true;
            			}
HXDLIN( 285)			if (_hx_tmp3) {
HXLINE( 286)				::zui::Zui_obj::keyRepeatTime = ::kha::Scheduler_obj::time();
HXLINE( 287)				this->isKeyPressed = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,endInput,(void))

bool Zui_obj::inputChanged(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_293_inputChanged)
HXDLIN( 293)		bool _hx_tmp;
HXDLIN( 293)		bool _hx_tmp1;
HXDLIN( 293)		bool _hx_tmp2;
HXDLIN( 293)		bool _hx_tmp3;
HXDLIN( 293)		bool _hx_tmp4;
HXDLIN( 293)		bool _hx_tmp5;
HXDLIN( 293)		bool _hx_tmp6;
HXDLIN( 293)		bool _hx_tmp7;
HXDLIN( 293)		if ((this->inputDX == 0)) {
HXDLIN( 293)			_hx_tmp7 = (this->inputDY != 0);
            		}
            		else {
HXDLIN( 293)			_hx_tmp7 = true;
            		}
HXDLIN( 293)		if (!(_hx_tmp7)) {
HXDLIN( 293)			_hx_tmp6 = (this->inputWheelDelta != 0);
            		}
            		else {
HXDLIN( 293)			_hx_tmp6 = true;
            		}
HXDLIN( 293)		if (!(_hx_tmp6)) {
HXDLIN( 293)			_hx_tmp5 = this->inputStarted;
            		}
            		else {
HXDLIN( 293)			_hx_tmp5 = true;
            		}
HXDLIN( 293)		if (!(_hx_tmp5)) {
HXDLIN( 293)			_hx_tmp4 = this->inputStartedR;
            		}
            		else {
HXDLIN( 293)			_hx_tmp4 = true;
            		}
HXDLIN( 293)		if (!(_hx_tmp4)) {
HXDLIN( 293)			_hx_tmp3 = this->inputReleased;
            		}
            		else {
HXDLIN( 293)			_hx_tmp3 = true;
            		}
HXDLIN( 293)		if (!(_hx_tmp3)) {
HXDLIN( 293)			_hx_tmp2 = this->inputReleasedR;
            		}
            		else {
HXDLIN( 293)			_hx_tmp2 = true;
            		}
HXDLIN( 293)		if (!(_hx_tmp2)) {
HXDLIN( 293)			_hx_tmp1 = this->inputDown;
            		}
            		else {
HXDLIN( 293)			_hx_tmp1 = true;
            		}
HXDLIN( 293)		if (!(_hx_tmp1)) {
HXDLIN( 293)			_hx_tmp = this->inputDownR;
            		}
            		else {
HXDLIN( 293)			_hx_tmp = true;
            		}
HXDLIN( 293)		if (!(_hx_tmp)) {
HXDLIN( 293)			return this->isKeyPressed;
            		}
            		else {
HXDLIN( 293)			return true;
            		}
HXDLIN( 293)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,inputChanged,return )

bool Zui_obj::windowDirty( ::zui::Handle handle,int x,int y,int w,int h){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_296_windowDirty)
HXLINE( 297)		int wx = (x + handle->dragX);
HXLINE( 298)		int wy = (y + handle->dragY);
HXLINE( 299)		bool inputChanged;
HXDLIN( 299)		if (this->getInputInRect(( (Float)(wx) ),( (Float)(wy) ),( (Float)(w) ),( (Float)(h) ),null())) {
HXLINE( 299)			inputChanged = this->inputChanged();
            		}
            		else {
HXLINE( 299)			inputChanged = false;
            		}
HXLINE( 300)		bool _hx_tmp;
HXDLIN( 300)		bool _hx_tmp1;
HXDLIN( 300)		if (!(this->alwaysRedraw)) {
HXLINE( 300)			_hx_tmp1 = this->isScrolling;
            		}
            		else {
HXLINE( 300)			_hx_tmp1 = true;
            		}
HXDLIN( 300)		if (!(_hx_tmp1)) {
HXLINE( 300)			_hx_tmp = this->isTyping;
            		}
            		else {
HXLINE( 300)			_hx_tmp = true;
            		}
HXDLIN( 300)		if (!(_hx_tmp)) {
HXLINE( 300)			return inputChanged;
            		}
            		else {
HXLINE( 300)			return true;
            		}
HXDLIN( 300)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Zui_obj,windowDirty,return )

bool Zui_obj::window( ::zui::Handle handle,int x,int y,int w,int h,hx::Null< bool >  __o_drag){
            		bool drag = __o_drag.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_304_window)
HXLINE( 305)		bool _hx_tmp;
HXDLIN( 305)		bool _hx_tmp1;
HXDLIN( 305)		if (hx::IsNotNull( handle->texture )) {
HXLINE( 305)			_hx_tmp1 = (w != handle->texture->get_width());
            		}
            		else {
HXLINE( 305)			_hx_tmp1 = true;
            		}
HXDLIN( 305)		if (!(_hx_tmp1)) {
HXLINE( 305)			_hx_tmp = (h != handle->texture->get_height());
            		}
            		else {
HXLINE( 305)			_hx_tmp = true;
            		}
HXDLIN( 305)		if (_hx_tmp) {
HXLINE( 306)			this->resize(handle,w,h,this->ops->__Field(HX_("khaWindowId",2f,bc,2f,40),hx::paccDynamic));
            		}
HXLINE( 309)		if (!(this->windowEnded)) {
HXLINE( 309)			this->endWindow(null());
            		}
HXLINE( 310)		this->windowEnded = false;
HXLINE( 312)		this->_hx_set_g(HX_CTX, handle->texture->get_g2());
HXLINE( 313)		this->_hx_set_currentWindow(HX_CTX, handle);
HXLINE( 314)		this->_windowX = ( (Float)((x + handle->dragX)) );
HXLINE( 315)		this->_windowY = ( (Float)((y + handle->dragY)) );
HXLINE( 316)		this->_windowW = ( (Float)(w) );
HXLINE( 317)		this->_windowH = ( (Float)(h) );
HXLINE( 318)		this->windowHeaderW = ( (Float)(0) );
HXLINE( 319)		this->windowHeaderH = ( (Float)(0) );
HXLINE( 321)		if (this->windowDirty(handle,x,y,w,h)) {
HXLINE( 322)			handle->redraws = 2;
            		}
HXLINE( 325)		if (hx::IsNotNull( ::zui::Zui_obj::onBorderHover )) {
HXLINE( 326)			if (this->getInputInRect((this->_windowX - ( (Float)(4) )),this->_windowY,( (Float)(8) ),this->_windowH,null())) {
HXLINE( 327)				::zui::Zui_obj::onBorderHover(handle,0);
            			}
            			else {
HXLINE( 329)				if (this->getInputInRect(((this->_windowX + this->_windowW) - ( (Float)(4) )),this->_windowY,( (Float)(8) ),this->_windowH,null())) {
HXLINE( 330)					::zui::Zui_obj::onBorderHover(handle,1);
            				}
            				else {
HXLINE( 332)					if (this->getInputInRect(this->_windowX,(this->_windowY - ( (Float)(4) )),this->_windowW,( (Float)(8) ),null())) {
HXLINE( 333)						::zui::Zui_obj::onBorderHover(handle,2);
            					}
            					else {
HXLINE( 335)						if (this->getInputInRect(this->_windowX,((this->_windowY + this->_windowH) - ( (Float)(4) )),this->_windowW,( (Float)(8) ),null())) {
HXLINE( 336)							::zui::Zui_obj::onBorderHover(handle,3);
            						}
            					}
            				}
            			}
            		}
HXLINE( 340)		if ((handle->redraws <= 0)) {
HXLINE( 341)			return false;
            		}
HXLINE( 344)		this->_x = ( (Float)(0) );
HXLINE( 345)		this->_y = handle->scrollOffset;
HXLINE( 346)		if ((handle->layout == 1)) {
HXLINE( 346)			w = ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("ELEMENT_W",b4,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            		}
HXLINE( 347)		int _hx_tmp2;
HXDLIN( 347)		if (!(handle->scrollEnabled)) {
HXLINE( 347)			_hx_tmp2 = w;
            		}
            		else {
HXLINE( 347)			_hx_tmp2 = (w - ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
            		}
HXDLIN( 347)		this->_w = _hx_tmp2;
HXLINE( 348)		this->_h = h;
HXLINE( 349)		this->_hx_set_tooltipText(HX_CTX, HX_("",00,00,00,00));
HXLINE( 350)		this->_hx_set_tooltipImg(HX_CTX, null());
HXLINE( 351)		this->_hx_set_tabNames(HX_CTX, null());
HXLINE( 353)		if (( (bool)(this->t->__Field(HX_("FILL_WINDOW_BG",f8,19,75,d3),hx::paccDynamic)) )) {
HXLINE( 354)			this->g->begin(true,this->t->__Field(HX_("WINDOW_BG_COL",15,11,a8,46),hx::paccDynamic));
            		}
            		else {
HXLINE( 357)			this->g->begin(true,0);
HXLINE( 358)			this->g->set_color(( (int)(this->t->__Field(HX_("WINDOW_BG_COL",15,11,a8,46),hx::paccDynamic)) ));
HXLINE( 359)			this->g->fillRect(this->_x,(this->_y - handle->scrollOffset),handle->lastMaxX,handle->lastMaxY);
            		}
HXLINE( 362)		handle->dragEnabled = drag;
HXLINE( 363)		if (drag) {
HXLINE( 364)			bool _hx_tmp3;
HXDLIN( 364)			if (this->inputStarted) {
HXLINE( 364)				Float _hx_tmp4 = this->_windowX;
HXDLIN( 364)				Float _hx_tmp5 = this->_windowY;
HXDLIN( 364)				Float _hx_tmp6 = this->_windowW;
HXDLIN( 364)				_hx_tmp3 = this->getInputInRect(_hx_tmp4,_hx_tmp5,_hx_tmp6,( (Float)(::Std_obj::_hx_int((( (Float)(15) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ),null());
            			}
            			else {
HXLINE( 364)				_hx_tmp3 = false;
            			}
HXDLIN( 364)			if (_hx_tmp3) {
HXLINE( 365)				this->_hx_set_dragHandle(HX_CTX, handle);
            			}
            			else {
HXLINE( 367)				if (this->inputReleased) {
HXLINE( 368)					this->_hx_set_dragHandle(HX_CTX, null());
            				}
            			}
HXLINE( 370)			if (hx::IsEq( handle,this->dragHandle )) {
HXLINE( 371)				handle->redraws = 2;
HXLINE( 372)				 ::zui::Handle handle1 = handle;
HXDLIN( 372)				int handle2 = handle1->dragX;
HXDLIN( 372)				handle1->dragX = (handle2 + ::Std_obj::_hx_int(this->inputDX));
HXLINE( 373)				 ::zui::Handle handle3 = handle;
HXDLIN( 373)				int handle4 = handle3->dragY;
HXDLIN( 373)				handle3->dragY = (handle4 + ::Std_obj::_hx_int(this->inputDY));
            			}
HXLINE( 375)			 ::zui::Zui _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 375)			Float _hx_tmp8 = _hx_tmp7->_y;
HXDLIN( 375)			_hx_tmp7->_y = (_hx_tmp8 + ::Std_obj::_hx_int((( (Float)(15) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
HXLINE( 376)			 ::zui::Zui _hx_tmp9 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 376)			Float _hx_tmp10 = _hx_tmp9->windowHeaderH;
HXDLIN( 376)			_hx_tmp9->windowHeaderH = (_hx_tmp10 + ::Std_obj::_hx_int((( (Float)(15) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
            		}
HXLINE( 379)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC6(Zui_obj,window,return )

void Zui_obj::endWindow(hx::Null< bool >  __o_bindGlobalG){
            		bool bindGlobalG = __o_bindGlobalG.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_382_endWindow)
HXLINE( 383)		 ::zui::Handle handle = this->currentWindow;
HXLINE( 384)		if (hx::IsNull( handle )) {
HXLINE( 384)			return;
            		}
HXLINE( 385)		bool _hx_tmp;
HXDLIN( 385)		bool _hx_tmp1;
HXDLIN( 385)		if ((handle->redraws <= 0)) {
HXLINE( 385)			_hx_tmp1 = this->isScrolling;
            		}
            		else {
HXLINE( 385)			_hx_tmp1 = true;
            		}
HXDLIN( 385)		if (!(_hx_tmp1)) {
HXLINE( 385)			_hx_tmp = this->isTyping;
            		}
            		else {
HXLINE( 385)			_hx_tmp = true;
            		}
HXDLIN( 385)		if (_hx_tmp) {
HXLINE( 387)			if (hx::IsNotNull( this->tabNames )) {
HXLINE( 387)				this->drawTabs();
            			}
HXLINE( 389)			if (handle->dragEnabled) {
HXLINE( 390)				this->g->set_color(( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),hx::paccDynamic)) ));
HXLINE( 391)				 ::kha::graphics2::Graphics _hx_tmp2 = this->g;
HXDLIN( 391)				Float _hx_tmp3 = this->_windowW;
HXDLIN( 391)				_hx_tmp2->fillRect(( (Float)(0) ),( (Float)(0) ),_hx_tmp3,( (Float)(::Std_obj::_hx_int((( (Float)(15) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ));
            			}
HXLINE( 394)			Float wh = (this->_windowH - this->windowHeaderH);
HXLINE( 395)			Float fullHeight = ((this->_y - handle->scrollOffset) - this->windowHeaderH);
HXLINE( 396)			bool _hx_tmp4;
HXDLIN( 396)			bool _hx_tmp5;
HXDLIN( 396)			if (!((fullHeight < wh))) {
HXLINE( 396)				_hx_tmp5 = (handle->layout == 1);
            			}
            			else {
HXLINE( 396)				_hx_tmp5 = true;
            			}
HXDLIN( 396)			if (!(_hx_tmp5)) {
HXLINE( 396)				_hx_tmp4 = !(this->scrollEnabled);
            			}
            			else {
HXLINE( 396)				_hx_tmp4 = true;
            			}
HXDLIN( 396)			if (_hx_tmp4) {
HXLINE( 397)				handle->scrollEnabled = false;
HXLINE( 398)				handle->scrollOffset = ( (Float)(0) );
            			}
            			else {
HXLINE( 401)				handle->scrollEnabled = true;
HXLINE( 402)				if ((this->tabScroll < 0)) {
HXLINE( 403)					handle->scrollOffset = this->tabScroll;
HXLINE( 404)					this->tabScroll = ( (Float)(0) );
            				}
HXLINE( 406)				Float wy = (this->_windowY + this->windowHeaderH);
HXLINE( 407)				Float amountToScroll = (fullHeight - wh);
HXLINE( 408)				Float amountScrolled = -(handle->scrollOffset);
HXLINE( 409)				Float ratio = (amountScrolled / amountToScroll);
HXLINE( 410)				Float barH = (wh * ::Math_obj::abs((wh / fullHeight)));
HXLINE( 411)				barH = ::Math_obj::max(barH,(( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
HXLINE( 413)				Float totalScrollableArea = (wh - barH);
HXLINE( 414)				Float e = (amountToScroll / totalScrollableArea);
HXLINE( 415)				Float barY = ((totalScrollableArea * ratio) + this->windowHeaderH);
HXLINE( 416)				Float barFocus = (this->_windowX + this->_windowW);
HXDLIN( 416)				Float barFocus1 = (barFocus - ( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ));
HXDLIN( 416)				Float barFocus2 = (barY + this->_windowY);
HXDLIN( 416)				bool barFocus3 = this->getInputInRect(barFocus1,barFocus2,( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ),barH,null());
HXLINE( 418)				bool _hx_tmp6;
HXDLIN( 418)				if (this->inputStarted) {
HXLINE( 418)					_hx_tmp6 = barFocus3;
            				}
            				else {
HXLINE( 418)					_hx_tmp6 = false;
            				}
HXDLIN( 418)				if (_hx_tmp6) {
HXLINE( 419)					this->_hx_set_scrollHandle(HX_CTX, handle);
HXLINE( 420)					this->isScrolling = true;
            				}
HXLINE( 423)				if (hx::IsEq( handle,this->scrollHandle )) {
HXLINE( 424)					this->scroll((this->inputDY * e),fullHeight);
            				}
            				else {
HXLINE( 426)					bool _hx_tmp7;
HXDLIN( 426)					bool _hx_tmp8;
HXDLIN( 426)					if ((this->inputWheelDelta != 0)) {
HXLINE( 426)						_hx_tmp8 = hx::IsNull( this->comboSelectedHandle );
            					}
            					else {
HXLINE( 426)						_hx_tmp8 = false;
            					}
HXDLIN( 426)					if (_hx_tmp8) {
HXLINE( 426)						_hx_tmp7 = this->getInputInRect(this->_windowX,wy,this->_windowW,wh,null());
            					}
            					else {
HXLINE( 426)						_hx_tmp7 = false;
            					}
HXDLIN( 426)					if (_hx_tmp7) {
HXLINE( 428)						this->scroll((( (Float)(this->inputWheelDelta) ) * (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))),fullHeight);
            					}
            				}
HXLINE( 432)				if ((handle->scrollOffset > 0)) {
HXLINE( 433)					handle->scrollOffset = ( (Float)(0) );
            				}
            				else {
HXLINE( 435)					if (((fullHeight + handle->scrollOffset) < wh)) {
HXLINE( 436)						handle->scrollOffset = (wh - fullHeight);
            					}
            				}
HXLINE( 439)				this->g->set_color(( (int)(this->t->__Field(HX_("WINDOW_BG_COL",15,11,a8,46),hx::paccDynamic)) ));
HXLINE( 440)				 ::kha::graphics2::Graphics _hx_tmp9 = this->g;
HXDLIN( 440)				Float _hx_tmp10 = this->_windowW;
HXDLIN( 440)				Float _hx_tmp11 = (_hx_tmp10 - ( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ));
HXDLIN( 440)				_hx_tmp9->fillRect(_hx_tmp11,wy,( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ),wh);
HXLINE( 441)				this->g->set_color(( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),hx::paccDynamic)) ));
HXLINE( 442)				Float scrollbarFocus = (this->_windowX + this->_windowW);
HXDLIN( 442)				Float scrollbarFocus1 = (scrollbarFocus - ( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ));
HXDLIN( 442)				bool scrollbarFocus2 = this->getInputInRect(scrollbarFocus1,wy,( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ),wh,null());
HXLINE( 443)				Float barW;
HXDLIN( 443)				bool barW1;
HXDLIN( 443)				if (!(scrollbarFocus2)) {
HXLINE( 443)					barW1 = hx::IsEq( handle,this->scrollHandle );
            				}
            				else {
HXLINE( 443)					barW1 = true;
            				}
HXDLIN( 443)				if (barW1) {
HXLINE( 443)					barW = ( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) );
            				}
            				else {
HXLINE( 443)					barW = (( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ) / ( (Float)(3) ));
            				}
HXLINE( 444)				this->g->fillRect(((this->_windowW - barW) - this->scrollAlign),barY,barW,barH);
            			}
HXLINE( 447)			handle->lastMaxX = this->_x;
HXLINE( 448)			handle->lastMaxY = this->_y;
HXLINE( 449)			if ((handle->layout == 0)) {
HXLINE( 449)				 ::zui::Handle handle1 = handle;
HXDLIN( 449)				handle1->lastMaxX = (handle1->lastMaxX + this->_windowW);
            			}
            			else {
HXLINE( 450)				 ::zui::Handle handle2 = handle;
HXDLIN( 450)				handle2->lastMaxY = (handle2->lastMaxY + this->_windowH);
            			}
HXLINE( 451)			handle->redraws--;
HXLINE( 453)			this->g->end();
            		}
HXLINE( 456)		this->windowEnded = true;
HXLINE( 459)		bool _hx_tmp12;
HXDLIN( 459)		if (!(::zui::Zui_obj::alwaysRedrawWindow)) {
HXLINE( 459)			_hx_tmp12 = (handle->redraws > -4);
            		}
            		else {
HXLINE( 459)			_hx_tmp12 = true;
            		}
HXDLIN( 459)		if (_hx_tmp12) {
HXLINE( 460)			if (bindGlobalG) {
HXLINE( 460)				this->globalG->begin(false,null());
            			}
HXLINE( 461)			this->globalG->set_color(( (int)(this->t->__Field(HX_("WINDOW_TINT_COL",0b,c9,a0,ae),hx::paccDynamic)) ));
HXLINE( 462)			this->globalG->drawImage(handle->texture,( (float)(this->_windowX) ),( (float)(this->_windowY) ));
HXLINE( 463)			if (bindGlobalG) {
HXLINE( 463)				this->globalG->end();
            			}
HXLINE( 464)			if ((handle->redraws <= 0)) {
HXLINE( 464)				handle->redraws--;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,endWindow,(void))

void Zui_obj::scroll(Float delta,Float fullHeight){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_469_scroll)
HXDLIN( 469)		 ::zui::Handle _hx_tmp = this->currentWindow;
HXDLIN( 469)		_hx_tmp->scrollOffset = (_hx_tmp->scrollOffset - delta);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,scroll,(void))

bool Zui_obj::tab( ::zui::Handle handle,::String text,hx::Null< bool >  __o_vertical,hx::Null< int >  __o_color){
            		bool vertical = __o_vertical.Default(false);
            		int color = __o_color.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_472_tab)
HXLINE( 473)		if (hx::IsNull( this->tabNames )) {
HXLINE( 474)			this->_hx_set_tabNames(HX_CTX, ::Array_obj< ::String >::__new(0));
HXLINE( 475)			this->_hx_set_tabColors(HX_CTX, ::Array_obj< int >::__new(0));
HXLINE( 476)			this->_hx_set_tabHandle(HX_CTX, handle);
HXLINE( 477)			this->tabVertical = vertical;
HXLINE( 478)			if (vertical) {
HXLINE( 479)				 ::zui::Zui _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 479)				_hx_tmp->windowHeaderW = (_hx_tmp->windowHeaderW + (( (Float)(this->t->__Field(HX_("ELEMENT_W",b4,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            			}
            			else {
HXLINE( 480)				 ::zui::Zui _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 480)				_hx_tmp1->windowHeaderH = (_hx_tmp1->windowHeaderH + (((( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) + this->buttonOffsetY) + (( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
            			}
HXLINE( 481)			this->restoreX = this->inputX;
HXLINE( 482)			this->restoreY = this->inputY;
HXLINE( 483)			bool _hx_tmp2;
HXDLIN( 483)			if (!(vertical)) {
HXLINE( 483)				_hx_tmp2 = this->getInputInRect(this->_windowX,this->_windowY,this->_windowW,this->windowHeaderH,null());
            			}
            			else {
HXLINE( 483)				_hx_tmp2 = false;
            			}
HXDLIN( 483)			if (_hx_tmp2) {
HXLINE( 484)				this->inputX = (this->inputY = ( (Float)(-1) ));
            			}
            		}
HXLINE( 487)		this->tabNames->push(text);
HXLINE( 488)		this->tabColors->push(color);
HXLINE( 489)		bool selected = (handle->position == (this->tabNames->length - 1));
HXLINE( 490)		if ((this->tabNames->length == 1)) {
HXLINE( 491)			if (vertical) {
HXLINE( 491)				 ::zui::Zui _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 491)				_hx_tmp3->_x = (_hx_tmp3->_x + (this->windowHeaderW + 6));
HXDLIN( 491)				 ::zui::Zui _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 491)				_hx_tmp4->_w = (_hx_tmp4->_w - 6);
            			}
            			else {
HXLINE( 491)				 ::zui::Zui _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 491)				_hx_tmp5->_y = (_hx_tmp5->_y + (this->windowHeaderH + 3));
            			}
            		}
HXLINE( 493)		return selected;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Zui_obj,tab,return )

void Zui_obj::drawTabs(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_496_drawTabs)
HXLINE( 497)		this->inputX = this->restoreX;
HXLINE( 498)		this->inputY = this->restoreY;
HXLINE( 499)		if (hx::IsNull( this->currentWindow )) {
HXLINE( 499)			return;
            		}
HXLINE( 500)		Float tabX = ((Float)0.0);
HXLINE( 501)		Float tabY = ((Float)0.0);
HXLINE( 502)		int tabH = ::Std_obj::_hx_int(((( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) * ((Float)1.1)));
HXLINE( 503)		Float origy = this->_y;
HXLINE( 504)		Float _hx_tmp;
HXDLIN( 504)		if (this->currentWindow->dragEnabled) {
HXLINE( 504)			_hx_tmp = ( (Float)(::Std_obj::_hx_int((( (Float)(15) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) );
            		}
            		else {
HXLINE( 504)			_hx_tmp = ( (Float)(0) );
            		}
HXDLIN( 504)		this->_y = _hx_tmp;
HXLINE( 505)		this->tabHandle->changed = false;
HXLINE( 507)		this->g->set_color(( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),hx::paccDynamic)) ));
HXLINE( 508)		if (this->tabVertical) {
HXLINE( 509)			this->g->fillRect(( (Float)(0) ),this->_y,(( (Float)(this->t->__Field(HX_("ELEMENT_W",b4,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),this->_windowH);
            		}
            		else {
HXLINE( 510)			this->g->fillRect(( (Float)(0) ),this->_y,this->_windowW,((this->buttonOffsetY + tabH) + 2));
            		}
HXLINE( 512)		this->g->set_color(( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),hx::paccDynamic)) ));
HXLINE( 513)		if (this->tabVertical) {
HXLINE( 514)			this->g->fillRect((( (Float)(this->t->__Field(HX_("ELEMENT_W",b4,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),this->_y,( (Float)(1) ),this->_windowH);
            		}
            		else {
HXLINE( 515)			this->g->fillRect(this->buttonOffsetY,(((this->_y + this->buttonOffsetY) + tabH) + 2),(this->_windowW - (this->buttonOffsetY * ( (Float)(2) ))),( (Float)(1) ));
            		}
HXLINE( 517)		Float basey;
HXDLIN( 517)		if (this->tabVertical) {
HXLINE( 517)			basey = this->_y;
            		}
            		else {
HXLINE( 517)			basey = (this->_y + 2);
            		}
HXLINE( 519)		{
HXLINE( 519)			int _g = 0;
HXDLIN( 519)			int _g1 = this->tabNames->length;
HXDLIN( 519)			while((_g < _g1)){
HXLINE( 519)				_g = (_g + 1);
HXDLIN( 519)				int i = (_g - 1);
HXLINE( 520)				this->_x = tabX;
HXLINE( 521)				this->_y = (basey + tabY);
HXLINE( 522)				int _hx_tmp1;
HXDLIN( 522)				if (this->tabVertical) {
HXLINE( 522)					_hx_tmp1 = ::Std_obj::_hx_int(((( (Float)(this->t->__Field(HX_("ELEMENT_W",b4,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) - ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            				}
            				else {
HXLINE( 524)					Float _hx_tmp2 = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) )->width(this->fontSize,this->tabNames->__get(i));
HXLINE( 522)					_hx_tmp1 = ::Std_obj::_hx_int(((_hx_tmp2 + (this->buttonOffsetY * ( (Float)(2) ))) + (( (Float)(18) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
            				}
HXDLIN( 522)				this->_w = _hx_tmp1;
HXLINE( 525)				bool released = this->getReleased(null());
HXLINE( 526)				bool pushed = this->getPushed(null());
HXLINE( 527)				bool hover = this->getHover(null());
HXLINE( 528)				if (released) {
HXLINE( 529)					 ::zui::Handle h = this->tabHandle->nest(this->tabHandle->position,null());
HXLINE( 530)					h->scrollOffset = this->currentWindow->scrollOffset;
HXLINE( 531)					h = this->tabHandle->nest(i,null());
HXLINE( 532)					this->tabScroll = h->scrollOffset;
HXLINE( 533)					this->tabHandle->position = i;
HXLINE( 534)					this->currentWindow->redraws = 3;
HXLINE( 535)					this->tabHandle->changed = true;
            				}
HXLINE( 537)				bool selected = (this->tabHandle->position == i);
HXLINE( 539)				int _hx_tmp3;
HXDLIN( 539)				bool _hx_tmp4;
HXDLIN( 539)				if (!(pushed)) {
HXLINE( 539)					_hx_tmp4 = hover;
            				}
            				else {
HXLINE( 539)					_hx_tmp4 = true;
            				}
HXDLIN( 539)				if (_hx_tmp4) {
HXLINE( 539)					_hx_tmp3 = ( (int)(this->t->__Field(HX_("BUTTON_HOVER_COL",f0,a8,9f,7e),hx::paccDynamic)) );
            				}
            				else {
HXLINE( 540)					if ((this->tabColors->__get(i) != -1)) {
HXLINE( 539)						_hx_tmp3 = this->tabColors->__get(i);
            					}
            					else {
HXLINE( 541)						if (selected) {
HXLINE( 539)							_hx_tmp3 = ( (int)(this->t->__Field(HX_("WINDOW_BG_COL",15,11,a8,46),hx::paccDynamic)) );
            						}
            						else {
HXLINE( 539)							_hx_tmp3 = ( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),hx::paccDynamic)) );
            						}
            					}
            				}
HXDLIN( 539)				this->g->set_color(_hx_tmp3);
HXLINE( 543)				if (this->tabVertical) {
HXLINE( 544)					tabY = (tabY + (tabH + 1));
            				}
            				else {
HXLINE( 545)					tabX = (tabX + (this->_w + 1));
            				}
HXLINE( 546)				{
HXLINE( 546)					 ::kha::graphics2::Graphics g = this->g;
HXDLIN( 546)					Float x = (this->_x + this->buttonOffsetY);
HXDLIN( 546)					Float y = (this->_y + this->buttonOffsetY);
HXDLIN( 546)					Float w = ( (Float)(this->_w) );
HXDLIN( 546)					Float strength = ((Float)0.0);
HXDLIN( 546)					if ((strength == ((Float)0.0))) {
HXLINE( 546)						strength = ( (Float)(1) );
            					}
HXDLIN( 546)					if (!(this->enabled)) {
HXLINE( 546)						this->fadeColor();
            					}
HXDLIN( 546)					g->fillRect(x,(y - ( (Float)(1) )),w,(tabH + 1));
            				}
HXLINE( 547)				int _hx_tmp5;
HXDLIN( 547)				if (selected) {
HXLINE( 547)					_hx_tmp5 = ( (int)(this->t->__Field(HX_("BUTTON_TEXT_COL",7b,eb,33,eb),hx::paccDynamic)) );
            				}
            				else {
HXLINE( 547)					_hx_tmp5 = ( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),hx::paccDynamic)) );
            				}
HXDLIN( 547)				this->g->set_color(_hx_tmp5);
HXLINE( 548)				this->drawString(this->g,this->tabNames->__get(i),this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),hx::paccDynamic),0,0);
HXLINE( 550)				bool _hx_tmp6;
HXDLIN( 550)				if (selected) {
HXLINE( 550)					_hx_tmp6 = !(this->tabVertical);
            				}
            				else {
HXLINE( 550)					_hx_tmp6 = false;
            				}
HXDLIN( 550)				if (_hx_tmp6) {
HXLINE( 551)					this->g->set_color(( (int)(this->t->__Field(HX_("WINDOW_BG_COL",15,11,a8,46),hx::paccDynamic)) ));
HXLINE( 552)					this->g->fillRect(((this->_x + this->buttonOffsetY) + 1),((this->_y + this->buttonOffsetY) + tabH),( (Float)((this->_w - 1)) ),( (Float)(1) ));
            				}
            			}
            		}
HXLINE( 556)		this->_x = ( (Float)(0) );
HXLINE( 557)		this->_y = origy;
HXLINE( 558)		Float _hx_tmp7;
HXDLIN( 558)		if (!(this->currentWindow->scrollEnabled)) {
HXLINE( 558)			_hx_tmp7 = this->_windowW;
            		}
            		else {
HXLINE( 558)			Float _hx_tmp8 = this->_windowW;
HXDLIN( 558)			_hx_tmp7 = (_hx_tmp8 - ( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ));
            		}
HXDLIN( 558)		this->_w = ::Std_obj::_hx_int(_hx_tmp7);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,drawTabs,(void))

bool Zui_obj::panel( ::zui::Handle handle,::String text,hx::Null< bool >  __o_isTree){
            		bool isTree = __o_isTree.Default(false);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_561_panel)
HXLINE( 562)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))))) {
HXLINE( 562)			this->endElement(null());
HXDLIN( 562)			return handle->selected;
            		}
HXLINE( 563)		if (this->getReleased(null())) {
HXLINE( 564)			handle->selected = !(handle->selected);
HXLINE( 565)			handle->changed = (this->changed = true);
            		}
HXLINE( 568)		if (isTree) {
HXLINE( 568)			this->drawTree(handle->selected);
            		}
            		else {
HXLINE( 568)			this->drawArrow(handle->selected);
            		}
HXLINE( 570)		this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),hx::paccDynamic)) ));
HXLINE( 571)		this->g->set_opacity(((Float)1.0));
HXLINE( 572)		this->drawString(this->g,text,this->titleOffsetX,0,null());
HXLINE( 574)		this->endElement(null());
HXLINE( 576)		return handle->selected;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,panel,return )

int Zui_obj::image( ::kha::Image image,hx::Null< int >  __o_tint, ::Dynamic h,hx::Null< int >  __o_sx,hx::Null< int >  __o_sy,hx::Null< int >  __o_sw,hx::Null< int >  __o_sh){
            		int tint = __o_tint.Default(-1);
            		int sx = __o_sx.Default(0);
            		int sy = __o_sy.Default(0);
            		int sw = __o_sw.Default(0);
            		int sh = __o_sh.Default(0);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_579_image)
HXLINE( 580)		int iw;
HXDLIN( 580)		if ((sw > 0)) {
HXLINE( 580)			iw = sw;
            		}
            		else {
HXLINE( 580)			iw = image->get_width();
            		}
HXDLIN( 580)		Float iw1 = (( (Float)(iw) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXLINE( 581)		int ih;
HXDLIN( 581)		if ((sh > 0)) {
HXLINE( 581)			ih = sh;
            		}
            		else {
HXLINE( 581)			ih = image->get_height();
            		}
HXDLIN( 581)		Float ih1 = (( (Float)(ih) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXLINE( 582)		Float w = ::Math_obj::min(iw1,( (Float)(this->_w) ));
HXLINE( 583)		Float x = this->_x;
HXLINE( 584)		bool scroll;
HXDLIN( 584)		if (hx::IsNotNull( this->currentWindow )) {
HXLINE( 584)			scroll = this->currentWindow->scrollEnabled;
            		}
            		else {
HXLINE( 584)			scroll = false;
            		}
HXLINE( 585)		Float r;
HXDLIN( 585)		if ((this->curRatio == -1)) {
HXLINE( 585)			r = ((Float)1.0);
            		}
            		else {
HXLINE( 585)			r = this->ratios->__get(this->curRatio);
            		}
HXLINE( 586)		if (this->imageScrollAlign) {
HXLINE( 587)			w = ::Math_obj::min(iw1,(( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) ))));
HXLINE( 588)			x = (x + this->buttonOffsetY);
HXLINE( 589)			if (!(scroll)) {
HXLINE( 590)				w = (w - (( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ) * r));
HXLINE( 591)				x = (x + ((( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ) * r) / ( (Float)(2) )));
            			}
            		}
            		else {
HXLINE( 594)			if (scroll) {
HXLINE( 594)				w = (w + (( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ) * r));
            			}
            		}
HXLINE( 597)		Float ratio;
HXDLIN( 597)		if (hx::IsNull( h )) {
HXLINE( 597)			ratio = (w / iw1);
            		}
            		else {
HXLINE( 597)			ratio = (( (Float)(h) ) / ih1);
            		}
HXLINE( 600)		if (hx::IsNull( h )) {
HXLINE( 601)			h = (ih1 * ratio);
            		}
            		else {
HXLINE( 602)			w = (iw1 * ratio);
            		}
HXLINE( 604)		if (!(this->isVisible(( (Float)(h) )))) {
HXLINE( 605)			this->endElement(h);
HXLINE( 606)			return 0;
            		}
HXLINE( 608)		bool started = this->getStarted(h);
HXLINE( 609)		bool down = this->getPushed(h);
HXLINE( 610)		bool released = this->getReleased(h);
HXLINE( 611)		bool hover = this->getHover(h);
HXLINE( 612)		this->g->set_color(tint);
HXLINE( 613)		if (!(this->enabled)) {
HXLINE( 613)			this->fadeColor();
            		}
HXLINE( 614)		Float h_float = ( (Float)(h) );
HXLINE( 615)		if ((sw > 0)) {
HXLINE( 616)			if (this->imageInvertY) {
HXLINE( 617)				this->g->drawScaledSubImage(image,( (float)(sx) ),( (float)(sy) ),( (float)(sw) ),( (float)(sh) ),( (float)(x) ),( (float)((this->_y + h_float)) ),( (float)(w) ),( (float)(-(h_float)) ));
            			}
            			else {
HXLINE( 618)				this->g->drawScaledSubImage(image,( (float)(sx) ),( (float)(sy) ),( (float)(sw) ),( (float)(sh) ),( (float)(x) ),( (float)(this->_y) ),( (float)(w) ),( (float)(h_float) ));
            			}
            		}
            		else {
HXLINE( 621)			if (this->imageInvertY) {
HXLINE( 622)				this->g->drawScaledImage(image,( (float)(x) ),( (float)((this->_y + h_float)) ),( (float)(w) ),( (float)(-(h_float)) ));
            			}
            			else {
HXLINE( 623)				this->g->drawScaledImage(image,( (float)(x) ),( (float)(this->_y) ),( (float)(w) ),( (float)(h_float) ));
            			}
            		}
HXLINE( 626)		this->endElement(h);
HXLINE( 627)		if (started) {
HXLINE( 627)			return 1;
            		}
            		else {
HXLINE( 627)			if (released) {
HXLINE( 627)				return 3;
            			}
            			else {
HXLINE( 627)				if (down) {
HXLINE( 627)					return 2;
            				}
            				else {
HXLINE( 627)					return 0;
            				}
            			}
            		}
HXDLIN( 627)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC7(Zui_obj,image,return )

int Zui_obj::text(::String text,hx::Null< int >  __o_align,hx::Null< int >  __o_bg){
            		int align = __o_align.Default(0);
            		int bg = __o_bg.Default(0);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_630_text)
HXLINE( 631)		if ((text.indexOf(HX_("\n",0a,00,00,00),null()) >= 0)) {
HXLINE( 631)			{
HXLINE( 631)				int _g = 0;
HXDLIN( 631)				::Array< ::String > _g1 = text.split(HX_("\n",0a,00,00,00));
HXDLIN( 631)				while((_g < _g1->length)){
HXLINE( 631)					::String line = _g1->__get(_g);
HXDLIN( 631)					_g = (_g + 1);
HXDLIN( 631)					this->text(line,align,bg);
            				}
            			}
HXDLIN( 631)			return 0;
            		}
HXLINE( 632)		Float h = (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXDLIN( 632)		Float h1 = ::Math_obj::max(h,( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) )->height(this->fontSize));
HXLINE( 633)		if (!(this->isVisible(h1))) {
HXLINE( 633)			this->endElement((h1 + (( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
HXDLIN( 633)			return 0;
            		}
HXLINE( 634)		bool started = this->getStarted(h1);
HXLINE( 635)		bool down = this->getPushed(h1);
HXLINE( 636)		bool released = this->getReleased(h1);
HXLINE( 637)		bool hover = this->getHover(h1);
HXLINE( 638)		if ((bg != 0)) {
HXLINE( 639)			this->g->set_color(bg);
HXLINE( 640)			this->g->fillRect((this->_x + this->buttonOffsetY),(this->_y + this->buttonOffsetY),(( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) ))),(( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            		}
HXLINE( 642)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),hx::paccDynamic)) ));
HXLINE( 643)		this->drawString(this->g,text,(( (Float)(this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),0,align);
HXLINE( 645)		this->endElement((h1 + (( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
HXLINE( 646)		if (started) {
HXLINE( 646)			return 1;
            		}
            		else {
HXLINE( 646)			if (released) {
HXLINE( 646)				return 3;
            			}
            			else {
HXLINE( 646)				if (down) {
HXLINE( 646)					return 2;
            				}
            				else {
HXLINE( 646)					return 0;
            				}
            			}
            		}
HXDLIN( 646)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,text,return )

void Zui_obj::splitText(::String lines,hx::Null< int >  __o_align,hx::Null< int >  __o_bg){
            		int align = __o_align.Default(0);
            		int bg = __o_bg.Default(0);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_650_splitText)
HXDLIN( 650)		int _g = 0;
HXDLIN( 650)		::Array< ::String > _g1 = lines.split(HX_("\n",0a,00,00,00));
HXDLIN( 650)		while((_g < _g1->length)){
HXDLIN( 650)			::String line = _g1->__get(_g);
HXDLIN( 650)			_g = (_g + 1);
HXDLIN( 650)			this->text(line,align,bg);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,splitText,(void))

void Zui_obj::startTextEdit( ::zui::Handle handle){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_653_startTextEdit)
HXLINE( 654)		this->isTyping = true;
HXLINE( 655)		this->_hx_set_submitTextHandle(HX_CTX, this->textSelectedHandle);
HXLINE( 656)		this->_hx_set_textToSubmit(HX_CTX, this->textSelected);
HXLINE( 657)		this->_hx_set_textSelectedHandle(HX_CTX, handle);
HXLINE( 658)		this->_hx_set_textSelected(HX_CTX, handle->text);
HXLINE( 659)		this->cursorX = handle->text.length;
HXLINE( 660)		if (this->tabPressed) {
HXLINE( 661)			this->tabPressed = false;
HXLINE( 662)			this->isKeyPressed = false;
            		}
            		else {
HXLINE( 664)			if (!(this->highlightOnSelect)) {
HXLINE( 665)				Float x = (this->inputX - ((this->_windowX + this->_x) + (( (Float)(this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
HXLINE( 666)				this->cursorX = 0;
HXLINE( 667)				while(true){
HXLINE( 667)					bool _hx_tmp;
HXDLIN( 667)					if ((this->cursorX < this->textSelected.length)) {
HXLINE( 667)						 ::kha::Kravur _hx_tmp1 = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) );
HXDLIN( 667)						int _hx_tmp2 = this->fontSize;
HXDLIN( 667)						_hx_tmp = (_hx_tmp1->width(_hx_tmp2,this->textSelected.substr(0,this->cursorX)) < x);
            					}
            					else {
HXLINE( 667)						_hx_tmp = false;
            					}
HXDLIN( 667)					if (!(_hx_tmp)) {
HXLINE( 667)						goto _hx_goto_26;
            					}
HXLINE( 668)					this->cursorX++;
            				}
            				_hx_goto_26:;
            			}
            		}
HXLINE( 671)		this->_hx_set_tabPressedHandle(HX_CTX, handle);
HXLINE( 672)		int _hx_tmp3;
HXDLIN( 672)		if (this->highlightOnSelect) {
HXLINE( 672)			_hx_tmp3 = 0;
            		}
            		else {
HXLINE( 672)			_hx_tmp3 = this->cursorX;
            		}
HXDLIN( 672)		this->highlightAnchor = _hx_tmp3;
HXLINE( 673)		if (hx::IsNotNull( ::kha::input::Keyboard_obj::get(null()) )) {
HXLINE( 673)			::kha::input::Keyboard_obj::get(null())->show();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,startTextEdit,(void))

void Zui_obj::submitTextEdit(){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_676_submitTextEdit)
HXLINE( 677)		this->submitTextHandle->_hx_set_text(HX_CTX, this->textToSubmit);
HXLINE( 678)		this->submitTextHandle->changed = (this->changed = true);
HXLINE( 679)		this->_hx_set_submitTextHandle(HX_CTX, null());
HXLINE( 680)		this->_hx_set_textToSubmit(HX_CTX, HX_("",00,00,00,00));
HXLINE( 681)		this->_hx_set_textSelected(HX_CTX, HX_("",00,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,submitTextEdit,(void))

void Zui_obj::updateTextEdit(hx::Null< int >  __o_align){
            		int align = __o_align.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_684_updateTextEdit)
HXLINE( 685)		::String text = this->textSelected;
HXLINE( 686)		if (this->isKeyPressed) {
HXLINE( 687)			if (hx::IsEq( this->key,37 )) {
HXLINE( 688)				if ((this->cursorX > 0)) {
HXLINE( 688)					this->cursorX--;
            				}
            			}
            			else {
HXLINE( 690)				if (hx::IsEq( this->key,39 )) {
HXLINE( 691)					if ((this->cursorX < text.length)) {
HXLINE( 691)						this->cursorX++;
            					}
            				}
            				else {
HXLINE( 693)					if (hx::IsEq( this->key,8 )) {
HXLINE( 694)						bool _hx_tmp;
HXDLIN( 694)						if ((this->cursorX > 0)) {
HXLINE( 694)							_hx_tmp = (this->highlightAnchor == this->cursorX);
            						}
            						else {
HXLINE( 694)							_hx_tmp = false;
            						}
HXDLIN( 694)						if (_hx_tmp) {
HXLINE( 695)							::String text1 = text.substr(0,(this->cursorX - 1));
HXDLIN( 695)							text = (text1 + text.substr(this->cursorX,text.length));
HXLINE( 696)							this->cursorX--;
            						}
            						else {
HXLINE( 698)							if ((this->highlightAnchor < this->cursorX)) {
HXLINE( 699)								::String text2 = text.substr(0,this->highlightAnchor);
HXDLIN( 699)								text = (text2 + text.substr(this->cursorX,text.length));
HXLINE( 700)								this->cursorX = this->highlightAnchor;
            							}
            							else {
HXLINE( 703)								::String text3 = text.substr(0,this->cursorX);
HXDLIN( 703)								text = (text3 + text.substr(this->highlightAnchor,text.length));
            							}
            						}
            					}
            					else {
HXLINE( 706)						if (hx::IsEq( this->key,46 )) {
HXLINE( 707)							if ((this->highlightAnchor == this->cursorX)) {
HXLINE( 708)								::String text4 = text.substr(0,this->cursorX);
HXDLIN( 708)								text = (text4 + text.substr((this->cursorX + 1),null()));
            							}
            							else {
HXLINE( 710)								if ((this->highlightAnchor < this->cursorX)) {
HXLINE( 711)									::String text5 = text.substr(0,this->highlightAnchor);
HXDLIN( 711)									text = (text5 + text.substr(this->cursorX,text.length));
HXLINE( 712)									this->cursorX = this->highlightAnchor;
            								}
            								else {
HXLINE( 715)									::String text6 = text.substr(0,this->cursorX);
HXDLIN( 715)									text = (text6 + text.substr(this->highlightAnchor,text.length));
            								}
            							}
            						}
            						else {
HXLINE( 718)							if (hx::IsEq( this->key,13 )) {
HXLINE( 719)								this->deselectText();
            							}
            							else {
HXLINE( 721)								if (hx::IsEq( this->key,27 )) {
HXLINE( 722)									this->_hx_set_textSelected(HX_CTX, this->textSelectedHandle->text);
HXLINE( 723)									this->deselectText();
            								}
            								else {
HXLINE( 725)									bool _hx_tmp1;
HXDLIN( 725)									if (hx::IsEq( this->key,9 )) {
HXLINE( 725)										_hx_tmp1 = this->tabSwitchEnabled;
            									}
            									else {
HXLINE( 725)										_hx_tmp1 = false;
            									}
HXDLIN( 725)									if (_hx_tmp1) {
HXLINE( 726)										this->tabPressed = true;
HXLINE( 727)										this->deselectText();
HXLINE( 728)										this->_hx_set_key(HX_CTX, null());
            									}
            									else {
HXLINE( 730)										if (hx::IsEq( this->key,36 )) {
HXLINE( 731)											this->cursorX = 0;
            										}
            										else {
HXLINE( 733)											if (hx::IsEq( this->key,35 )) {
HXLINE( 734)												this->cursorX = text.length;
            											}
            											else {
HXLINE( 736)												bool _hx_tmp2;
HXDLIN( 736)												bool _hx_tmp3;
HXDLIN( 736)												bool _hx_tmp4;
HXDLIN( 736)												bool _hx_tmp5;
HXDLIN( 736)												bool _hx_tmp6;
HXDLIN( 736)												bool _hx_tmp7;
HXDLIN( 736)												bool _hx_tmp8;
HXDLIN( 736)												bool _hx_tmp9;
HXDLIN( 736)												if (hx::IsNotEq( this->key,16 )) {
HXLINE( 736)													_hx_tmp9 = hx::IsNotEq( this->key,20 );
            												}
            												else {
HXLINE( 736)													_hx_tmp9 = false;
            												}
HXDLIN( 736)												if (_hx_tmp9) {
HXLINE( 736)													_hx_tmp8 = hx::IsNotEq( this->key,17 );
            												}
            												else {
HXLINE( 736)													_hx_tmp8 = false;
            												}
HXDLIN( 736)												if (_hx_tmp8) {
HXLINE( 736)													_hx_tmp7 = hx::IsNotEq( this->key,18 );
            												}
            												else {
HXLINE( 736)													_hx_tmp7 = false;
            												}
HXDLIN( 736)												if (_hx_tmp7) {
HXLINE( 736)													_hx_tmp6 = hx::IsNotEq( this->key,38 );
            												}
            												else {
HXLINE( 736)													_hx_tmp6 = false;
            												}
HXDLIN( 736)												if (_hx_tmp6) {
HXLINE( 736)													_hx_tmp5 = hx::IsNotEq( this->key,40 );
            												}
            												else {
HXLINE( 736)													_hx_tmp5 = false;
            												}
HXDLIN( 736)												if (_hx_tmp5) {
HXLINE( 736)													_hx_tmp4 = hx::IsNotNull( this->_hx_char );
            												}
            												else {
HXLINE( 736)													_hx_tmp4 = false;
            												}
HXDLIN( 736)												if (_hx_tmp4) {
HXLINE( 736)													_hx_tmp3 = (this->_hx_char != HX_("",00,00,00,00));
            												}
            												else {
HXLINE( 736)													_hx_tmp3 = false;
            												}
HXDLIN( 736)												if (_hx_tmp3) {
HXLINE( 736)													_hx_tmp2 = hx::IsGreaterEq( this->_hx_char.charCodeAt(0),32 );
            												}
            												else {
HXLINE( 736)													_hx_tmp2 = false;
            												}
HXDLIN( 736)												if (_hx_tmp2) {
HXLINE( 745)													::String text7 = text.substr(0,this->highlightAnchor);
HXDLIN( 745)													::String text8 = (text7 + this->_hx_char);
HXDLIN( 745)													text = (text8 + text.substr(this->cursorX,null()));
HXLINE( 746)													int _hx_tmp10;
HXDLIN( 746)													if (((this->cursorX + 1) > text.length)) {
HXLINE( 746)														_hx_tmp10 = text.length;
            													}
            													else {
HXLINE( 746)														_hx_tmp10 = (this->cursorX + 1);
            													}
HXDLIN( 746)													this->cursorX = _hx_tmp10;
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 748)			bool selecting;
HXDLIN( 748)			if (this->isShiftDown) {
HXLINE( 748)				bool selecting1;
HXDLIN( 748)				if (hx::IsNotEq( this->key,37 )) {
HXLINE( 748)					selecting1 = hx::IsEq( this->key,39 );
            				}
            				else {
HXLINE( 748)					selecting1 = true;
            				}
HXDLIN( 748)				if (!(selecting1)) {
HXLINE( 748)					selecting = hx::IsEq( this->key,16 );
            				}
            				else {
HXLINE( 748)					selecting = true;
            				}
            			}
            			else {
HXLINE( 748)				selecting = false;
            			}
HXLINE( 749)			bool _hx_tmp11;
HXDLIN( 749)			if (!(selecting)) {
HXLINE( 749)				_hx_tmp11 = !(this->isCtrlDown);
            			}
            			else {
HXLINE( 749)				_hx_tmp11 = false;
            			}
HXDLIN( 749)			if (_hx_tmp11) {
HXLINE( 749)				this->highlightAnchor = this->cursorX;
            			}
            		}
HXLINE( 752)		if ((::zui::Zui_obj::textToPaste != HX_("",00,00,00,00))) {
HXLINE( 753)			::String text9 = text.substr(0,this->highlightAnchor);
HXDLIN( 753)			::String text10 = (text9 + ::zui::Zui_obj::textToPaste);
HXDLIN( 753)			text = (text10 + text.substr(this->cursorX,null()));
HXLINE( 754)			 ::zui::Zui _hx_tmp12 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 754)			_hx_tmp12->cursorX = (_hx_tmp12->cursorX + ::zui::Zui_obj::textToPaste.length);
HXLINE( 755)			this->highlightAnchor = this->cursorX;
HXLINE( 756)			::zui::Zui_obj::textToPaste = HX_("",00,00,00,00);
            		}
HXLINE( 758)		if ((this->highlightAnchor == this->cursorX)) {
HXLINE( 758)			::zui::Zui_obj::textToCopy = text;
            		}
            		else {
HXLINE( 759)			if ((this->highlightAnchor < this->cursorX)) {
HXLINE( 759)				::zui::Zui_obj::textToCopy = text.substring(this->highlightAnchor,this->cursorX);
            			}
            			else {
HXLINE( 760)				::zui::Zui_obj::textToCopy = text.substring(this->cursorX,this->highlightAnchor);
            			}
            		}
HXLINE( 761)		if (::zui::Zui_obj::isCut) {
HXLINE( 762)			if ((this->highlightAnchor == this->cursorX)) {
HXLINE( 762)				text = HX_("",00,00,00,00);
            			}
            			else {
HXLINE( 763)				if ((this->highlightAnchor < this->cursorX)) {
HXLINE( 764)					::String text11 = text.substr(0,this->highlightAnchor);
HXDLIN( 764)					text = (text11 + text.substr(this->cursorX,text.length));
HXLINE( 765)					this->cursorX = this->highlightAnchor;
            				}
            				else {
HXLINE( 768)					::String text12 = text.substr(0,this->cursorX);
HXDLIN( 768)					text = (text12 + text.substr(this->highlightAnchor,text.length));
            				}
            			}
            		}
HXLINE( 772)		Float off = (( (Float)(this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXLINE( 773)		Float lineHeight = (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXLINE( 774)		Float cursorHeight = (lineHeight - (this->buttonOffsetY * ((Float)3.0)));
HXLINE( 776)		if ((this->highlightAnchor != this->cursorX)) {
HXLINE( 777)			int istart = this->cursorX;
HXLINE( 778)			int iend = this->highlightAnchor;
HXLINE( 779)			if ((this->highlightAnchor < this->cursorX)) {
HXLINE( 780)				istart = this->highlightAnchor;
HXLINE( 781)				iend = this->cursorX;
            			}
HXLINE( 783)			::String hlstr = text.substr(istart,(iend - istart));
HXLINE( 784)			Float hlstrw = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) )->width(this->fontSize,hlstr);
HXLINE( 785)			 ::kha::Kravur startoff = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) );
HXDLIN( 785)			int startoff1 = this->fontSize;
HXDLIN( 785)			Float startoff2 = startoff->width(startoff1,text.substr(0,istart));
HXLINE( 786)			Float hlStart;
HXDLIN( 786)			if ((align == 0)) {
HXLINE( 786)				hlStart = ((this->_x + startoff2) + off);
            			}
            			else {
HXLINE( 786)				hlStart = (((this->_x + this->_w) - hlstrw) - off);
            			}
HXLINE( 787)			if ((align == 2)) {
HXLINE( 788)				 ::kha::Kravur hlStart1 = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) );
HXDLIN( 788)				int hlStart2 = this->fontSize;
HXDLIN( 788)				hlStart = (hlStart - hlStart1->width(hlStart2,text.substr(iend,text.length)));
            			}
HXLINE( 790)			this->g->set_color(( (int)(this->t->__Field(HX_("ACCENT_SELECT_COL",32,b6,1e,48),hx::paccDynamic)) ));
HXLINE( 791)			this->g->fillRect(hlStart,(this->_y + (this->buttonOffsetY * ((Float)1.5))),(hlstrw * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),cursorHeight);
            		}
HXLINE( 795)		Float time = ::kha::Scheduler_obj::time();
HXLINE( 796)		bool _hx_tmp13;
HXDLIN( 796)		if (!(this->isKeyDown)) {
HXLINE( 796)			_hx_tmp13 = (hx::Mod(time,((Float)1.)) < ((Float)0.5));
            		}
            		else {
HXLINE( 796)			_hx_tmp13 = true;
            		}
HXDLIN( 796)		if (_hx_tmp13) {
HXLINE( 797)			::String str;
HXDLIN( 797)			if ((align == 0)) {
HXLINE( 797)				str = text.substr(0,this->cursorX);
            			}
            			else {
HXLINE( 797)				str = text.substring(this->cursorX,text.length);
            			}
HXLINE( 798)			Float strw = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) )->width(this->fontSize,str);
HXLINE( 799)			Float cursorX;
HXDLIN( 799)			if ((align == 0)) {
HXLINE( 799)				cursorX = ((this->_x + strw) + off);
            			}
            			else {
HXLINE( 799)				cursorX = (((this->_x + this->_w) - strw) - off);
            			}
HXLINE( 800)			this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),hx::paccDynamic)) ));
HXLINE( 801)			this->g->fillRect(cursorX,(this->_y + (this->buttonOffsetY * ((Float)1.5))),( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ),cursorHeight);
            		}
HXLINE( 804)		this->_hx_set_textSelected(HX_CTX, text);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,updateTextEdit,(void))

::String Zui_obj::textInput( ::zui::Handle handle,::String __o_label,hx::Null< int >  __o_align){
            		::String label = __o_label;
            		if (hx::IsNull(__o_label)) label = HX_("",00,00,00,00);
            		int align = __o_align.Default(0);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_807_textInput)
HXLINE( 808)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))))) {
HXLINE( 808)			this->endElement(null());
HXDLIN( 808)			return handle->text;
            		}
HXLINE( 810)		bool hover = this->getHover(null());
HXLINE( 811)		bool _hx_tmp;
HXDLIN( 811)		if (hover) {
HXLINE( 811)			_hx_tmp = hx::IsNotNull( ::zui::Zui_obj::onTextHover );
            		}
            		else {
HXLINE( 811)			_hx_tmp = false;
            		}
HXDLIN( 811)		if (_hx_tmp) {
HXLINE( 811)			::zui::Zui_obj::onTextHover();
            		}
HXLINE( 812)		int _hx_tmp1;
HXDLIN( 812)		if (hover) {
HXLINE( 812)			_hx_tmp1 = ( (int)(this->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),hx::paccDynamic)) );
            		}
            		else {
HXLINE( 812)			_hx_tmp1 = ( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),hx::paccDynamic)) );
            		}
HXDLIN( 812)		this->g->set_color(_hx_tmp1);
HXLINE( 813)		{
HXLINE( 813)			 ::kha::graphics2::Graphics g = this->g;
HXDLIN( 813)			bool fill = ( (bool)(this->t->__Field(HX_("FILL_ACCENT_BG",de,70,14,63),hx::paccDynamic)) );
HXDLIN( 813)			Float x = (this->_x + this->buttonOffsetY);
HXDLIN( 813)			Float y = (this->_y + this->buttonOffsetY);
HXDLIN( 813)			Float w = (( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) )));
HXDLIN( 813)			Float h = (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXDLIN( 813)			Float strength = ((Float)0.0);
HXDLIN( 813)			if ((strength == ((Float)0.0))) {
HXLINE( 813)				strength = ( (Float)(1) );
            			}
HXDLIN( 813)			if (!(this->enabled)) {
HXLINE( 813)				this->fadeColor();
            			}
HXDLIN( 813)			if (fill) {
HXLINE( 813)				g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            			}
            			else {
HXLINE( 813)				g->drawRect(x,y,w,h,strength);
            			}
            		}
HXLINE( 815)		bool startEdit;
HXDLIN( 815)		if (!(this->getReleased(null()))) {
HXLINE( 815)			startEdit = this->tabPressed;
            		}
            		else {
HXLINE( 815)			startEdit = true;
            		}
HXLINE( 816)		bool _hx_tmp2;
HXDLIN( 816)		if (hx::IsNotEq( this->textSelectedHandle,handle )) {
HXLINE( 816)			_hx_tmp2 = startEdit;
            		}
            		else {
HXLINE( 816)			_hx_tmp2 = false;
            		}
HXDLIN( 816)		if (_hx_tmp2) {
HXLINE( 816)			this->startTextEdit(handle);
            		}
HXLINE( 817)		if (hx::IsEq( this->textSelectedHandle,handle )) {
HXLINE( 817)			this->updateTextEdit(align);
            		}
HXLINE( 818)		if (hx::IsEq( this->submitTextHandle,handle )) {
HXLINE( 818)			this->submitTextEdit();
            		}
            		else {
HXLINE( 819)			handle->changed = false;
            		}
HXLINE( 821)		if ((label != HX_("",00,00,00,00))) {
HXLINE( 822)			this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),hx::paccDynamic)) ));
HXLINE( 823)			int labelAlign;
HXDLIN( 823)			if ((align == 2)) {
HXLINE( 823)				labelAlign = 0;
            			}
            			else {
HXLINE( 823)				labelAlign = 2;
            			}
HXLINE( 824)			int xOffset;
HXDLIN( 824)			if ((labelAlign == 0)) {
HXLINE( 824)				xOffset = 7;
            			}
            			else {
HXLINE( 824)				xOffset = 0;
            			}
HXLINE( 825)			this->drawString(this->g,label,xOffset,0,labelAlign);
            		}
HXLINE( 828)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),hx::paccDynamic)) ));
HXLINE( 829)		if (hx::IsNotEq( this->textSelectedHandle,handle )) {
HXLINE( 829)			this->drawString(this->g,handle->text,null(),0,align);
            		}
            		else {
HXLINE( 829)			this->drawString(this->g,this->textSelected,null(),0,align);
            		}
HXLINE( 831)		this->endElement(null());
HXLINE( 832)		return handle->text;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,textInput,return )

void Zui_obj::deselectText(){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_835_deselectText)
HXLINE( 836)		this->_hx_set_submitTextHandle(HX_CTX, this->textSelectedHandle);
HXLINE( 837)		this->_hx_set_textToSubmit(HX_CTX, this->textSelected);
HXLINE( 838)		this->_hx_set_textSelectedHandle(HX_CTX, null());
HXLINE( 839)		this->isTyping = false;
HXLINE( 840)		if (hx::IsNotNull( this->currentWindow )) {
HXLINE( 840)			this->currentWindow->redraws = 2;
            		}
HXLINE( 841)		if (hx::IsNotNull( ::kha::input::Keyboard_obj::get(null()) )) {
HXLINE( 841)			::kha::input::Keyboard_obj::get(null())->hide();
            		}
HXLINE( 842)		this->highlightAnchor = this->cursorX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,deselectText,(void))

bool Zui_obj::button(::String text,hx::Null< int >  __o_align,::String __o_label){
            		int align = __o_align.Default(1);
            		::String label = __o_label;
            		if (hx::IsNull(__o_label)) label = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_845_button)
HXLINE( 846)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))))) {
HXLINE( 846)			this->endElement(null());
HXDLIN( 846)			return false;
            		}
HXLINE( 847)		bool released = this->getReleased(null());
HXLINE( 848)		bool pushed = this->getPushed(null());
HXLINE( 849)		bool hover = this->getHover(null());
HXLINE( 850)		if (released) {
HXLINE( 850)			this->changed = true;
            		}
HXLINE( 852)		int _hx_tmp;
HXDLIN( 852)		if (pushed) {
HXLINE( 852)			_hx_tmp = ( (int)(this->t->__Field(HX_("BUTTON_PRESSED_COL",96,4f,5e,ed),hx::paccDynamic)) );
            		}
            		else {
HXLINE( 853)			if (hover) {
HXLINE( 852)				_hx_tmp = ( (int)(this->t->__Field(HX_("BUTTON_HOVER_COL",f0,a8,9f,7e),hx::paccDynamic)) );
            			}
            			else {
HXLINE( 852)				_hx_tmp = ( (int)(this->t->__Field(HX_("BUTTON_COL",13,50,64,c5),hx::paccDynamic)) );
            			}
            		}
HXDLIN( 852)		this->g->set_color(_hx_tmp);
HXLINE( 856)		{
HXLINE( 856)			 ::kha::graphics2::Graphics g = this->g;
HXDLIN( 856)			bool fill = ( (bool)(this->t->__Field(HX_("FILL_BUTTON_BG",36,79,48,8d),hx::paccDynamic)) );
HXDLIN( 856)			Float x = (this->_x + this->buttonOffsetY);
HXDLIN( 856)			Float y = (this->_y + this->buttonOffsetY);
HXDLIN( 856)			Float w = (( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) )));
HXDLIN( 856)			Float h = (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXDLIN( 856)			Float strength = ((Float)0.0);
HXDLIN( 856)			if ((strength == ((Float)0.0))) {
HXLINE( 856)				strength = ( (Float)(1) );
            			}
HXDLIN( 856)			if (!(this->enabled)) {
HXLINE( 856)				this->fadeColor();
            			}
HXDLIN( 856)			if (fill) {
HXLINE( 856)				g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            			}
            			else {
HXLINE( 856)				g->drawRect(x,y,w,h,strength);
            			}
            		}
HXLINE( 858)		this->g->set_color(( (int)(this->t->__Field(HX_("BUTTON_TEXT_COL",7b,eb,33,eb),hx::paccDynamic)) ));
HXLINE( 859)		this->drawString(this->g,text,(( (Float)(this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),0,align);
HXLINE( 860)		if ((label != HX_("",00,00,00,00))) {
HXLINE( 861)			this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),hx::paccDynamic)) ));
HXLINE( 862)			int _hx_tmp1;
HXDLIN( 862)			if ((align == 2)) {
HXLINE( 862)				_hx_tmp1 = 0;
            			}
            			else {
HXLINE( 862)				_hx_tmp1 = 2;
            			}
HXDLIN( 862)			this->drawString(this->g,label,(( (Float)(this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),0,_hx_tmp1);
            		}
HXLINE( 865)		this->endElement(null());
HXLINE( 867)		return released;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,button,return )

bool Zui_obj::check( ::zui::Handle handle,::String text){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_870_check)
HXLINE( 871)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))))) {
HXLINE( 871)			this->endElement(null());
HXDLIN( 871)			return handle->selected;
            		}
HXLINE( 872)		if (this->getReleased(null())) {
HXLINE( 873)			handle->selected = !(handle->selected);
HXLINE( 874)			handle->changed = (this->changed = true);
            		}
            		else {
HXLINE( 876)			handle->changed = false;
            		}
HXLINE( 878)		bool hover = this->getHover(null());
HXLINE( 879)		this->drawCheck(handle->selected,hover);
HXLINE( 881)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),hx::paccDynamic)) ));
HXLINE( 882)		this->drawString(this->g,text,this->titleOffsetX,0,0);
HXLINE( 884)		this->endElement(null());
HXLINE( 886)		return handle->selected;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,check,return )

bool Zui_obj::radio( ::zui::Handle handle,int position,::String text){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_889_radio)
HXLINE( 890)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))))) {
HXLINE( 890)			this->endElement(null());
HXDLIN( 890)			return (handle->position == position);
            		}
HXLINE( 891)		if ((position == 0)) {
HXLINE( 891)			handle->changed = false;
            		}
HXLINE( 892)		if (this->getReleased(null())) {
HXLINE( 893)			handle->position = position;
HXLINE( 894)			handle->changed = (this->changed = true);
            		}
HXLINE( 897)		bool hover = this->getHover(null());
HXLINE( 898)		this->drawRadio((handle->position == position),hover);
HXLINE( 900)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),hx::paccDynamic)) ));
HXLINE( 901)		this->drawString(this->g,text,this->titleOffsetX,0,null());
HXLINE( 903)		this->endElement(null());
HXLINE( 905)		return (handle->position == position);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,radio,return )

int Zui_obj::combo( ::zui::Handle handle,::Array< ::String > texts,::String __o_label,hx::Null< bool >  __o_showLabel,hx::Null< int >  __o_align){
            		::String label = __o_label;
            		if (hx::IsNull(__o_label)) label = HX_("",00,00,00,00);
            		bool showLabel = __o_showLabel.Default(false);
            		int align = __o_align.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_908_combo)
HXLINE( 909)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))))) {
HXLINE( 909)			this->endElement(null());
HXDLIN( 909)			return handle->position;
            		}
HXLINE( 910)		if (this->getReleased(null())) {
HXLINE( 911)			if (hx::IsNull( this->comboSelectedHandle )) {
HXLINE( 912)				this->inputEnabled = false;
HXLINE( 913)				this->_hx_set_comboSelectedHandle(HX_CTX, handle);
HXLINE( 914)				this->_hx_set_comboSelectedWindow(HX_CTX, this->currentWindow);
HXLINE( 915)				this->comboSelectedAlign = align;
HXLINE( 916)				this->_hx_set_comboSelectedTexts(HX_CTX, texts);
HXLINE( 917)				this->_hx_set_comboSelectedLabel(HX_CTX, label);
HXLINE( 918)				this->comboSelectedX = ::Std_obj::_hx_int((this->_x + this->_windowX));
HXLINE( 919)				this->comboSelectedY = ::Std_obj::_hx_int(((this->_y + this->_windowY) + (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
HXLINE( 920)				this->comboSelectedW = ::Std_obj::_hx_int(( (Float)(this->_w) ));
            			}
            		}
HXLINE( 923)		if (hx::IsEq( handle,this->submitComboHandle )) {
HXLINE( 924)			handle->position = this->comboToSubmit;
HXLINE( 925)			this->_hx_set_submitComboHandle(HX_CTX, null());
HXLINE( 926)			handle->changed = (this->changed = true);
            		}
            		else {
HXLINE( 928)			handle->changed = false;
            		}
HXLINE( 930)		bool hover = this->getHover(null());
HXLINE( 931)		if (hover) {
HXLINE( 932)			this->g->set_color(( (int)(this->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),hx::paccDynamic)) ));
HXLINE( 933)			{
HXLINE( 933)				 ::kha::graphics2::Graphics g = this->g;
HXDLIN( 933)				bool fill = ( (bool)(this->t->__Field(HX_("FILL_ACCENT_BG",de,70,14,63),hx::paccDynamic)) );
HXDLIN( 933)				Float x = (this->_x + this->buttonOffsetY);
HXDLIN( 933)				Float y = (this->_y + this->buttonOffsetY);
HXDLIN( 933)				Float w = (( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) )));
HXDLIN( 933)				Float h = (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXDLIN( 933)				Float strength = ((Float)0.0);
HXDLIN( 933)				if ((strength == ((Float)0.0))) {
HXLINE( 933)					strength = ( (Float)(1) );
            				}
HXDLIN( 933)				if (!(this->enabled)) {
HXLINE( 933)					this->fadeColor();
            				}
HXDLIN( 933)				if (fill) {
HXLINE( 933)					g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            				}
            				else {
HXLINE( 933)					g->drawRect(x,y,w,h,strength);
            				}
            			}
            		}
            		else {
HXLINE( 936)			this->g->set_color(( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),hx::paccDynamic)) ));
HXLINE( 937)			{
HXLINE( 937)				 ::kha::graphics2::Graphics g1 = this->g;
HXDLIN( 937)				bool fill1 = ( (bool)(this->t->__Field(HX_("FILL_ACCENT_BG",de,70,14,63),hx::paccDynamic)) );
HXDLIN( 937)				Float x1 = (this->_x + this->buttonOffsetY);
HXDLIN( 937)				Float y1 = (this->_y + this->buttonOffsetY);
HXDLIN( 937)				Float w1 = (( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) )));
HXDLIN( 937)				Float h1 = (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXDLIN( 937)				Float strength1 = ((Float)0.0);
HXDLIN( 937)				if ((strength1 == ((Float)0.0))) {
HXLINE( 937)					strength1 = ( (Float)(1) );
            				}
HXDLIN( 937)				if (!(this->enabled)) {
HXLINE( 937)					this->fadeColor();
            				}
HXDLIN( 937)				if (fill1) {
HXLINE( 937)					g1->fillRect(x1,(y1 - ( (Float)(1) )),w1,(h1 + 1));
            				}
            				else {
HXLINE( 937)					g1->drawRect(x1,y1,w1,h1,strength1);
            				}
            			}
            		}
HXLINE( 940)		Float x2 = (((this->_x + this->_w) - this->arrowOffsetX) - ( (Float)(8) ));
HXLINE( 941)		Float y2 = ((this->_y + this->arrowOffsetY) + 3);
HXLINE( 942)		this->g->fillTriangle(x2,y2,(x2 + (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))),y2,(x2 + ((( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) / ( (Float)(2) ))),(y2 + ((( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) / ( (Float)(2) ))));
HXLINE( 944)		bool _hx_tmp;
HXDLIN( 944)		if (showLabel) {
HXLINE( 944)			_hx_tmp = (label != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 944)			_hx_tmp = false;
            		}
HXDLIN( 944)		if (_hx_tmp) {
HXLINE( 945)			if ((align == 0)) {
HXLINE( 945)				 ::zui::Zui _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 945)				_hx_tmp1->_x = (_hx_tmp1->_x - ( (Float)(15) ));
            			}
HXLINE( 946)			this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),hx::paccDynamic)) ));
HXLINE( 947)			int _hx_tmp2;
HXDLIN( 947)			if ((align == 0)) {
HXLINE( 947)				_hx_tmp2 = 2;
            			}
            			else {
HXLINE( 947)				_hx_tmp2 = 0;
            			}
HXDLIN( 947)			this->drawString(this->g,label,null(),0,_hx_tmp2);
HXLINE( 948)			if ((align == 0)) {
HXLINE( 948)				 ::zui::Zui _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 948)				_hx_tmp3->_x = (_hx_tmp3->_x + 15);
            			}
            		}
HXLINE( 951)		if ((align == 2)) {
HXLINE( 951)			 ::zui::Zui _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 951)			_hx_tmp4->_x = (_hx_tmp4->_x - ( (Float)(15) ));
            		}
HXLINE( 952)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),hx::paccDynamic)) ));
HXLINE( 953)		this->drawString(this->g,texts->__get(handle->position),null(),0,align);
HXLINE( 954)		if ((align == 2)) {
HXLINE( 954)			 ::zui::Zui _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 954)			_hx_tmp5->_x = (_hx_tmp5->_x + 15);
            		}
HXLINE( 956)		this->endElement(null());
HXLINE( 957)		return handle->position;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Zui_obj,combo,return )

Float Zui_obj::slider( ::zui::Handle handle,::String text,hx::Null< Float >  __o_from,hx::Null< Float >  __o_to,hx::Null< bool >  __o_filled,hx::Null< Float >  __o_precision,hx::Null< bool >  __o_displayValue,hx::Null< int >  __o_align,hx::Null< bool >  __o_textEdit){
            		Float from = __o_from.Default(((Float)0.0));
            		Float to = __o_to.Default(((Float)1.0));
            		bool filled = __o_filled.Default(false);
            		Float precision = __o_precision.Default(((Float)100.0));
            		bool displayValue = __o_displayValue.Default(true);
            		int align = __o_align.Default(2);
            		bool textEdit = __o_textEdit.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_960_slider)
HXLINE( 961)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))))) {
HXLINE( 961)			this->endElement(null());
HXDLIN( 961)			return handle->value;
            		}
HXLINE( 962)		if (this->getStarted(null())) {
HXLINE( 963)			this->_hx_set_scrollHandle(HX_CTX, handle);
HXLINE( 964)			this->isScrolling = true;
            		}
HXLINE( 967)		handle->changed = false;
HXLINE( 968)		if (hx::IsEq( handle,this->scrollHandle )) {
HXLINE( 969)			Float range = (to - from);
HXLINE( 970)			Float sliderX = ((this->_x + this->_windowX) + this->buttonOffsetY);
HXLINE( 971)			Float sliderW = (( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) )));
HXLINE( 972)			Float step = (range / sliderW);
HXLINE( 973)			Float value = (from + ((this->inputX - sliderX) * step));
HXLINE( 974)			handle->value = (( (Float)(::Math_obj::round((value * precision))) ) / precision);
HXLINE( 975)			if ((handle->value < from)) {
HXLINE( 975)				handle->value = from;
            			}
            			else {
HXLINE( 976)				if ((handle->value > to)) {
HXLINE( 976)					handle->value = to;
            				}
            			}
HXLINE( 977)			handle->changed = (this->changed = true);
            		}
HXLINE( 980)		bool hover = this->getHover(null());
HXLINE( 981)		this->drawSlider(handle->value,from,to,filled,hover);
HXLINE( 984)		bool startEdit;
HXDLIN( 984)		bool startEdit1;
HXDLIN( 984)		if (!(this->getReleased(null()))) {
HXLINE( 984)			startEdit1 = this->tabPressed;
            		}
            		else {
HXLINE( 984)			startEdit1 = true;
            		}
HXDLIN( 984)		if (startEdit1) {
HXLINE( 984)			startEdit = textEdit;
            		}
            		else {
HXLINE( 984)			startEdit = false;
            		}
HXLINE( 985)		if (startEdit) {
HXLINE( 986)			handle->_hx_set_text(HX_CTX, (handle->value + HX_("",00,00,00,00)));
HXLINE( 987)			this->startTextEdit(handle);
HXLINE( 988)			handle->changed = (this->changed = true);
            		}
HXLINE( 990)		int lalign;
HXDLIN( 990)		if ((align == 0)) {
HXLINE( 990)			lalign = 2;
            		}
            		else {
HXLINE( 990)			lalign = 0;
            		}
HXLINE( 991)		if (hx::IsEq( this->textSelectedHandle,handle )) {
HXLINE( 992)			this->updateTextEdit(lalign);
            		}
HXLINE( 994)		if (hx::IsEq( this->submitTextHandle,handle )) {
HXLINE( 995)			this->submitTextEdit();
HXLINE( 996)			handle->value = ::Std_obj::parseFloat(handle->text);
HXLINE( 997)			handle->changed = (this->changed = true);
            		}
HXLINE(1000)		this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),hx::paccDynamic)) ));
HXLINE(1001)		this->drawString(this->g,text,null(),0,align);
HXLINE(1003)		if (displayValue) {
HXLINE(1004)			this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),hx::paccDynamic)) ));
HXLINE(1005)			if (hx::IsNotEq( this->textSelectedHandle,handle )) {
HXLINE(1006)				this->drawString(this->g,(handle->value + HX_("",00,00,00,00)),null(),0,lalign);
            			}
            			else {
HXLINE(1007)				this->drawString(this->g,this->textSelected,null(),0,lalign);
            			}
            		}
HXLINE(1010)		this->endElement(null());
HXLINE(1011)		return handle->value;
            	}


HX_DEFINE_DYNAMIC_FUNC9(Zui_obj,slider,return )

void Zui_obj::separator(hx::Null< int >  __o_h,hx::Null< bool >  __o_fill){
            		int h = __o_h.Default(4);
            		bool fill = __o_fill.Default(true);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1014_separator)
HXLINE(1015)		if (!(this->isVisible((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))))) {
HXLINE(1015)			 ::zui::Zui _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1015)			_hx_tmp->_y = (_hx_tmp->_y + (( (Float)(h) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
HXDLIN(1015)			return;
            		}
HXLINE(1016)		if (fill) {
HXLINE(1017)			this->g->set_color(( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),hx::paccDynamic)) ));
HXLINE(1018)			this->g->fillRect(this->_x,this->_y,( (Float)(this->_w) ),(( (Float)(h) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            		}
HXLINE(1020)		 ::zui::Zui _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1020)		_hx_tmp1->_y = (_hx_tmp1->_y + (( (Float)(h) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,separator,(void))

void Zui_obj::tooltip(::String text){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1023_tooltip)
HXLINE(1024)		this->_hx_set_tooltipText(HX_CTX, text);
HXLINE(1025)		this->tooltipY = (this->_y + this->_windowY);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,tooltip,(void))

void Zui_obj::tooltipImage( ::kha::Image image, ::Dynamic maxWidth){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1028_tooltipImage)
HXLINE(1029)		this->_hx_set_tooltipImg(HX_CTX, image);
HXLINE(1030)		this->_hx_set_tooltipImgMaxWidth(HX_CTX, maxWidth);
HXLINE(1031)		this->tooltipInvertY = this->imageInvertY;
HXLINE(1032)		this->tooltipY = (this->_y + this->_windowY);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,tooltipImage,(void))

void Zui_obj::drawArrow(bool selected){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1035_drawArrow)
HXLINE(1036)		Float x = (this->_x + this->arrowOffsetX);
HXLINE(1037)		Float y = (this->_y + this->arrowOffsetY);
HXLINE(1038)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),hx::paccDynamic)) ));
HXLINE(1039)		if (selected) {
HXLINE(1040)			this->g->fillTriangle(x,y,(x + (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))),y,(x + ((( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) / ( (Float)(2) ))),(y + (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
            		}
            		else {
HXLINE(1045)			this->g->fillTriangle(x,y,x,(y + (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))),(x + (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))),(y + ((( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) / ( (Float)(2) ))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,drawArrow,(void))

void Zui_obj::drawTree(bool selected){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1051_drawTree)
HXLINE(1052)		Float SIGN_W = (( (Float)(7) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXLINE(1053)		Float x = ((this->_x + this->arrowOffsetX) + 1);
HXLINE(1054)		Float y = ((this->_y + this->arrowOffsetY) + 1);
HXLINE(1055)		this->g->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),hx::paccDynamic)) ));
HXLINE(1056)		if (selected) {
HXLINE(1057)			this->g->fillRect(x,((y + (SIGN_W / ( (Float)(2) ))) - ( (Float)(1) )),SIGN_W,(SIGN_W / ( (Float)(8) )));
            		}
            		else {
HXLINE(1060)			this->g->fillRect(x,((y + (SIGN_W / ( (Float)(2) ))) - ( (Float)(1) )),SIGN_W,(SIGN_W / ( (Float)(8) )));
HXLINE(1061)			this->g->fillRect(((x + (SIGN_W / ( (Float)(2) ))) - ( (Float)(1) )),y,(SIGN_W / ( (Float)(8) )),SIGN_W);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,drawTree,(void))

void Zui_obj::drawCheck(bool selected,bool hover){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1065_drawCheck)
HXLINE(1066)		Float x = (this->_x + this->checkOffsetX);
HXLINE(1067)		Float y = (this->_y + this->checkOffsetY);
HXLINE(1069)		int _hx_tmp;
HXDLIN(1069)		if (hover) {
HXLINE(1069)			_hx_tmp = ( (int)(this->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),hx::paccDynamic)) );
            		}
            		else {
HXLINE(1069)			_hx_tmp = ( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),hx::paccDynamic)) );
            		}
HXDLIN(1069)		this->g->set_color(_hx_tmp);
HXLINE(1070)		{
HXLINE(1070)			 ::kha::graphics2::Graphics g = this->g;
HXDLIN(1070)			bool fill = ( (bool)(this->t->__Field(HX_("FILL_ACCENT_BG",de,70,14,63),hx::paccDynamic)) );
HXDLIN(1070)			Float w = (( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXDLIN(1070)			Float h = (( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXDLIN(1070)			Float strength = ((Float)0.0);
HXDLIN(1070)			if ((strength == ((Float)0.0))) {
HXLINE(1070)				strength = ( (Float)(1) );
            			}
HXDLIN(1070)			if (!(this->enabled)) {
HXLINE(1070)				this->fadeColor();
            			}
HXDLIN(1070)			if (fill) {
HXLINE(1070)				g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            			}
            			else {
HXLINE(1070)				g->drawRect(x,y,w,h,strength);
            			}
            		}
HXLINE(1072)		if (selected) {
HXLINE(1073)			this->g->set_color(-1);
HXLINE(1074)			if (!(this->enabled)) {
HXLINE(1074)				this->fadeColor();
            			}
HXLINE(1075)			int size = ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
HXLINE(1076)			this->g->drawScaledImage(this->checkSelectImage,( (float)((x + this->checkSelectOffsetX)) ),( (float)((y + this->checkSelectOffsetY)) ),( (float)(size) ),( (float)(size) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,drawCheck,(void))

void Zui_obj::drawRadio(bool selected,bool hover){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1080_drawRadio)
HXLINE(1081)		Float x = (this->_x + this->radioOffsetX);
HXLINE(1082)		Float y = (this->_y + this->radioOffsetY);
HXLINE(1083)		int _hx_tmp;
HXDLIN(1083)		if (hover) {
HXLINE(1083)			_hx_tmp = ( (int)(this->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),hx::paccDynamic)) );
            		}
            		else {
HXLINE(1083)			_hx_tmp = ( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),hx::paccDynamic)) );
            		}
HXDLIN(1083)		this->g->set_color(_hx_tmp);
HXLINE(1084)		{
HXLINE(1084)			 ::kha::graphics2::Graphics g = this->g;
HXDLIN(1084)			bool fill = ( (bool)(this->t->__Field(HX_("FILL_ACCENT_BG",de,70,14,63),hx::paccDynamic)) );
HXDLIN(1084)			Float w = (( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXDLIN(1084)			Float h = (( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXDLIN(1084)			Float strength = ((Float)0.0);
HXDLIN(1084)			if ((strength == ((Float)0.0))) {
HXLINE(1084)				strength = ( (Float)(1) );
            			}
HXDLIN(1084)			if (!(this->enabled)) {
HXLINE(1084)				this->fadeColor();
            			}
HXDLIN(1084)			if (fill) {
HXLINE(1084)				g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            			}
            			else {
HXLINE(1084)				g->drawRect(x,y,w,h,strength);
            			}
            		}
HXLINE(1086)		if (selected) {
HXLINE(1087)			this->g->set_color(( (int)(this->t->__Field(HX_("ACCENT_SELECT_COL",32,b6,1e,48),hx::paccDynamic)) ));
HXLINE(1088)			if (!(this->enabled)) {
HXLINE(1088)				this->fadeColor();
            			}
HXLINE(1089)			this->g->fillRect((x + this->radioSelectOffsetX),(y + this->radioSelectOffsetY),(( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),(( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,drawRadio,(void))

void Zui_obj::drawSlider(Float value,Float from,Float to,bool filled,bool hover){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1093_drawSlider)
HXLINE(1094)		Float x = (this->_x + this->buttonOffsetY);
HXLINE(1095)		Float y = (this->_y + this->buttonOffsetY);
HXLINE(1096)		Float w = (( (Float)(this->_w) ) - (this->buttonOffsetY * ( (Float)(2) )));
HXLINE(1098)		int _hx_tmp;
HXDLIN(1098)		if (hover) {
HXLINE(1098)			_hx_tmp = ( (int)(this->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),hx::paccDynamic)) );
            		}
            		else {
HXLINE(1098)			_hx_tmp = ( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),hx::paccDynamic)) );
            		}
HXDLIN(1098)		this->g->set_color(_hx_tmp);
HXLINE(1099)		{
HXLINE(1099)			 ::kha::graphics2::Graphics g = this->g;
HXDLIN(1099)			bool fill = ( (bool)(this->t->__Field(HX_("FILL_ACCENT_BG",de,70,14,63),hx::paccDynamic)) );
HXDLIN(1099)			Float h = (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXDLIN(1099)			Float strength = ((Float)0.0);
HXDLIN(1099)			if ((strength == ((Float)0.0))) {
HXLINE(1099)				strength = ( (Float)(1) );
            			}
HXDLIN(1099)			if (!(this->enabled)) {
HXLINE(1099)				this->fadeColor();
            			}
HXDLIN(1099)			if (fill) {
HXLINE(1099)				g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            			}
            			else {
HXLINE(1099)				g->drawRect(x,y,w,h,strength);
            			}
            		}
HXLINE(1101)		int _hx_tmp1;
HXDLIN(1101)		if (hover) {
HXLINE(1101)			_hx_tmp1 = ( (int)(this->t->__Field(HX_("ACCENT_HOVER_COL",48,76,6b,fd),hx::paccDynamic)) );
            		}
            		else {
HXLINE(1101)			_hx_tmp1 = ( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),hx::paccDynamic)) );
            		}
HXDLIN(1101)		this->g->set_color(_hx_tmp1);
HXLINE(1102)		Float offset = ((value - from) / (to - from));
HXLINE(1103)		Float barW = (( (Float)(8) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXLINE(1104)		Float sliderX;
HXDLIN(1104)		if (filled) {
HXLINE(1104)			sliderX = x;
            		}
            		else {
HXLINE(1104)			sliderX = (x + ((w - barW) * offset));
            		}
HXLINE(1105)		Float sliderW;
HXDLIN(1105)		if (filled) {
HXLINE(1105)			sliderW = (w * offset);
            		}
            		else {
HXLINE(1105)			sliderW = barW;
            		}
HXLINE(1106)		sliderW = ::Math_obj::max(::Math_obj::min(sliderW,w),( (Float)(0) ));
HXLINE(1107)		{
HXLINE(1107)			 ::kha::graphics2::Graphics g1 = this->g;
HXDLIN(1107)			Float h1 = (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXDLIN(1107)			Float strength1 = ((Float)0.0);
HXDLIN(1107)			if ((strength1 == ((Float)0.0))) {
HXLINE(1107)				strength1 = ( (Float)(1) );
            			}
HXDLIN(1107)			if (!(this->enabled)) {
HXLINE(1107)				this->fadeColor();
            			}
HXDLIN(1107)			g1->fillRect(sliderX,(y - ( (Float)(1) )),sliderW,(h1 + 1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Zui_obj,drawSlider,(void))

void Zui_obj::drawCombo(){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1111_drawCombo)
HXLINE(1112)		if (hx::IsNull( this->comboSelectedHandle )) {
HXLINE(1112)			return;
            		}
HXLINE(1113)		 ::kha::graphics2::Graphics _g = this->g;
HXLINE(1114)		this->globalG->set_color(( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),hx::paccDynamic)) ));
HXLINE(1115)		int elementSize = ::Std_obj::_hx_int(((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) + (( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
HXLINE(1116)		int comboH = ((this->comboSelectedTexts->length + 1) * elementSize);
HXLINE(1117)		this->globalG->begin(false,null());
HXLINE(1118)		int distTop = (this->comboSelectedY - comboH);
HXDLIN(1118)		int distTop1 = (distTop - ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
HXLINE(1119)		int distBottom = ::kha::System_obj::windowHeight(null());
HXDLIN(1119)		int distBottom1 = (distBottom - (this->comboSelectedY + comboH));
HXLINE(1120)		bool outOfScreen;
HXDLIN(1120)		if ((distBottom1 < 0)) {
HXLINE(1120)			outOfScreen = (distBottom1 < distTop1);
            		}
            		else {
HXLINE(1120)			outOfScreen = false;
            		}
HXLINE(1121)		int comboY;
HXDLIN(1121)		if (outOfScreen) {
HXLINE(1121)			int comboY1 = (this->comboSelectedY - comboH);
HXDLIN(1121)			comboY = (comboY1 - ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
            		}
            		else {
HXLINE(1121)			comboY = this->comboSelectedY;
            		}
HXLINE(1122)		this->globalG->fillRect(( (Float)(this->comboSelectedX) ),( (Float)(comboY) ),( (Float)(this->comboSelectedW) ),( (Float)(comboH) ));
HXLINE(1123)		this->beginRegion(this->globalG,this->comboSelectedX,comboY,this->comboSelectedW);
HXLINE(1125)		if (outOfScreen) {
HXLINE(1126)			this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),hx::paccDynamic)) ));
HXLINE(1127)			this->drawString(this->g,this->comboSelectedLabel,null(),0,2);
HXLINE(1128)			 ::zui::Zui _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1128)			_hx_tmp->_y = (_hx_tmp->_y + elementSize);
HXLINE(1129)			this->fill(( (Float)(0) ),( (Float)(0) ),(( (Float)(this->_w) ) / ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ),( (int)(this->t->__Field(HX_("ACCENT_SELECT_COL",32,b6,1e,48),hx::paccDynamic)) ));
            		}
HXLINE(1132)		this->inputEnabled = true;
HXLINE(1133)		int BUTTON_COL = ( (int)(this->t->__Field(HX_("BUTTON_COL",13,50,64,c5),hx::paccDynamic)) );
HXLINE(1134)		{
HXLINE(1134)			int _g1 = 0;
HXDLIN(1134)			int _g11 = this->comboSelectedTexts->length;
HXDLIN(1134)			while((_g1 < _g11)){
HXLINE(1134)				_g1 = (_g1 + 1);
HXDLIN(1134)				int i = (_g1 - 1);
HXLINE(1135)				int j;
HXDLIN(1135)				if (outOfScreen) {
HXLINE(1135)					j = ((this->comboSelectedTexts->length - 1) - i);
            				}
            				else {
HXLINE(1135)					j = i;
            				}
HXLINE(1136)				int _hx_tmp1;
HXDLIN(1136)				if ((j == this->comboSelectedHandle->position)) {
HXLINE(1136)					_hx_tmp1 = ( (int)(this->t->__Field(HX_("WINDOW_BG_COL",15,11,a8,46),hx::paccDynamic)) );
            				}
            				else {
HXLINE(1136)					_hx_tmp1 = ( (int)(this->t->__Field(HX_("SEPARATOR_COL",e6,37,a4,36),hx::paccDynamic)) );
            				}
HXDLIN(1136)				this->t->__SetField(HX_("BUTTON_COL",13,50,64,c5),_hx_tmp1,hx::paccDynamic);
HXLINE(1137)				if (this->button(this->comboSelectedTexts->__get(j),this->comboSelectedAlign,null())) {
HXLINE(1138)					this->comboToSubmit = j;
HXLINE(1139)					this->_hx_set_submitComboHandle(HX_CTX, this->comboSelectedHandle);
HXLINE(1140)					if (hx::IsNotNull( this->comboSelectedWindow )) {
HXLINE(1140)						this->comboSelectedWindow->redraws = 2;
            					}
HXLINE(1141)					goto _hx_goto_45;
            				}
            			}
            			_hx_goto_45:;
            		}
HXLINE(1144)		this->t->__SetField(HX_("BUTTON_COL",13,50,64,c5),BUTTON_COL,hx::paccDynamic);
HXLINE(1146)		if (!(outOfScreen)) {
HXLINE(1147)			this->fill(( (Float)(0) ),( (Float)(0) ),(( (Float)(this->_w) ) / ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ),( (int)(this->t->__Field(HX_("ACCENT_SELECT_COL",32,b6,1e,48),hx::paccDynamic)) ));
HXLINE(1148)			this->g->set_color(( (int)(this->t->__Field(HX_("LABEL_COL",f5,20,15,76),hx::paccDynamic)) ));
HXLINE(1149)			this->drawString(this->g,this->comboSelectedLabel,null(),0,2);
            		}
HXLINE(1152)		bool _hx_tmp2;
HXDLIN(1152)		bool _hx_tmp3;
HXDLIN(1152)		if (!(this->inputReleased)) {
HXLINE(1152)			_hx_tmp3 = this->isEscapeDown;
            		}
            		else {
HXLINE(1152)			_hx_tmp3 = true;
            		}
HXDLIN(1152)		if (_hx_tmp3) {
HXLINE(1152)			_hx_tmp2 = !(::zui::Zui_obj::comboFirst);
            		}
            		else {
HXLINE(1152)			_hx_tmp2 = false;
            		}
HXDLIN(1152)		if (_hx_tmp2) {
HXLINE(1153)			this->_hx_set_comboSelectedHandle(HX_CTX, null());
HXLINE(1154)			::zui::Zui_obj::comboFirst = true;
            		}
            		else {
HXLINE(1156)			::zui::Zui_obj::comboFirst = false;
            		}
HXLINE(1157)		this->inputEnabled = hx::IsNull( this->comboSelectedHandle );
HXLINE(1158)		this->endRegion(false);
HXLINE(1159)		this->globalG->end();
HXLINE(1160)		this->_hx_set_g(HX_CTX, _g);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,drawCombo,(void))

void Zui_obj::drawTooltip(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1164_drawTooltip)
HXDLIN(1164)		bool _hx_tmp;
HXDLIN(1164)		if ((this->tooltipText == HX_("",00,00,00,00))) {
HXDLIN(1164)			_hx_tmp = hx::IsNotNull( this->tooltipImg );
            		}
            		else {
HXDLIN(1164)			_hx_tmp = true;
            		}
HXDLIN(1164)		if (_hx_tmp) {
HXLINE(1165)			if (this->inputChanged()) {
HXLINE(1166)				this->tooltipShown = false;
HXLINE(1167)				bool _hx_tmp1;
HXDLIN(1167)				if ((this->inputDX == 0)) {
HXLINE(1167)					_hx_tmp1 = (this->inputDY == 0);
            				}
            				else {
HXLINE(1167)					_hx_tmp1 = false;
            				}
HXDLIN(1167)				this->tooltipWait = _hx_tmp1;
            			}
HXLINE(1169)			if (!(this->tooltipShown)) {
HXLINE(1170)				this->tooltipShown = true;
HXLINE(1171)				this->tooltipX = this->inputX;
HXLINE(1172)				this->tooltipTime = ::kha::Scheduler_obj::time();
            			}
HXLINE(1174)			bool _hx_tmp2;
HXDLIN(1174)			if (!(this->tooltipWait)) {
HXLINE(1174)				Float _hx_tmp3 = ::kha::Scheduler_obj::time();
HXDLIN(1174)				_hx_tmp2 = ((_hx_tmp3 - this->tooltipTime) > ((Float)1.0));
            			}
            			else {
HXLINE(1174)				_hx_tmp2 = false;
            			}
HXDLIN(1174)			if (_hx_tmp2) {
HXLINE(1175)				if ((this->tooltipText != HX_("",00,00,00,00))) {
HXLINE(1175)					this->drawTooltipText();
            				}
            				else {
HXLINE(1175)					this->drawTooltipImage();
            				}
            			}
            		}
            		else {
HXLINE(1178)			this->tooltipShown = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,drawTooltip,(void))

void Zui_obj::drawTooltipText(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1181_drawTooltipText)
HXLINE(1182)		this->globalG->set_color(( (int)(this->t->__Field(HX_("TEXT_COL",4e,50,e5,c5),hx::paccDynamic)) ));
HXLINE(1183)		::Array< ::String > lines = this->tooltipText.split(HX_("\n",0a,00,00,00));
HXLINE(1184)		Float tooltipW = ((Float)0.0);
HXLINE(1185)		{
HXLINE(1185)			int _g = 0;
HXDLIN(1185)			while((_g < lines->length)){
HXLINE(1185)				::String line = lines->__get(_g);
HXDLIN(1185)				_g = (_g + 1);
HXLINE(1186)				Float lineTooltipW = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) )->width(this->fontSize,line);
HXLINE(1187)				if ((lineTooltipW > tooltipW)) {
HXLINE(1187)					tooltipW = lineTooltipW;
            				}
            			}
            		}
HXLINE(1189)		Float _hx_tmp = this->tooltipX;
HXDLIN(1189)		this->tooltipX = ::Math_obj::min(_hx_tmp,((( (Float)(::kha::System_obj::windowWidth(null())) ) - tooltipW) - ( (Float)(20) )));
HXLINE(1190)		this->globalG->begin(false,null());
HXLINE(1191)		this->globalG->fillRect(this->tooltipX,this->tooltipY,(tooltipW + 20),(((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) * ( (Float)(lines->length) )) * ((Float)0.6)));
HXLINE(1192)		this->globalG->set_font(( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) ));
HXLINE(1193)		this->globalG->set_fontSize(this->fontSize);
HXLINE(1194)		this->globalG->set_color(( (int)(this->t->__Field(HX_("ACCENT_COL",6b,0b,11,02),hx::paccDynamic)) ));
HXLINE(1195)		{
HXLINE(1195)			int _g1 = 0;
HXDLIN(1195)			int _g2 = lines->length;
HXDLIN(1195)			while((_g1 < _g2)){
HXLINE(1195)				_g1 = (_g1 + 1);
HXDLIN(1195)				int i = (_g1 - 1);
HXLINE(1196)				this->globalG->drawString(lines->__get(i),(this->tooltipX + 5),(this->tooltipY + (i * this->fontSize)));
            			}
            		}
HXLINE(1198)		this->globalG->end();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,drawTooltipText,(void))

void Zui_obj::drawTooltipImage(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1201_drawTooltipImage)
HXLINE(1202)		int w = this->tooltipImg->get_width();
HXLINE(1203)		bool _hx_tmp;
HXDLIN(1203)		if (hx::IsNotNull( this->tooltipImgMaxWidth )) {
HXLINE(1203)			_hx_tmp = hx::IsGreater( w,this->tooltipImgMaxWidth );
            		}
            		else {
HXLINE(1203)			_hx_tmp = false;
            		}
HXDLIN(1203)		if (_hx_tmp) {
HXLINE(1203)			w = ( (int)(this->tooltipImgMaxWidth) );
            		}
HXLINE(1204)		int h = this->tooltipImg->get_height();
HXDLIN(1204)		Float h1 = (( (Float)(h) ) * (( (Float)(w) ) / ( (Float)(this->tooltipImg->get_width()) )));
HXLINE(1205)		Float _hx_tmp1 = this->tooltipX;
HXDLIN(1205)		this->tooltipX = ::Math_obj::min(_hx_tmp1,( (Float)(((::kha::System_obj::windowWidth(null()) - w) - 20)) ));
HXLINE(1206)		Float _hx_tmp2 = this->tooltipY;
HXDLIN(1206)		this->tooltipY = ::Math_obj::min(_hx_tmp2,((( (Float)(::kha::System_obj::windowHeight(null())) ) - h1) - ( (Float)(20) )));
HXLINE(1207)		this->globalG->set_color(-16777216);
HXLINE(1208)		this->globalG->begin(false,null());
HXLINE(1209)		this->globalG->fillRect(this->tooltipX,this->tooltipY,( (Float)(w) ),h1);
HXLINE(1210)		this->globalG->set_color(-1);
HXLINE(1211)		if (this->tooltipInvertY) {
HXLINE(1212)			this->globalG->drawScaledImage(this->tooltipImg,( (float)(this->tooltipX) ),( (float)((this->tooltipY + h1)) ),( (float)(w) ),( (float)(-(h1)) ));
            		}
            		else {
HXLINE(1213)			this->globalG->drawScaledImage(this->tooltipImg,( (float)(this->tooltipX) ),( (float)(this->tooltipY) ),( (float)(w) ),( (float)(h1) ));
            		}
HXLINE(1214)		this->globalG->end();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,drawTooltipImage,(void))

void Zui_obj::drawString( ::kha::graphics2::Graphics g,::String text, ::Dynamic xOffset,hx::Null< Float >  __o_yOffset,hx::Null< int >  __o_align){
            		Float yOffset = __o_yOffset.Default(0);
            		int align = __o_align.Default(0);
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1218_drawString)
HXLINE(1219)		int fullLength = text.length;
HXLINE(1220)		while(true){
HXLINE(1220)			bool _hx_tmp;
HXDLIN(1220)			if ((text.length > 0)) {
HXLINE(1220)				Float _hx_tmp1 = ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) )->width(this->fontSize,text);
HXDLIN(1220)				_hx_tmp = (_hx_tmp1 > this->_w);
            			}
            			else {
HXLINE(1220)				_hx_tmp = false;
            			}
HXDLIN(1220)			if (!(_hx_tmp)) {
HXLINE(1220)				goto _hx_goto_52;
            			}
HXLINE(1221)			text = text.substr(0,(text.length - 1));
            		}
            		_hx_goto_52:;
HXLINE(1223)		if ((text.length < fullLength)) {
HXLINE(1223)			text = (text + HX_("..",40,28,00,00));
            		}
HXLINE(1225)		if (hx::IsNull( xOffset )) {
HXLINE(1225)			xOffset = this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),hx::paccDynamic);
            		}
HXLINE(1226)		xOffset = (xOffset * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
HXLINE(1227)		g->set_font(( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) ));
HXLINE(1228)		g->set_fontSize(this->fontSize);
HXLINE(1229)		if ((align == 1)) {
HXLINE(1229)			Float xOffset1 = (( (Float)(this->_w) ) / ( (Float)(2) ));
HXDLIN(1229)			xOffset = (xOffset1 - (( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) )->width(this->fontSize,text) / ( (Float)(2) )));
            		}
            		else {
HXLINE(1230)			if ((align == 2)) {
HXLINE(1230)				int xOffset2 = this->_w;
HXDLIN(1230)				Float xOffset3 = (( (Float)(xOffset2) ) - ( ( ::kha::Kravur)(this->ops->__Field(HX_("font",cf,5d,c0,43),hx::paccDynamic)) )->width(this->fontSize,text));
HXDLIN(1230)				xOffset = (xOffset3 - (( (Float)(this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            			}
            		}
HXLINE(1232)		if (!(this->enabled)) {
HXLINE(1232)			this->fadeColor();
            		}
HXLINE(1233)		g->set_pipeline(this->rtTextPipeline);
HXLINE(1234)		g->drawString(text,(this->_x + xOffset),((this->_y + this->fontOffsetY) + yOffset));
HXLINE(1235)		g->set_pipeline(null());
            	}


HX_DEFINE_DYNAMIC_FUNC5(Zui_obj,drawString,(void))

void Zui_obj::endElement( ::Dynamic elementSize){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1238_endElement)
HXLINE(1239)		if (hx::IsNull( elementSize )) {
HXLINE(1239)			elementSize = ((( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )) + (( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            		}
HXLINE(1240)		bool _hx_tmp;
HXDLIN(1240)		if (hx::IsNotNull( this->currentWindow )) {
HXLINE(1240)			_hx_tmp = (this->currentWindow->layout == 0);
            		}
            		else {
HXLINE(1240)			_hx_tmp = true;
            		}
HXDLIN(1240)		if (_hx_tmp) {
HXLINE(1241)			bool _hx_tmp1;
HXDLIN(1241)			if ((this->curRatio != -1)) {
HXLINE(1241)				if (hx::IsNotNull( this->ratios )) {
HXLINE(1241)					_hx_tmp1 = (this->curRatio == (this->ratios->length - 1));
            				}
            				else {
HXLINE(1241)					_hx_tmp1 = false;
            				}
            			}
            			else {
HXLINE(1241)				_hx_tmp1 = true;
            			}
HXDLIN(1241)			if (_hx_tmp1) {
HXLINE(1242)				 ::zui::Zui _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1242)				_hx_tmp2->_y = (_hx_tmp2->_y + elementSize);
HXLINE(1243)				bool _hx_tmp3;
HXDLIN(1243)				if (hx::IsNotNull( this->ratios )) {
HXLINE(1243)					_hx_tmp3 = (this->curRatio == (this->ratios->length - 1));
            				}
            				else {
HXLINE(1243)					_hx_tmp3 = false;
            				}
HXDLIN(1243)				if (_hx_tmp3) {
HXLINE(1244)					this->curRatio = -1;
HXLINE(1245)					this->_hx_set_ratios(HX_CTX, null());
HXLINE(1246)					this->_x = this->xBeforeSplit;
HXLINE(1247)					this->_w = this->wBeforeSplit;
            				}
            			}
            			else {
HXLINE(1251)				this->curRatio++;
HXLINE(1252)				 ::zui::Zui _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1252)				_hx_tmp4->_x = (_hx_tmp4->_x + this->_w);
HXLINE(1253)				this->_w = ::Std_obj::_hx_int((( (Float)(this->wBeforeSplit) ) * this->ratios->__get(this->curRatio)));
            			}
            		}
            		else {
HXLINE(1257)			 ::zui::Zui _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1257)			_hx_tmp5->_x = (_hx_tmp5->_x + (this->_w + (( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,endElement,(void))

void Zui_obj::row(::Array< Float > ratios){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1261_row)
HXLINE(1262)		this->_hx_set_ratios(HX_CTX, ratios);
HXLINE(1263)		this->curRatio = 0;
HXLINE(1264)		this->xBeforeSplit = this->_x;
HXLINE(1265)		this->wBeforeSplit = this->_w;
HXLINE(1266)		this->_w = ::Std_obj::_hx_int((( (Float)(this->_w) ) * ratios->__get(this->curRatio)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,row,(void))

void Zui_obj::indent(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1269_indent)
HXLINE(1270)		 ::zui::Zui _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1270)		Float _hx_tmp1 = _hx_tmp->_x;
HXDLIN(1270)		_hx_tmp->_x = (_hx_tmp1 + ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("TAB_W",8d,00,d2,88),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
HXLINE(1271)		 ::zui::Zui _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1271)		int _hx_tmp3 = _hx_tmp2->_w;
HXDLIN(1271)		_hx_tmp2->_w = (_hx_tmp3 - ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("TAB_W",8d,00,d2,88),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,indent,(void))

void Zui_obj::unindent(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1273_unindent)
HXLINE(1274)		 ::zui::Zui _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1274)		Float _hx_tmp1 = _hx_tmp->_x;
HXDLIN(1274)		_hx_tmp->_x = (_hx_tmp1 - ( (Float)(::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("TAB_W",8d,00,d2,88),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )))) ));
HXLINE(1275)		 ::zui::Zui _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1275)		int _hx_tmp3 = _hx_tmp2->_w;
HXDLIN(1275)		_hx_tmp2->_w = (_hx_tmp3 + ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("TAB_W",8d,00,d2,88),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,unindent,(void))

void Zui_obj::fadeColor(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1279_fadeColor)
HXDLIN(1279)		 ::kha::graphics2::Graphics _hx_tmp = this->g;
HXDLIN(1279)		float _hx_tmp1 = (( (float)(hx::UShr((this->g->get_color() & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN(1279)		float _hx_tmp2 = (( (float)(hx::UShr((this->g->get_color() & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN(1279)		_hx_tmp->set_color(::kha::_Color::Color_Impl__obj::fromFloats(_hx_tmp1,_hx_tmp2,(( (float)((this->g->get_color() & 255)) ) * ( (float)(((Float)0.00392156862745098)) )),((Float)0.25)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,fadeColor,(void))

void Zui_obj::fill(Float x,Float y,Float w,Float h,int color){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1282_fill)
HXLINE(1283)		this->g->set_color(color);
HXLINE(1284)		if (!(this->enabled)) {
HXLINE(1284)			this->fadeColor();
            		}
HXLINE(1285)		this->g->fillRect((this->_x + (x * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))),((this->_y + (y * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))) - ( (Float)(1) )),(w * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),(h * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
HXLINE(1286)		this->g->set_color(-1);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Zui_obj,fill,(void))

void Zui_obj::rect(Float x,Float y,Float w,Float h,int color,hx::Null< Float >  __o_strength){
            		Float strength = __o_strength.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1289_rect)
HXLINE(1290)		this->g->set_color(color);
HXLINE(1291)		if (!(this->enabled)) {
HXLINE(1291)			this->fadeColor();
            		}
HXLINE(1292)		this->g->drawRect((this->_x + (x * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))),(this->_y + (y * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ))),(w * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),(h * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )),strength);
HXLINE(1293)		this->g->set_color(-1);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Zui_obj,rect,(void))

void Zui_obj::drawRect( ::kha::graphics2::Graphics g,bool fill,Float x,Float y,Float w,Float h,hx::Null< Float >  __o_strength){
            		Float strength = __o_strength.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1296_drawRect)
HXLINE(1297)		if ((strength == ((Float)0.0))) {
HXLINE(1297)			strength = ( (Float)(1) );
            		}
HXLINE(1298)		if (!(this->enabled)) {
HXLINE(1298)			this->fadeColor();
            		}
HXLINE(1299)		if (fill) {
HXLINE(1299)			g->fillRect(x,(y - ( (Float)(1) )),w,(h + 1));
            		}
            		else {
HXLINE(1299)			g->drawRect(x,y,w,h,strength);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(Zui_obj,drawRect,(void))

bool Zui_obj::isVisible(Float elemH){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1302_isVisible)
HXLINE(1303)		if (hx::IsNull( this->currentWindow )) {
HXLINE(1303)			return true;
            		}
HXLINE(1304)		if (((this->_y + elemH) > this->windowHeaderH)) {
HXLINE(1304)			Float _hx_tmp = this->_y;
HXDLIN(1304)			return (_hx_tmp < this->currentWindow->texture->get_height());
            		}
            		else {
HXLINE(1304)			return false;
            		}
HXDLIN(1304)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,isVisible,return )

bool Zui_obj::getReleased(hx::Null< Float >  __o_elemH){
            		Float elemH = __o_elemH.Default(((Float)-1.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1307_getReleased)
HXLINE(1308)		bool _hx_tmp;
HXDLIN(1308)		bool _hx_tmp1;
HXDLIN(1308)		bool _hx_tmp2;
HXDLIN(1308)		bool _hx_tmp3;
HXDLIN(1308)		if (this->enabled) {
HXLINE(1308)			_hx_tmp3 = this->inputEnabled;
            		}
            		else {
HXLINE(1308)			_hx_tmp3 = false;
            		}
HXDLIN(1308)		if (_hx_tmp3) {
HXLINE(1308)			_hx_tmp2 = this->inputReleased;
            		}
            		else {
HXLINE(1308)			_hx_tmp2 = false;
            		}
HXDLIN(1308)		if (_hx_tmp2) {
HXLINE(1308)			_hx_tmp1 = this->getHover(elemH);
            		}
            		else {
HXLINE(1308)			_hx_tmp1 = false;
            		}
HXDLIN(1308)		if (_hx_tmp1) {
HXLINE(1308)			_hx_tmp = this->getInitialHover(elemH);
            		}
            		else {
HXLINE(1308)			_hx_tmp = false;
            		}
HXDLIN(1308)		this->isReleased = _hx_tmp;
HXLINE(1309)		return this->isReleased;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,getReleased,return )

bool Zui_obj::getPushed(hx::Null< Float >  __o_elemH){
            		Float elemH = __o_elemH.Default(((Float)-1.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1312_getPushed)
HXLINE(1313)		bool _hx_tmp;
HXDLIN(1313)		bool _hx_tmp1;
HXDLIN(1313)		bool _hx_tmp2;
HXDLIN(1313)		bool _hx_tmp3;
HXDLIN(1313)		if (this->enabled) {
HXLINE(1313)			_hx_tmp3 = this->inputEnabled;
            		}
            		else {
HXLINE(1313)			_hx_tmp3 = false;
            		}
HXDLIN(1313)		if (_hx_tmp3) {
HXLINE(1313)			_hx_tmp2 = this->inputDown;
            		}
            		else {
HXLINE(1313)			_hx_tmp2 = false;
            		}
HXDLIN(1313)		if (_hx_tmp2) {
HXLINE(1313)			_hx_tmp1 = this->getHover(elemH);
            		}
            		else {
HXLINE(1313)			_hx_tmp1 = false;
            		}
HXDLIN(1313)		if (_hx_tmp1) {
HXLINE(1313)			_hx_tmp = this->getInitialHover(elemH);
            		}
            		else {
HXLINE(1313)			_hx_tmp = false;
            		}
HXDLIN(1313)		this->isPushed = _hx_tmp;
HXLINE(1314)		return this->isPushed;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,getPushed,return )

bool Zui_obj::getStarted(hx::Null< Float >  __o_elemH){
            		Float elemH = __o_elemH.Default(((Float)-1.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1317_getStarted)
HXLINE(1318)		bool _hx_tmp;
HXDLIN(1318)		bool _hx_tmp1;
HXDLIN(1318)		bool _hx_tmp2;
HXDLIN(1318)		if (this->enabled) {
HXLINE(1318)			_hx_tmp2 = this->inputEnabled;
            		}
            		else {
HXLINE(1318)			_hx_tmp2 = false;
            		}
HXDLIN(1318)		if (_hx_tmp2) {
HXLINE(1318)			_hx_tmp1 = this->inputStarted;
            		}
            		else {
HXLINE(1318)			_hx_tmp1 = false;
            		}
HXDLIN(1318)		if (_hx_tmp1) {
HXLINE(1318)			_hx_tmp = this->getHover(elemH);
            		}
            		else {
HXLINE(1318)			_hx_tmp = false;
            		}
HXDLIN(1318)		this->isStarted = _hx_tmp;
HXLINE(1319)		return this->isStarted;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,getStarted,return )

bool Zui_obj::getInitialHover(hx::Null< Float >  __o_elemH){
            		Float elemH = __o_elemH.Default(((Float)-1.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1322_getInitialHover)
HXLINE(1323)		if ((elemH == ((Float)-1.0))) {
HXLINE(1323)			elemH = (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
            		}
HXLINE(1324)		bool _hx_tmp;
HXDLIN(1324)		bool _hx_tmp1;
HXDLIN(1324)		bool _hx_tmp2;
HXDLIN(1324)		bool _hx_tmp3;
HXDLIN(1324)		if (this->enabled) {
HXLINE(1324)			_hx_tmp3 = this->inputEnabled;
            		}
            		else {
HXLINE(1324)			_hx_tmp3 = false;
            		}
HXDLIN(1324)		if (_hx_tmp3) {
HXLINE(1324)			_hx_tmp2 = (this->inputStartedX >= (this->_windowX + this->_x));
            		}
            		else {
HXLINE(1324)			_hx_tmp2 = false;
            		}
HXDLIN(1324)		if (_hx_tmp2) {
HXLINE(1324)			_hx_tmp1 = (this->inputStartedX < ((this->_windowX + this->_x) + this->_w));
            		}
            		else {
HXLINE(1324)			_hx_tmp1 = false;
            		}
HXDLIN(1324)		if (_hx_tmp1) {
HXLINE(1324)			_hx_tmp = (this->inputStartedY >= (this->_windowY + this->_y));
            		}
            		else {
HXLINE(1324)			_hx_tmp = false;
            		}
HXDLIN(1324)		if (_hx_tmp) {
HXLINE(1326)			return (this->inputStartedY < ((this->_windowY + this->_y) + elemH));
            		}
            		else {
HXLINE(1324)			return false;
            		}
HXDLIN(1324)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,getInitialHover,return )

bool Zui_obj::getHover(hx::Null< Float >  __o_elemH){
            		Float elemH = __o_elemH.Default(((Float)-1.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1329_getHover)
HXLINE(1330)		if ((elemH == ((Float)-1.0))) {
HXLINE(1330)			elemH = (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
            		}
HXLINE(1331)		bool _hx_tmp;
HXDLIN(1331)		bool _hx_tmp1;
HXDLIN(1331)		bool _hx_tmp2;
HXDLIN(1331)		bool _hx_tmp3;
HXDLIN(1331)		bool _hx_tmp4;
HXDLIN(1331)		if (this->enabled) {
HXLINE(1331)			_hx_tmp4 = this->inputEnabled;
            		}
            		else {
HXLINE(1331)			_hx_tmp4 = false;
            		}
HXDLIN(1331)		if (_hx_tmp4) {
HXLINE(1331)			_hx_tmp3 = (this->inputX >= (this->_windowX + this->_x));
            		}
            		else {
HXLINE(1331)			_hx_tmp3 = false;
            		}
HXDLIN(1331)		if (_hx_tmp3) {
HXLINE(1331)			_hx_tmp2 = (this->inputX < ((this->_windowX + this->_x) + this->_w));
            		}
            		else {
HXLINE(1331)			_hx_tmp2 = false;
            		}
HXDLIN(1331)		if (_hx_tmp2) {
HXLINE(1331)			_hx_tmp1 = (this->inputY >= (this->_windowY + this->_y));
            		}
            		else {
HXLINE(1331)			_hx_tmp1 = false;
            		}
HXDLIN(1331)		if (_hx_tmp1) {
HXLINE(1331)			_hx_tmp = (this->inputY < ((this->_windowY + this->_y) + elemH));
            		}
            		else {
HXLINE(1331)			_hx_tmp = false;
            		}
HXDLIN(1331)		this->isHovered = _hx_tmp;
HXLINE(1334)		return this->isHovered;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,getHover,return )

bool Zui_obj::getInputInRect(Float x,Float y,Float w,Float h,hx::Null< Float >  __o_scale){
            		Float scale = __o_scale.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1338_getInputInRect)
HXDLIN(1338)		bool _hx_tmp;
HXDLIN(1338)		bool _hx_tmp1;
HXDLIN(1338)		bool _hx_tmp2;
HXDLIN(1338)		bool _hx_tmp3;
HXDLIN(1338)		if (this->enabled) {
HXDLIN(1338)			_hx_tmp3 = this->inputEnabled;
            		}
            		else {
HXDLIN(1338)			_hx_tmp3 = false;
            		}
HXDLIN(1338)		if (_hx_tmp3) {
HXDLIN(1338)			_hx_tmp2 = (this->inputX >= (x * scale));
            		}
            		else {
HXDLIN(1338)			_hx_tmp2 = false;
            		}
HXDLIN(1338)		if (_hx_tmp2) {
HXDLIN(1338)			_hx_tmp1 = (this->inputX < ((x + w) * scale));
            		}
            		else {
HXDLIN(1338)			_hx_tmp1 = false;
            		}
HXDLIN(1338)		if (_hx_tmp1) {
HXDLIN(1338)			_hx_tmp = (this->inputY >= (y * scale));
            		}
            		else {
HXDLIN(1338)			_hx_tmp = false;
            		}
HXDLIN(1338)		if (_hx_tmp) {
HXLINE(1340)			return (this->inputY < ((y + h) * scale));
            		}
            		else {
HXDLIN(1338)			return false;
            		}
HXDLIN(1338)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Zui_obj,getInputInRect,return )

void Zui_obj::onMouseDown(int button,int x,int y){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1343_onMouseDown)
HXLINE(1344)		if ((button == 0)) {
HXLINE(1344)			this->inputStarted = true;
            		}
            		else {
HXLINE(1344)			this->inputStartedR = true;
            		}
HXLINE(1345)		if ((button == 0)) {
HXLINE(1345)			this->inputDown = true;
            		}
            		else {
HXLINE(1345)			this->inputDownR = true;
            		}
HXLINE(1346)		this->setInputPosition(x,y);
HXLINE(1347)		this->inputStartedX = ( (Float)(x) );
HXLINE(1348)		this->inputStartedY = ( (Float)(y) );
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,onMouseDown,(void))

void Zui_obj::onMouseUp(int button,int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1351_onMouseUp)
HXLINE(1352)		if ((button == 0)) {
HXLINE(1353)			if (this->isScrolling) {
HXLINE(1354)				this->isScrolling = false;
HXLINE(1355)				this->_hx_set_scrollHandle(HX_CTX, null());
HXLINE(1356)				bool _hx_tmp;
HXDLIN(1356)				if ((x == this->inputStartedX)) {
HXLINE(1356)					_hx_tmp = (y == this->inputStartedY);
            				}
            				else {
HXLINE(1356)					_hx_tmp = false;
            				}
HXDLIN(1356)				if (_hx_tmp) {
HXLINE(1356)					this->inputReleased = true;
            				}
            			}
            			else {
HXLINE(1359)				this->inputReleased = true;
            			}
            		}
            		else {
HXLINE(1362)			if ((button == 1)) {
HXLINE(1362)				this->inputReleasedR = true;
            			}
            		}
HXLINE(1363)		if ((button == 0)) {
HXLINE(1363)			this->inputDown = false;
            		}
            		else {
HXLINE(1363)			this->inputDownR = false;
            		}
HXLINE(1364)		this->setInputPosition(x,y);
HXLINE(1365)		this->deselectText();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Zui_obj,onMouseUp,(void))

void Zui_obj::onMouseMove(int x,int y,int movementX,int movementY){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1369_onMouseMove)
HXDLIN(1369)		this->setInputPosition(x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Zui_obj,onMouseMove,(void))

void Zui_obj::onMouseWheel(int delta){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1373_onMouseWheel)
HXDLIN(1373)		this->inputWheelDelta = delta;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,onMouseWheel,(void))

void Zui_obj::setInputPosition(int x,int y){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1376_setInputPosition)
HXLINE(1377)		 ::zui::Zui _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1377)		_hx_tmp->inputDX = (_hx_tmp->inputDX + (( (Float)(x) ) - this->inputX));
HXLINE(1378)		 ::zui::Zui _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1378)		_hx_tmp1->inputDY = (_hx_tmp1->inputDY + (( (Float)(y) ) - this->inputY));
HXLINE(1379)		this->inputX = ( (Float)(x) );
HXLINE(1380)		this->inputY = ( (Float)(y) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(Zui_obj,setInputPosition,(void))

void Zui_obj::onKeyDown(int code){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1383_onKeyDown)
HXLINE(1384)		this->_hx_set_key(HX_CTX, code);
HXLINE(1385)		this->isKeyPressed = true;
HXLINE(1386)		this->isKeyDown = true;
HXLINE(1387)		::zui::Zui_obj::keyRepeatTime = (::kha::Scheduler_obj::time() + ((Float)0.4));
HXLINE(1388)		switch((int)(code)){
            			case (int)8: {
HXLINE(1392)				this->isBackspaceDown = true;
            			}
            			break;
            			case (int)13: {
HXLINE(1395)				this->isReturnDown = true;
            			}
            			break;
            			case (int)16: {
HXLINE(1389)				this->isShiftDown = true;
            			}
            			break;
            			case (int)17: {
HXLINE(1390)				this->isCtrlDown = true;
            			}
            			break;
            			case (int)18: {
HXLINE(1391)				this->isAltDown = true;
            			}
            			break;
            			case (int)27: {
HXLINE(1394)				this->isEscapeDown = true;
            			}
            			break;
            			case (int)32: {
HXLINE(1396)				this->_hx_set__hx_char(HX_CTX, HX_(" ",20,00,00,00));
            			}
            			break;
            			case (int)46: {
HXLINE(1393)				this->isDeleteDown = true;
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,onKeyDown,(void))

void Zui_obj::onKeyUp(int code){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1401_onKeyUp)
HXLINE(1402)		this->isKeyDown = false;
HXLINE(1403)		switch((int)(code)){
            			case (int)8: {
HXLINE(1407)				this->isBackspaceDown = false;
            			}
            			break;
            			case (int)13: {
HXLINE(1410)				this->isReturnDown = false;
            			}
            			break;
            			case (int)16: {
HXLINE(1404)				this->isShiftDown = false;
            			}
            			break;
            			case (int)17: {
HXLINE(1405)				this->isCtrlDown = false;
            			}
            			break;
            			case (int)18: {
HXLINE(1406)				this->isAltDown = false;
            			}
            			break;
            			case (int)27: {
HXLINE(1409)				this->isEscapeDown = false;
            			}
            			break;
            			case (int)46: {
HXLINE(1408)				this->isDeleteDown = false;
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,onKeyUp,(void))

void Zui_obj::onKeyPress(::String _hx_char){
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1415_onKeyPress)
HXLINE(1416)		this->_hx_set__hx_char(HX_CTX, _hx_char);
HXLINE(1417)		this->isKeyPressed = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,onKeyPress,(void))

::String Zui_obj::onCut(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1420_onCut)
HXDLIN(1420)		::zui::Zui_obj::isCut = true;
HXDLIN(1420)		return this->onCopy();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,onCut,return )

::String Zui_obj::onCopy(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1421_onCopy)
HXDLIN(1421)		::zui::Zui_obj::isCopy = true;
HXDLIN(1421)		return ::zui::Zui_obj::textToCopy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,onCopy,return )

void Zui_obj::onPaste(::String s){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1422_onPaste)
HXDLIN(1422)		::zui::Zui_obj::isPaste = true;
HXDLIN(1422)		::zui::Zui_obj::textToPaste = s;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zui_obj,onPaste,(void))

Float Zui_obj::ELEMENT_W(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1424_ELEMENT_W)
HXDLIN(1424)		return (( (Float)(this->t->__Field(HX_("ELEMENT_W",b4,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,ELEMENT_W,return )

Float Zui_obj::ELEMENT_H(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1425_ELEMENT_H)
HXDLIN(1425)		return (( (Float)(this->t->__Field(HX_("ELEMENT_H",a5,b4,43,c3),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,ELEMENT_H,return )

Float Zui_obj::ELEMENT_OFFSET(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1426_ELEMENT_OFFSET)
HXDLIN(1426)		return (( (Float)(this->t->__Field(HX_("ELEMENT_OFFSET",16,9e,c2,08),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,ELEMENT_OFFSET,return )

Float Zui_obj::ARROW_SIZE(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1427_ARROW_SIZE)
HXDLIN(1427)		return (( (Float)(this->t->__Field(HX_("ARROW_SIZE",57,2e,b6,3e),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,ARROW_SIZE,return )

Float Zui_obj::BUTTON_H(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1428_BUTTON_H)
HXDLIN(1428)		return (( (Float)(this->t->__Field(HX_("BUTTON_H",7b,41,b8,b5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,BUTTON_H,return )

Float Zui_obj::CHECK_SIZE(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1429_CHECK_SIZE)
HXDLIN(1429)		return (( (Float)(this->t->__Field(HX_("CHECK_SIZE",f8,52,03,db),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,CHECK_SIZE,return )

Float Zui_obj::CHECK_SELECT_SIZE(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1430_CHECK_SELECT_SIZE)
HXDLIN(1430)		return (( (Float)(this->t->__Field(HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,CHECK_SELECT_SIZE,return )

int Zui_obj::FONT_SIZE(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1431_FONT_SIZE)
HXDLIN(1431)		return ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("FONT_SIZE",71,f0,3d,80),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,FONT_SIZE,return )

int Zui_obj::SCROLL_W(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1432_SCROLL_W)
HXDLIN(1432)		return ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("SCROLL_W",65,b4,da,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,SCROLL_W,return )

Float Zui_obj::TEXT_OFFSET(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1433_TEXT_OFFSET)
HXDLIN(1433)		return (( (Float)(this->t->__Field(HX_("TEXT_OFFSET",25,60,d0,e5),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,TEXT_OFFSET,return )

int Zui_obj::TAB_W(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1434_TAB_W)
HXDLIN(1434)		return ::Std_obj::_hx_int((( (Float)(this->t->__Field(HX_("TAB_W",8d,00,d2,88),hx::paccDynamic)) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,TAB_W,return )

int Zui_obj::HEADER_DRAG_H(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1435_HEADER_DRAG_H)
HXDLIN(1435)		return ::Std_obj::_hx_int((( (Float)(15) ) * ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,HEADER_DRAG_H,return )

Float Zui_obj::SCALE(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1436_SCALE)
HXDLIN(1436)		return ( (Float)(this->ops->__Field(HX_("scaleFactor",f9,5e,11,d0),hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,SCALE,return )

Float Zui_obj::FLASH_SPEED(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1437_FLASH_SPEED)
HXDLIN(1437)		return ((Float)0.5);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,FLASH_SPEED,return )

Float Zui_obj::TOOLTIP_DELAY(){
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1438_TOOLTIP_DELAY)
HXDLIN(1438)		return ((Float)1.0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zui_obj,TOOLTIP_DELAY,return )

void Zui_obj::resize( ::zui::Handle handle,int w,int h,hx::Null< int >  __o_khaWindowId){
            		int khaWindowId = __o_khaWindowId.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1440_resize)
HXLINE(1441)		handle->redraws = 2;
HXLINE(1442)		if (hx::IsNotNull( handle->texture )) {
HXLINE(1442)			handle->texture->unload();
            		}
HXLINE(1443)		if ((w < 1)) {
HXLINE(1443)			w = 1;
            		}
HXLINE(1444)		if ((h < 1)) {
HXLINE(1444)			h = 1;
            		}
HXLINE(1445)		handle->_hx_set_texture(HX_CTX, ::kha::Image_obj::createRenderTarget(w,h,0,0,1,khaWindowId));
HXLINE(1446)		handle->texture->get_g2()->set_imageScaleQuality(1);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Zui_obj,resize,(void))

 ::Dynamic Zui_obj::onBorderHover;

 ::Dynamic Zui_obj::onTextHover;

bool Zui_obj::alwaysRedrawWindow;

bool Zui_obj::keyRepeat;

Float Zui_obj::keyRepeatTime;

::String Zui_obj::textToPaste;

::String Zui_obj::textToCopy;

bool Zui_obj::isCut;

bool Zui_obj::isCopy;

bool Zui_obj::isPaste;

 ::zui::Zui Zui_obj::copyReceiver;

int Zui_obj::copyFrame;

bool Zui_obj::comboFirst;


hx::ObjectPtr< Zui_obj > Zui_obj::__new( ::Dynamic ops) {
	hx::ObjectPtr< Zui_obj > __this = new Zui_obj();
	__this->__construct(ops);
	return __this;
}

hx::ObjectPtr< Zui_obj > Zui_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic ops) {
	Zui_obj *__this = (Zui_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Zui_obj), true, "zui.Zui"));
	*(void **)__this = Zui_obj::_hx_vtable;
	__this->__construct(ops);
	return __this;
}

Zui_obj::Zui_obj()
{
}

void Zui_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Zui);
	HX_MARK_MEMBER_NAME(isScrolling,"isScrolling");
	HX_MARK_MEMBER_NAME(isTyping,"isTyping");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(isStarted,"isStarted");
	HX_MARK_MEMBER_NAME(isPushed,"isPushed");
	HX_MARK_MEMBER_NAME(isHovered,"isHovered");
	HX_MARK_MEMBER_NAME(isReleased,"isReleased");
	HX_MARK_MEMBER_NAME(changed,"changed");
	HX_MARK_MEMBER_NAME(imageInvertY,"imageInvertY");
	HX_MARK_MEMBER_NAME(scrollEnabled,"scrollEnabled");
	HX_MARK_MEMBER_NAME(alwaysRedraw,"alwaysRedraw");
	HX_MARK_MEMBER_NAME(highlightOnSelect,"highlightOnSelect");
	HX_MARK_MEMBER_NAME(tabSwitchEnabled,"tabSwitchEnabled");
	HX_MARK_MEMBER_NAME(inputRegistered,"inputRegistered");
	HX_MARK_MEMBER_NAME(inputEnabled,"inputEnabled");
	HX_MARK_MEMBER_NAME(inputX,"inputX");
	HX_MARK_MEMBER_NAME(inputY,"inputY");
	HX_MARK_MEMBER_NAME(inputStartedX,"inputStartedX");
	HX_MARK_MEMBER_NAME(inputStartedY,"inputStartedY");
	HX_MARK_MEMBER_NAME(inputDX,"inputDX");
	HX_MARK_MEMBER_NAME(inputDY,"inputDY");
	HX_MARK_MEMBER_NAME(inputWheelDelta,"inputWheelDelta");
	HX_MARK_MEMBER_NAME(inputStarted,"inputStarted");
	HX_MARK_MEMBER_NAME(inputStartedR,"inputStartedR");
	HX_MARK_MEMBER_NAME(inputReleased,"inputReleased");
	HX_MARK_MEMBER_NAME(inputReleasedR,"inputReleasedR");
	HX_MARK_MEMBER_NAME(inputDown,"inputDown");
	HX_MARK_MEMBER_NAME(inputDownR,"inputDownR");
	HX_MARK_MEMBER_NAME(isKeyPressed,"isKeyPressed");
	HX_MARK_MEMBER_NAME(isKeyDown,"isKeyDown");
	HX_MARK_MEMBER_NAME(isShiftDown,"isShiftDown");
	HX_MARK_MEMBER_NAME(isCtrlDown,"isCtrlDown");
	HX_MARK_MEMBER_NAME(isAltDown,"isAltDown");
	HX_MARK_MEMBER_NAME(isBackspaceDown,"isBackspaceDown");
	HX_MARK_MEMBER_NAME(isDeleteDown,"isDeleteDown");
	HX_MARK_MEMBER_NAME(isEscapeDown,"isEscapeDown");
	HX_MARK_MEMBER_NAME(isReturnDown,"isReturnDown");
	HX_MARK_MEMBER_NAME(key,"key");
	HX_MARK_MEMBER_NAME(_hx_char,"char");
	HX_MARK_MEMBER_NAME(cursorX,"cursorX");
	HX_MARK_MEMBER_NAME(highlightAnchor,"highlightAnchor");
	HX_MARK_MEMBER_NAME(ratios,"ratios");
	HX_MARK_MEMBER_NAME(curRatio,"curRatio");
	HX_MARK_MEMBER_NAME(xBeforeSplit,"xBeforeSplit");
	HX_MARK_MEMBER_NAME(wBeforeSplit,"wBeforeSplit");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(t,"t");
	HX_MARK_MEMBER_NAME(ops,"ops");
	HX_MARK_MEMBER_NAME(globalG,"globalG");
	HX_MARK_MEMBER_NAME(rtTextPipeline,"rtTextPipeline");
	HX_MARK_MEMBER_NAME(fontSize,"fontSize");
	HX_MARK_MEMBER_NAME(fontOffsetY,"fontOffsetY");
	HX_MARK_MEMBER_NAME(arrowOffsetX,"arrowOffsetX");
	HX_MARK_MEMBER_NAME(arrowOffsetY,"arrowOffsetY");
	HX_MARK_MEMBER_NAME(titleOffsetX,"titleOffsetX");
	HX_MARK_MEMBER_NAME(buttonOffsetY,"buttonOffsetY");
	HX_MARK_MEMBER_NAME(checkOffsetX,"checkOffsetX");
	HX_MARK_MEMBER_NAME(checkOffsetY,"checkOffsetY");
	HX_MARK_MEMBER_NAME(checkSelectOffsetX,"checkSelectOffsetX");
	HX_MARK_MEMBER_NAME(checkSelectOffsetY,"checkSelectOffsetY");
	HX_MARK_MEMBER_NAME(radioOffsetX,"radioOffsetX");
	HX_MARK_MEMBER_NAME(radioOffsetY,"radioOffsetY");
	HX_MARK_MEMBER_NAME(radioSelectOffsetX,"radioSelectOffsetX");
	HX_MARK_MEMBER_NAME(radioSelectOffsetY,"radioSelectOffsetY");
	HX_MARK_MEMBER_NAME(scrollAlign,"scrollAlign");
	HX_MARK_MEMBER_NAME(imageScrollAlign,"imageScrollAlign");
	HX_MARK_MEMBER_NAME(_x,"_x");
	HX_MARK_MEMBER_NAME(_y,"_y");
	HX_MARK_MEMBER_NAME(_w,"_w");
	HX_MARK_MEMBER_NAME(_h,"_h");
	HX_MARK_MEMBER_NAME(_windowX,"_windowX");
	HX_MARK_MEMBER_NAME(_windowY,"_windowY");
	HX_MARK_MEMBER_NAME(_windowW,"_windowW");
	HX_MARK_MEMBER_NAME(_windowH,"_windowH");
	HX_MARK_MEMBER_NAME(currentWindow,"currentWindow");
	HX_MARK_MEMBER_NAME(windowEnded,"windowEnded");
	HX_MARK_MEMBER_NAME(scrollHandle,"scrollHandle");
	HX_MARK_MEMBER_NAME(dragHandle,"dragHandle");
	HX_MARK_MEMBER_NAME(windowHeaderW,"windowHeaderW");
	HX_MARK_MEMBER_NAME(windowHeaderH,"windowHeaderH");
	HX_MARK_MEMBER_NAME(restoreX,"restoreX");
	HX_MARK_MEMBER_NAME(restoreY,"restoreY");
	HX_MARK_MEMBER_NAME(textSelectedHandle,"textSelectedHandle");
	HX_MARK_MEMBER_NAME(textSelected,"textSelected");
	HX_MARK_MEMBER_NAME(submitTextHandle,"submitTextHandle");
	HX_MARK_MEMBER_NAME(textToSubmit,"textToSubmit");
	HX_MARK_MEMBER_NAME(tabPressed,"tabPressed");
	HX_MARK_MEMBER_NAME(tabPressedHandle,"tabPressedHandle");
	HX_MARK_MEMBER_NAME(comboSelectedHandle,"comboSelectedHandle");
	HX_MARK_MEMBER_NAME(comboSelectedWindow,"comboSelectedWindow");
	HX_MARK_MEMBER_NAME(comboSelectedAlign,"comboSelectedAlign");
	HX_MARK_MEMBER_NAME(comboSelectedTexts,"comboSelectedTexts");
	HX_MARK_MEMBER_NAME(comboSelectedLabel,"comboSelectedLabel");
	HX_MARK_MEMBER_NAME(comboSelectedX,"comboSelectedX");
	HX_MARK_MEMBER_NAME(comboSelectedY,"comboSelectedY");
	HX_MARK_MEMBER_NAME(comboSelectedW,"comboSelectedW");
	HX_MARK_MEMBER_NAME(submitComboHandle,"submitComboHandle");
	HX_MARK_MEMBER_NAME(comboToSubmit,"comboToSubmit");
	HX_MARK_MEMBER_NAME(tooltipText,"tooltipText");
	HX_MARK_MEMBER_NAME(tooltipImg,"tooltipImg");
	HX_MARK_MEMBER_NAME(tooltipImgMaxWidth,"tooltipImgMaxWidth");
	HX_MARK_MEMBER_NAME(tooltipInvertY,"tooltipInvertY");
	HX_MARK_MEMBER_NAME(tooltipX,"tooltipX");
	HX_MARK_MEMBER_NAME(tooltipY,"tooltipY");
	HX_MARK_MEMBER_NAME(tooltipShown,"tooltipShown");
	HX_MARK_MEMBER_NAME(tooltipWait,"tooltipWait");
	HX_MARK_MEMBER_NAME(tooltipTime,"tooltipTime");
	HX_MARK_MEMBER_NAME(tabNames,"tabNames");
	HX_MARK_MEMBER_NAME(tabColors,"tabColors");
	HX_MARK_MEMBER_NAME(tabHandle,"tabHandle");
	HX_MARK_MEMBER_NAME(tabScroll,"tabScroll");
	HX_MARK_MEMBER_NAME(tabVertical,"tabVertical");
	HX_MARK_MEMBER_NAME(elementsBaked,"elementsBaked");
	HX_MARK_MEMBER_NAME(checkSelectImage,"checkSelectImage");
	HX_MARK_END_CLASS();
}

void Zui_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(isScrolling,"isScrolling");
	HX_VISIT_MEMBER_NAME(isTyping,"isTyping");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(isStarted,"isStarted");
	HX_VISIT_MEMBER_NAME(isPushed,"isPushed");
	HX_VISIT_MEMBER_NAME(isHovered,"isHovered");
	HX_VISIT_MEMBER_NAME(isReleased,"isReleased");
	HX_VISIT_MEMBER_NAME(changed,"changed");
	HX_VISIT_MEMBER_NAME(imageInvertY,"imageInvertY");
	HX_VISIT_MEMBER_NAME(scrollEnabled,"scrollEnabled");
	HX_VISIT_MEMBER_NAME(alwaysRedraw,"alwaysRedraw");
	HX_VISIT_MEMBER_NAME(highlightOnSelect,"highlightOnSelect");
	HX_VISIT_MEMBER_NAME(tabSwitchEnabled,"tabSwitchEnabled");
	HX_VISIT_MEMBER_NAME(inputRegistered,"inputRegistered");
	HX_VISIT_MEMBER_NAME(inputEnabled,"inputEnabled");
	HX_VISIT_MEMBER_NAME(inputX,"inputX");
	HX_VISIT_MEMBER_NAME(inputY,"inputY");
	HX_VISIT_MEMBER_NAME(inputStartedX,"inputStartedX");
	HX_VISIT_MEMBER_NAME(inputStartedY,"inputStartedY");
	HX_VISIT_MEMBER_NAME(inputDX,"inputDX");
	HX_VISIT_MEMBER_NAME(inputDY,"inputDY");
	HX_VISIT_MEMBER_NAME(inputWheelDelta,"inputWheelDelta");
	HX_VISIT_MEMBER_NAME(inputStarted,"inputStarted");
	HX_VISIT_MEMBER_NAME(inputStartedR,"inputStartedR");
	HX_VISIT_MEMBER_NAME(inputReleased,"inputReleased");
	HX_VISIT_MEMBER_NAME(inputReleasedR,"inputReleasedR");
	HX_VISIT_MEMBER_NAME(inputDown,"inputDown");
	HX_VISIT_MEMBER_NAME(inputDownR,"inputDownR");
	HX_VISIT_MEMBER_NAME(isKeyPressed,"isKeyPressed");
	HX_VISIT_MEMBER_NAME(isKeyDown,"isKeyDown");
	HX_VISIT_MEMBER_NAME(isShiftDown,"isShiftDown");
	HX_VISIT_MEMBER_NAME(isCtrlDown,"isCtrlDown");
	HX_VISIT_MEMBER_NAME(isAltDown,"isAltDown");
	HX_VISIT_MEMBER_NAME(isBackspaceDown,"isBackspaceDown");
	HX_VISIT_MEMBER_NAME(isDeleteDown,"isDeleteDown");
	HX_VISIT_MEMBER_NAME(isEscapeDown,"isEscapeDown");
	HX_VISIT_MEMBER_NAME(isReturnDown,"isReturnDown");
	HX_VISIT_MEMBER_NAME(key,"key");
	HX_VISIT_MEMBER_NAME(_hx_char,"char");
	HX_VISIT_MEMBER_NAME(cursorX,"cursorX");
	HX_VISIT_MEMBER_NAME(highlightAnchor,"highlightAnchor");
	HX_VISIT_MEMBER_NAME(ratios,"ratios");
	HX_VISIT_MEMBER_NAME(curRatio,"curRatio");
	HX_VISIT_MEMBER_NAME(xBeforeSplit,"xBeforeSplit");
	HX_VISIT_MEMBER_NAME(wBeforeSplit,"wBeforeSplit");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(t,"t");
	HX_VISIT_MEMBER_NAME(ops,"ops");
	HX_VISIT_MEMBER_NAME(globalG,"globalG");
	HX_VISIT_MEMBER_NAME(rtTextPipeline,"rtTextPipeline");
	HX_VISIT_MEMBER_NAME(fontSize,"fontSize");
	HX_VISIT_MEMBER_NAME(fontOffsetY,"fontOffsetY");
	HX_VISIT_MEMBER_NAME(arrowOffsetX,"arrowOffsetX");
	HX_VISIT_MEMBER_NAME(arrowOffsetY,"arrowOffsetY");
	HX_VISIT_MEMBER_NAME(titleOffsetX,"titleOffsetX");
	HX_VISIT_MEMBER_NAME(buttonOffsetY,"buttonOffsetY");
	HX_VISIT_MEMBER_NAME(checkOffsetX,"checkOffsetX");
	HX_VISIT_MEMBER_NAME(checkOffsetY,"checkOffsetY");
	HX_VISIT_MEMBER_NAME(checkSelectOffsetX,"checkSelectOffsetX");
	HX_VISIT_MEMBER_NAME(checkSelectOffsetY,"checkSelectOffsetY");
	HX_VISIT_MEMBER_NAME(radioOffsetX,"radioOffsetX");
	HX_VISIT_MEMBER_NAME(radioOffsetY,"radioOffsetY");
	HX_VISIT_MEMBER_NAME(radioSelectOffsetX,"radioSelectOffsetX");
	HX_VISIT_MEMBER_NAME(radioSelectOffsetY,"radioSelectOffsetY");
	HX_VISIT_MEMBER_NAME(scrollAlign,"scrollAlign");
	HX_VISIT_MEMBER_NAME(imageScrollAlign,"imageScrollAlign");
	HX_VISIT_MEMBER_NAME(_x,"_x");
	HX_VISIT_MEMBER_NAME(_y,"_y");
	HX_VISIT_MEMBER_NAME(_w,"_w");
	HX_VISIT_MEMBER_NAME(_h,"_h");
	HX_VISIT_MEMBER_NAME(_windowX,"_windowX");
	HX_VISIT_MEMBER_NAME(_windowY,"_windowY");
	HX_VISIT_MEMBER_NAME(_windowW,"_windowW");
	HX_VISIT_MEMBER_NAME(_windowH,"_windowH");
	HX_VISIT_MEMBER_NAME(currentWindow,"currentWindow");
	HX_VISIT_MEMBER_NAME(windowEnded,"windowEnded");
	HX_VISIT_MEMBER_NAME(scrollHandle,"scrollHandle");
	HX_VISIT_MEMBER_NAME(dragHandle,"dragHandle");
	HX_VISIT_MEMBER_NAME(windowHeaderW,"windowHeaderW");
	HX_VISIT_MEMBER_NAME(windowHeaderH,"windowHeaderH");
	HX_VISIT_MEMBER_NAME(restoreX,"restoreX");
	HX_VISIT_MEMBER_NAME(restoreY,"restoreY");
	HX_VISIT_MEMBER_NAME(textSelectedHandle,"textSelectedHandle");
	HX_VISIT_MEMBER_NAME(textSelected,"textSelected");
	HX_VISIT_MEMBER_NAME(submitTextHandle,"submitTextHandle");
	HX_VISIT_MEMBER_NAME(textToSubmit,"textToSubmit");
	HX_VISIT_MEMBER_NAME(tabPressed,"tabPressed");
	HX_VISIT_MEMBER_NAME(tabPressedHandle,"tabPressedHandle");
	HX_VISIT_MEMBER_NAME(comboSelectedHandle,"comboSelectedHandle");
	HX_VISIT_MEMBER_NAME(comboSelectedWindow,"comboSelectedWindow");
	HX_VISIT_MEMBER_NAME(comboSelectedAlign,"comboSelectedAlign");
	HX_VISIT_MEMBER_NAME(comboSelectedTexts,"comboSelectedTexts");
	HX_VISIT_MEMBER_NAME(comboSelectedLabel,"comboSelectedLabel");
	HX_VISIT_MEMBER_NAME(comboSelectedX,"comboSelectedX");
	HX_VISIT_MEMBER_NAME(comboSelectedY,"comboSelectedY");
	HX_VISIT_MEMBER_NAME(comboSelectedW,"comboSelectedW");
	HX_VISIT_MEMBER_NAME(submitComboHandle,"submitComboHandle");
	HX_VISIT_MEMBER_NAME(comboToSubmit,"comboToSubmit");
	HX_VISIT_MEMBER_NAME(tooltipText,"tooltipText");
	HX_VISIT_MEMBER_NAME(tooltipImg,"tooltipImg");
	HX_VISIT_MEMBER_NAME(tooltipImgMaxWidth,"tooltipImgMaxWidth");
	HX_VISIT_MEMBER_NAME(tooltipInvertY,"tooltipInvertY");
	HX_VISIT_MEMBER_NAME(tooltipX,"tooltipX");
	HX_VISIT_MEMBER_NAME(tooltipY,"tooltipY");
	HX_VISIT_MEMBER_NAME(tooltipShown,"tooltipShown");
	HX_VISIT_MEMBER_NAME(tooltipWait,"tooltipWait");
	HX_VISIT_MEMBER_NAME(tooltipTime,"tooltipTime");
	HX_VISIT_MEMBER_NAME(tabNames,"tabNames");
	HX_VISIT_MEMBER_NAME(tabColors,"tabColors");
	HX_VISIT_MEMBER_NAME(tabHandle,"tabHandle");
	HX_VISIT_MEMBER_NAME(tabScroll,"tabScroll");
	HX_VISIT_MEMBER_NAME(tabVertical,"tabVertical");
	HX_VISIT_MEMBER_NAME(elementsBaked,"elementsBaked");
	HX_VISIT_MEMBER_NAME(checkSelectImage,"checkSelectImage");
}

hx::Val Zui_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g ); }
		if (HX_FIELD_EQ(inName,"t") ) { return hx::Val( t ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"_x") ) { return hx::Val( _x ); }
		if (HX_FIELD_EQ(inName,"_y") ) { return hx::Val( _y ); }
		if (HX_FIELD_EQ(inName,"_w") ) { return hx::Val( _w ); }
		if (HX_FIELD_EQ(inName,"_h") ) { return hx::Val( _h ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { return hx::Val( key ); }
		if (HX_FIELD_EQ(inName,"ops") ) { return hx::Val( ops ); }
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn() ); }
		if (HX_FIELD_EQ(inName,"tab") ) { return hx::Val( tab_dyn() ); }
		if (HX_FIELD_EQ(inName,"row") ) { return hx::Val( row_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"char") ) { return hx::Val( _hx_char ); }
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text_dyn() ); }
		if (HX_FIELD_EQ(inName,"fill") ) { return hx::Val( fill_dyn() ); }
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"panel") ) { return hx::Val( panel_dyn() ); }
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image_dyn() ); }
		if (HX_FIELD_EQ(inName,"check") ) { return hx::Val( check_dyn() ); }
		if (HX_FIELD_EQ(inName,"radio") ) { return hx::Val( radio_dyn() ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return hx::Val( combo_dyn() ); }
		if (HX_FIELD_EQ(inName,"onCut") ) { return hx::Val( onCut_dyn() ); }
		if (HX_FIELD_EQ(inName,"TAB_W") ) { return hx::Val( TAB_W_dyn() ); }
		if (HX_FIELD_EQ(inName,"SCALE") ) { return hx::Val( SCALE_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"inputX") ) { return hx::Val( inputX ); }
		if (HX_FIELD_EQ(inName,"inputY") ) { return hx::Val( inputY ); }
		if (HX_FIELD_EQ(inName,"ratios") ) { return hx::Val( ratios ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"window") ) { return hx::Val( window_dyn() ); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"button") ) { return hx::Val( button_dyn() ); }
		if (HX_FIELD_EQ(inName,"slider") ) { return hx::Val( slider_dyn() ); }
		if (HX_FIELD_EQ(inName,"indent") ) { return hx::Val( indent_dyn() ); }
		if (HX_FIELD_EQ(inName,"onCopy") ) { return hx::Val( onCopy_dyn() ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return hx::Val( enabled ); }
		if (HX_FIELD_EQ(inName,"changed") ) { return hx::Val( changed ); }
		if (HX_FIELD_EQ(inName,"inputDX") ) { return hx::Val( inputDX ); }
		if (HX_FIELD_EQ(inName,"inputDY") ) { return hx::Val( inputDY ); }
		if (HX_FIELD_EQ(inName,"cursorX") ) { return hx::Val( cursorX ); }
		if (HX_FIELD_EQ(inName,"globalG") ) { return hx::Val( globalG ); }
		if (HX_FIELD_EQ(inName,"tooltip") ) { return hx::Val( tooltip_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyUp") ) { return hx::Val( onKeyUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"onPaste") ) { return hx::Val( onPaste_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isTyping") ) { return hx::Val( isTyping ); }
		if (HX_FIELD_EQ(inName,"isPushed") ) { return hx::Val( isPushed ); }
		if (HX_FIELD_EQ(inName,"curRatio") ) { return hx::Val( curRatio ); }
		if (HX_FIELD_EQ(inName,"fontSize") ) { return hx::Val( fontSize ); }
		if (HX_FIELD_EQ(inName,"_windowX") ) { return hx::Val( _windowX ); }
		if (HX_FIELD_EQ(inName,"_windowY") ) { return hx::Val( _windowY ); }
		if (HX_FIELD_EQ(inName,"_windowW") ) { return hx::Val( _windowW ); }
		if (HX_FIELD_EQ(inName,"_windowH") ) { return hx::Val( _windowH ); }
		if (HX_FIELD_EQ(inName,"restoreX") ) { return hx::Val( restoreX ); }
		if (HX_FIELD_EQ(inName,"restoreY") ) { return hx::Val( restoreY ); }
		if (HX_FIELD_EQ(inName,"tooltipX") ) { return hx::Val( tooltipX ); }
		if (HX_FIELD_EQ(inName,"tooltipY") ) { return hx::Val( tooltipY ); }
		if (HX_FIELD_EQ(inName,"tabNames") ) { return hx::Val( tabNames ); }
		if (HX_FIELD_EQ(inName,"setScale") ) { return hx::Val( setScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"endInput") ) { return hx::Val( endInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTabs") ) { return hx::Val( drawTabs_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTree") ) { return hx::Val( drawTree_dyn() ); }
		if (HX_FIELD_EQ(inName,"unindent") ) { return hx::Val( unindent_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawRect") ) { return hx::Val( drawRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getHover") ) { return hx::Val( getHover_dyn() ); }
		if (HX_FIELD_EQ(inName,"BUTTON_H") ) { return hx::Val( BUTTON_H_dyn() ); }
		if (HX_FIELD_EQ(inName,"SCROLL_W") ) { return hx::Val( SCROLL_W_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isStarted") ) { return hx::Val( isStarted ); }
		if (HX_FIELD_EQ(inName,"isHovered") ) { return hx::Val( isHovered ); }
		if (HX_FIELD_EQ(inName,"inputDown") ) { return hx::Val( inputDown ); }
		if (HX_FIELD_EQ(inName,"isKeyDown") ) { return hx::Val( isKeyDown ); }
		if (HX_FIELD_EQ(inName,"isAltDown") ) { return hx::Val( isAltDown ); }
		if (HX_FIELD_EQ(inName,"tabColors") ) { return hx::Val( tabColors ); }
		if (HX_FIELD_EQ(inName,"tabHandle") ) { return hx::Val( tabHandle ); }
		if (HX_FIELD_EQ(inName,"tabScroll") ) { return hx::Val( tabScroll ); }
		if (HX_FIELD_EQ(inName,"endRegion") ) { return hx::Val( endRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"endWindow") ) { return hx::Val( endWindow_dyn() ); }
		if (HX_FIELD_EQ(inName,"splitText") ) { return hx::Val( splitText_dyn() ); }
		if (HX_FIELD_EQ(inName,"textInput") ) { return hx::Val( textInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"separator") ) { return hx::Val( separator_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawArrow") ) { return hx::Val( drawArrow_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawCheck") ) { return hx::Val( drawCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawRadio") ) { return hx::Val( drawRadio_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawCombo") ) { return hx::Val( drawCombo_dyn() ); }
		if (HX_FIELD_EQ(inName,"fadeColor") ) { return hx::Val( fadeColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"isVisible") ) { return hx::Val( isVisible_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPushed") ) { return hx::Val( getPushed_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return hx::Val( onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return hx::Val( onKeyDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"ELEMENT_W") ) { return hx::Val( ELEMENT_W_dyn() ); }
		if (HX_FIELD_EQ(inName,"ELEMENT_H") ) { return hx::Val( ELEMENT_H_dyn() ); }
		if (HX_FIELD_EQ(inName,"FONT_SIZE") ) { return hx::Val( FONT_SIZE_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isReleased") ) { return hx::Val( isReleased ); }
		if (HX_FIELD_EQ(inName,"inputDownR") ) { return hx::Val( inputDownR ); }
		if (HX_FIELD_EQ(inName,"isCtrlDown") ) { return hx::Val( isCtrlDown ); }
		if (HX_FIELD_EQ(inName,"dragHandle") ) { return hx::Val( dragHandle ); }
		if (HX_FIELD_EQ(inName,"tabPressed") ) { return hx::Val( tabPressed ); }
		if (HX_FIELD_EQ(inName,"tooltipImg") ) { return hx::Val( tooltipImg ); }
		if (HX_FIELD_EQ(inName,"drawSlider") ) { return hx::Val( drawSlider_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawString") ) { return hx::Val( drawString_dyn() ); }
		if (HX_FIELD_EQ(inName,"endElement") ) { return hx::Val( endElement_dyn() ); }
		if (HX_FIELD_EQ(inName,"getStarted") ) { return hx::Val( getStarted_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyPress") ) { return hx::Val( onKeyPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"ARROW_SIZE") ) { return hx::Val( ARROW_SIZE_dyn() ); }
		if (HX_FIELD_EQ(inName,"CHECK_SIZE") ) { return hx::Val( CHECK_SIZE_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isScrolling") ) { return hx::Val( isScrolling ); }
		if (HX_FIELD_EQ(inName,"isShiftDown") ) { return hx::Val( isShiftDown ); }
		if (HX_FIELD_EQ(inName,"fontOffsetY") ) { return hx::Val( fontOffsetY ); }
		if (HX_FIELD_EQ(inName,"scrollAlign") ) { return hx::Val( scrollAlign ); }
		if (HX_FIELD_EQ(inName,"windowEnded") ) { return hx::Val( windowEnded ); }
		if (HX_FIELD_EQ(inName,"tooltipText") ) { return hx::Val( tooltipText ); }
		if (HX_FIELD_EQ(inName,"tooltipWait") ) { return hx::Val( tooltipWait ); }
		if (HX_FIELD_EQ(inName,"tooltipTime") ) { return hx::Val( tooltipTime ); }
		if (HX_FIELD_EQ(inName,"tabVertical") ) { return hx::Val( tabVertical ); }
		if (HX_FIELD_EQ(inName,"beginRegion") ) { return hx::Val( beginRegion_dyn() ); }
		if (HX_FIELD_EQ(inName,"windowDirty") ) { return hx::Val( windowDirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTooltip") ) { return hx::Val( drawTooltip_dyn() ); }
		if (HX_FIELD_EQ(inName,"getReleased") ) { return hx::Val( getReleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return hx::Val( onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseMove") ) { return hx::Val( onMouseMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"TEXT_OFFSET") ) { return hx::Val( TEXT_OFFSET_dyn() ); }
		if (HX_FIELD_EQ(inName,"FLASH_SPEED") ) { return hx::Val( FLASH_SPEED_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"imageInvertY") ) { return hx::Val( imageInvertY ); }
		if (HX_FIELD_EQ(inName,"alwaysRedraw") ) { return hx::Val( alwaysRedraw ); }
		if (HX_FIELD_EQ(inName,"inputEnabled") ) { return hx::Val( inputEnabled ); }
		if (HX_FIELD_EQ(inName,"inputStarted") ) { return hx::Val( inputStarted ); }
		if (HX_FIELD_EQ(inName,"isKeyPressed") ) { return hx::Val( isKeyPressed ); }
		if (HX_FIELD_EQ(inName,"isDeleteDown") ) { return hx::Val( isDeleteDown ); }
		if (HX_FIELD_EQ(inName,"isEscapeDown") ) { return hx::Val( isEscapeDown ); }
		if (HX_FIELD_EQ(inName,"isReturnDown") ) { return hx::Val( isReturnDown ); }
		if (HX_FIELD_EQ(inName,"xBeforeSplit") ) { return hx::Val( xBeforeSplit ); }
		if (HX_FIELD_EQ(inName,"wBeforeSplit") ) { return hx::Val( wBeforeSplit ); }
		if (HX_FIELD_EQ(inName,"arrowOffsetX") ) { return hx::Val( arrowOffsetX ); }
		if (HX_FIELD_EQ(inName,"arrowOffsetY") ) { return hx::Val( arrowOffsetY ); }
		if (HX_FIELD_EQ(inName,"titleOffsetX") ) { return hx::Val( titleOffsetX ); }
		if (HX_FIELD_EQ(inName,"checkOffsetX") ) { return hx::Val( checkOffsetX ); }
		if (HX_FIELD_EQ(inName,"checkOffsetY") ) { return hx::Val( checkOffsetY ); }
		if (HX_FIELD_EQ(inName,"radioOffsetX") ) { return hx::Val( radioOffsetX ); }
		if (HX_FIELD_EQ(inName,"radioOffsetY") ) { return hx::Val( radioOffsetY ); }
		if (HX_FIELD_EQ(inName,"scrollHandle") ) { return hx::Val( scrollHandle ); }
		if (HX_FIELD_EQ(inName,"textSelected") ) { return hx::Val( textSelected ); }
		if (HX_FIELD_EQ(inName,"textToSubmit") ) { return hx::Val( textToSubmit ); }
		if (HX_FIELD_EQ(inName,"tooltipShown") ) { return hx::Val( tooltipShown ); }
		if (HX_FIELD_EQ(inName,"bakeElements") ) { return hx::Val( bakeElements_dyn() ); }
		if (HX_FIELD_EQ(inName,"inputChanged") ) { return hx::Val( inputChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"deselectText") ) { return hx::Val( deselectText_dyn() ); }
		if (HX_FIELD_EQ(inName,"tooltipImage") ) { return hx::Val( tooltipImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseWheel") ) { return hx::Val( onMouseWheel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"scrollEnabled") ) { return hx::Val( scrollEnabled ); }
		if (HX_FIELD_EQ(inName,"inputStartedX") ) { return hx::Val( inputStartedX ); }
		if (HX_FIELD_EQ(inName,"inputStartedY") ) { return hx::Val( inputStartedY ); }
		if (HX_FIELD_EQ(inName,"inputStartedR") ) { return hx::Val( inputStartedR ); }
		if (HX_FIELD_EQ(inName,"inputReleased") ) { return hx::Val( inputReleased ); }
		if (HX_FIELD_EQ(inName,"buttonOffsetY") ) { return hx::Val( buttonOffsetY ); }
		if (HX_FIELD_EQ(inName,"currentWindow") ) { return hx::Val( currentWindow ); }
		if (HX_FIELD_EQ(inName,"windowHeaderW") ) { return hx::Val( windowHeaderW ); }
		if (HX_FIELD_EQ(inName,"windowHeaderH") ) { return hx::Val( windowHeaderH ); }
		if (HX_FIELD_EQ(inName,"comboToSubmit") ) { return hx::Val( comboToSubmit ); }
		if (HX_FIELD_EQ(inName,"elementsBaked") ) { return hx::Val( elementsBaked ); }
		if (HX_FIELD_EQ(inName,"registerInput") ) { return hx::Val( registerInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"startTextEdit") ) { return hx::Val( startTextEdit_dyn() ); }
		if (HX_FIELD_EQ(inName,"HEADER_DRAG_H") ) { return hx::Val( HEADER_DRAG_H_dyn() ); }
		if (HX_FIELD_EQ(inName,"TOOLTIP_DELAY") ) { return hx::Val( TOOLTIP_DELAY_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inputReleasedR") ) { return hx::Val( inputReleasedR ); }
		if (HX_FIELD_EQ(inName,"rtTextPipeline") ) { return hx::Val( rtTextPipeline ); }
		if (HX_FIELD_EQ(inName,"comboSelectedX") ) { return hx::Val( comboSelectedX ); }
		if (HX_FIELD_EQ(inName,"comboSelectedY") ) { return hx::Val( comboSelectedY ); }
		if (HX_FIELD_EQ(inName,"comboSelectedW") ) { return hx::Val( comboSelectedW ); }
		if (HX_FIELD_EQ(inName,"tooltipInvertY") ) { return hx::Val( tooltipInvertY ); }
		if (HX_FIELD_EQ(inName,"submitTextEdit") ) { return hx::Val( submitTextEdit_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTextEdit") ) { return hx::Val( updateTextEdit_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInputInRect") ) { return hx::Val( getInputInRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"ELEMENT_OFFSET") ) { return hx::Val( ELEMENT_OFFSET_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"inputRegistered") ) { return hx::Val( inputRegistered ); }
		if (HX_FIELD_EQ(inName,"inputWheelDelta") ) { return hx::Val( inputWheelDelta ); }
		if (HX_FIELD_EQ(inName,"isBackspaceDown") ) { return hx::Val( isBackspaceDown ); }
		if (HX_FIELD_EQ(inName,"highlightAnchor") ) { return hx::Val( highlightAnchor ); }
		if (HX_FIELD_EQ(inName,"unregisterInput") ) { return hx::Val( unregisterInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTooltipText") ) { return hx::Val( drawTooltipText_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInitialHover") ) { return hx::Val( getInitialHover_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"tabSwitchEnabled") ) { return hx::Val( tabSwitchEnabled ); }
		if (HX_FIELD_EQ(inName,"imageScrollAlign") ) { return hx::Val( imageScrollAlign ); }
		if (HX_FIELD_EQ(inName,"submitTextHandle") ) { return hx::Val( submitTextHandle ); }
		if (HX_FIELD_EQ(inName,"tabPressedHandle") ) { return hx::Val( tabPressedHandle ); }
		if (HX_FIELD_EQ(inName,"checkSelectImage") ) { return hx::Val( checkSelectImage ); }
		if (HX_FIELD_EQ(inName,"drawTooltipImage") ) { return hx::Val( drawTooltipImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"setInputPosition") ) { return hx::Val( setInputPosition_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"highlightOnSelect") ) { return hx::Val( highlightOnSelect ); }
		if (HX_FIELD_EQ(inName,"submitComboHandle") ) { return hx::Val( submitComboHandle ); }
		if (HX_FIELD_EQ(inName,"CHECK_SELECT_SIZE") ) { return hx::Val( CHECK_SELECT_SIZE_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"checkSelectOffsetX") ) { return hx::Val( checkSelectOffsetX ); }
		if (HX_FIELD_EQ(inName,"checkSelectOffsetY") ) { return hx::Val( checkSelectOffsetY ); }
		if (HX_FIELD_EQ(inName,"radioSelectOffsetX") ) { return hx::Val( radioSelectOffsetX ); }
		if (HX_FIELD_EQ(inName,"radioSelectOffsetY") ) { return hx::Val( radioSelectOffsetY ); }
		if (HX_FIELD_EQ(inName,"textSelectedHandle") ) { return hx::Val( textSelectedHandle ); }
		if (HX_FIELD_EQ(inName,"comboSelectedAlign") ) { return hx::Val( comboSelectedAlign ); }
		if (HX_FIELD_EQ(inName,"comboSelectedTexts") ) { return hx::Val( comboSelectedTexts ); }
		if (HX_FIELD_EQ(inName,"comboSelectedLabel") ) { return hx::Val( comboSelectedLabel ); }
		if (HX_FIELD_EQ(inName,"tooltipImgMaxWidth") ) { return hx::Val( tooltipImgMaxWidth ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"comboSelectedHandle") ) { return hx::Val( comboSelectedHandle ); }
		if (HX_FIELD_EQ(inName,"comboSelectedWindow") ) { return hx::Val( comboSelectedWindow ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Zui_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"isCut") ) { outValue = ( isCut ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isCopy") ) { outValue = ( isCopy ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isPaste") ) { outValue = ( isPaste ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"keyRepeat") ) { outValue = ( keyRepeat ); return true; }
		if (HX_FIELD_EQ(inName,"copyFrame") ) { outValue = ( copyFrame ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textToCopy") ) { outValue = ( textToCopy ); return true; }
		if (HX_FIELD_EQ(inName,"comboFirst") ) { outValue = ( comboFirst ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onTextHover") ) { outValue = ( onTextHover ); return true; }
		if (HX_FIELD_EQ(inName,"textToPaste") ) { outValue = ( textToPaste ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyReceiver") ) { outValue = ( copyReceiver ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onBorderHover") ) { outValue = ( onBorderHover ); return true; }
		if (HX_FIELD_EQ(inName,"keyRepeatTime") ) { outValue = ( keyRepeatTime ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"alwaysRedrawWindow") ) { outValue = ( alwaysRedrawWindow ); return true; }
	}
	return false;
}

hx::Val Zui_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { _hx_set_g(HX_CTX_GET,inValue.Cast<  ::kha::graphics2::Graphics >()); return inValue; }
		if (HX_FIELD_EQ(inName,"t") ) { _hx_set_t(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"_x") ) { _x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_y") ) { _y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_w") ) { _w=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_h") ) { _h=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { _hx_set_key(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		if (HX_FIELD_EQ(inName,"ops") ) { _hx_set_ops(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"char") ) { _hx_set__hx_char(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"inputX") ) { inputX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputY") ) { inputY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratios") ) { _hx_set_ratios(HX_CTX_GET,inValue.Cast< ::Array< Float > >()); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"changed") ) { changed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputDX") ) { inputDX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputDY") ) { inputDY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cursorX") ) { cursorX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"globalG") ) { _hx_set_globalG(HX_CTX_GET,inValue.Cast<  ::kha::graphics2::Graphics >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isTyping") ) { isTyping=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isPushed") ) { isPushed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curRatio") ) { curRatio=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fontSize") ) { fontSize=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_windowX") ) { _windowX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_windowY") ) { _windowY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_windowW") ) { _windowW=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_windowH") ) { _windowH=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restoreX") ) { restoreX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restoreY") ) { restoreY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipX") ) { tooltipX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipY") ) { tooltipY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tabNames") ) { _hx_set_tabNames(HX_CTX_GET,inValue.Cast< ::Array< ::String > >()); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isStarted") ) { isStarted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isHovered") ) { isHovered=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputDown") ) { inputDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isKeyDown") ) { isKeyDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isAltDown") ) { isAltDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tabColors") ) { _hx_set_tabColors(HX_CTX_GET,inValue.Cast< ::Array< int > >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tabHandle") ) { _hx_set_tabHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tabScroll") ) { tabScroll=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isReleased") ) { isReleased=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputDownR") ) { inputDownR=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isCtrlDown") ) { isCtrlDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragHandle") ) { _hx_set_dragHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tabPressed") ) { tabPressed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipImg") ) { _hx_set_tooltipImg(HX_CTX_GET,inValue.Cast<  ::kha::Image >()); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isScrolling") ) { isScrolling=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isShiftDown") ) { isShiftDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fontOffsetY") ) { fontOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollAlign") ) { scrollAlign=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowEnded") ) { windowEnded=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipText") ) { _hx_set_tooltipText(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipWait") ) { tooltipWait=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipTime") ) { tooltipTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tabVertical") ) { tabVertical=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"imageInvertY") ) { imageInvertY=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alwaysRedraw") ) { alwaysRedraw=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputEnabled") ) { inputEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputStarted") ) { inputStarted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isKeyPressed") ) { isKeyPressed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDeleteDown") ) { isDeleteDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isEscapeDown") ) { isEscapeDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isReturnDown") ) { isReturnDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xBeforeSplit") ) { xBeforeSplit=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wBeforeSplit") ) { wBeforeSplit=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arrowOffsetX") ) { arrowOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arrowOffsetY") ) { arrowOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"titleOffsetX") ) { titleOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checkOffsetX") ) { checkOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checkOffsetY") ) { checkOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"radioOffsetX") ) { radioOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"radioOffsetY") ) { radioOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollHandle") ) { _hx_set_scrollHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"textSelected") ) { _hx_set_textSelected(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"textToSubmit") ) { _hx_set_textToSubmit(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipShown") ) { tooltipShown=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"scrollEnabled") ) { scrollEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputStartedX") ) { inputStartedX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputStartedY") ) { inputStartedY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputStartedR") ) { inputStartedR=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputReleased") ) { inputReleased=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buttonOffsetY") ) { buttonOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentWindow") ) { _hx_set_currentWindow(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"windowHeaderW") ) { windowHeaderW=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowHeaderH") ) { windowHeaderH=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboToSubmit") ) { comboToSubmit=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"elementsBaked") ) { elementsBaked=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inputReleasedR") ) { inputReleasedR=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rtTextPipeline") ) { _hx_set_rtTextPipeline(HX_CTX_GET,inValue.Cast<  ::kha::graphics4::PipelineState >()); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSelectedX") ) { comboSelectedX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSelectedY") ) { comboSelectedY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSelectedW") ) { comboSelectedW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipInvertY") ) { tooltipInvertY=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"inputRegistered") ) { inputRegistered=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inputWheelDelta") ) { inputWheelDelta=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isBackspaceDown") ) { isBackspaceDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"highlightAnchor") ) { highlightAnchor=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"tabSwitchEnabled") ) { tabSwitchEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"imageScrollAlign") ) { imageScrollAlign=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"submitTextHandle") ) { _hx_set_submitTextHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tabPressedHandle") ) { _hx_set_tabPressedHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"checkSelectImage") ) { _hx_set_checkSelectImage(HX_CTX_GET,inValue.Cast<  ::kha::Image >()); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"highlightOnSelect") ) { highlightOnSelect=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"submitComboHandle") ) { _hx_set_submitComboHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"checkSelectOffsetX") ) { checkSelectOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checkSelectOffsetY") ) { checkSelectOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"radioSelectOffsetX") ) { radioSelectOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"radioSelectOffsetY") ) { radioSelectOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textSelectedHandle") ) { _hx_set_textSelectedHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSelectedAlign") ) { comboSelectedAlign=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSelectedTexts") ) { _hx_set_comboSelectedTexts(HX_CTX_GET,inValue.Cast< ::Array< ::String > >()); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSelectedLabel") ) { _hx_set_comboSelectedLabel(HX_CTX_GET,inValue.Cast< ::String >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tooltipImgMaxWidth") ) { _hx_set_tooltipImgMaxWidth(HX_CTX_GET,inValue.Cast<  ::Dynamic >()); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"comboSelectedHandle") ) { _hx_set_comboSelectedHandle(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSelectedWindow") ) { _hx_set_comboSelectedWindow(HX_CTX_GET,inValue.Cast<  ::zui::Handle >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Zui_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"isCut") ) { isCut=ioValue.Cast< bool >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isCopy") ) { isCopy=ioValue.Cast< bool >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isPaste") ) { isPaste=ioValue.Cast< bool >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"keyRepeat") ) { keyRepeat=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"copyFrame") ) { copyFrame=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"textToCopy") ) { textToCopy=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"comboFirst") ) { comboFirst=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onTextHover") ) { onTextHover=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"textToPaste") ) { textToPaste=ioValue.Cast< ::String >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyReceiver") ) { copyReceiver=ioValue.Cast<  ::zui::Zui >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onBorderHover") ) { onBorderHover=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"keyRepeatTime") ) { keyRepeatTime=ioValue.Cast< Float >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"alwaysRedrawWindow") ) { alwaysRedrawWindow=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Zui_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("isScrolling",ab,b1,9a,1c));
	outFields->push(HX_("isTyping",01,9a,a3,af));
	outFields->push(HX_("enabled",81,04,31,7e));
	outFields->push(HX_("isStarted",77,a6,19,39));
	outFields->push(HX_("isPushed",43,b0,96,ca));
	outFields->push(HX_("isHovered",51,a2,b5,7e));
	outFields->push(HX_("isReleased",c7,9a,96,f1));
	outFields->push(HX_("changed",f4,b0,cc,cc));
	outFields->push(HX_("imageInvertY",68,c6,b9,2d));
	outFields->push(HX_("scrollEnabled",f4,1f,78,f0));
	outFields->push(HX_("alwaysRedraw",66,ed,9c,81));
	outFields->push(HX_("highlightOnSelect",cf,77,e1,02));
	outFields->push(HX_("tabSwitchEnabled",58,2d,3d,81));
	outFields->push(HX_("inputRegistered",2c,96,7c,a2));
	outFields->push(HX_("inputEnabled",97,5d,5d,16));
	outFields->push(HX_("inputX",0e,c5,ed,9b));
	outFields->push(HX_("inputY",0f,c5,ed,9b));
	outFields->push(HX_("inputStartedX",21,8a,4a,d1));
	outFields->push(HX_("inputStartedY",22,8a,4a,d1));
	outFields->push(HX_("inputDX",1e,96,1e,d4));
	outFields->push(HX_("inputDY",1f,96,1e,d4));
	outFields->push(HX_("inputWheelDelta",07,8a,4a,54));
	outFields->push(HX_("inputStarted",57,82,47,cd));
	outFields->push(HX_("inputStartedR",1b,8a,4a,d1));
	outFields->push(HX_("inputReleased",e7,22,89,05));
	outFields->push(HX_("inputReleasedR",8b,67,75,d2));
	outFields->push(HX_("inputDown",8c,b5,98,09));
	outFields->push(HX_("inputDownR",46,25,06,5c));
	outFields->push(HX_("isKeyPressed",4d,9b,8d,7a));
	outFields->push(HX_("isKeyDown",d7,e6,45,a0));
	outFields->push(HX_("isShiftDown",ba,30,e8,ab));
	outFields->push(HX_("isCtrlDown",b7,f0,27,62));
	outFields->push(HX_("isAltDown",61,e3,ed,eb));
	outFields->push(HX_("isBackspaceDown",f7,fe,97,1d));
	outFields->push(HX_("isDeleteDown",b7,fe,d9,67));
	outFields->push(HX_("isEscapeDown",0d,e5,ce,6e));
	outFields->push(HX_("isReturnDown",bc,09,bc,b0));
	outFields->push(HX_("key",9f,89,51,00));
	outFields->push(HX_("char",d6,5e,bf,41));
	outFields->push(HX_("cursorX",c2,6c,94,cc));
	outFields->push(HX_("highlightAnchor",c9,a3,46,ea));
	outFields->push(HX_("ratios",08,35,8a,bb));
	outFields->push(HX_("curRatio",6b,2f,d2,2b));
	outFields->push(HX_("xBeforeSplit",43,54,ba,bc));
	outFields->push(HX_("wBeforeSplit",a4,e6,fa,7a));
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("t",74,00,00,00));
	outFields->push(HX_("ops",32,9c,54,00));
	outFields->push(HX_("globalG",84,05,39,14));
	outFields->push(HX_("rtTextPipeline",d1,83,79,94));
	outFields->push(HX_("fontSize",30,be,d1,ce));
	outFields->push(HX_("fontOffsetY",57,bb,35,ec));
	outFields->push(HX_("arrowOffsetX",9c,72,93,9f));
	outFields->push(HX_("arrowOffsetY",9d,72,93,9f));
	outFields->push(HX_("titleOffsetX",ad,7e,2b,fb));
	outFields->push(HX_("buttonOffsetY",94,d1,c3,f5));
	outFields->push(HX_("checkOffsetX",7d,c1,eb,c4));
	outFields->push(HX_("checkOffsetY",7e,c1,eb,c4));
	outFields->push(HX_("checkSelectOffsetX",e1,87,86,cd));
	outFields->push(HX_("checkSelectOffsetY",e2,87,86,cd));
	outFields->push(HX_("radioOffsetX",aa,05,36,2f));
	outFields->push(HX_("radioOffsetY",ab,05,36,2f));
	outFields->push(HX_("radioSelectOffsetX",ce,ab,21,0e));
	outFields->push(HX_("radioSelectOffsetY",cf,ab,21,0e));
	outFields->push(HX_("scrollAlign",78,9f,6e,6b));
	outFields->push(HX_("imageScrollAlign",dd,6f,2a,36));
	outFields->push(HX_("_x",39,53,00,00));
	outFields->push(HX_("_y",3a,53,00,00));
	outFields->push(HX_("_w",38,53,00,00));
	outFields->push(HX_("_h",29,53,00,00));
	outFields->push(HX_("_windowX",e9,37,2d,22));
	outFields->push(HX_("_windowY",ea,37,2d,22));
	outFields->push(HX_("_windowW",e8,37,2d,22));
	outFields->push(HX_("_windowH",d9,37,2d,22));
	outFields->push(HX_("currentWindow",09,15,e9,35));
	outFields->push(HX_("windowEnded",ea,de,4c,61));
	outFields->push(HX_("scrollHandle",95,d7,bf,0f));
	outFields->push(HX_("dragHandle",bc,92,69,60));
	outFields->push(HX_("windowHeaderW",1a,44,20,1e));
	outFields->push(HX_("windowHeaderH",0b,44,20,1e));
	outFields->push(HX_("restoreX",4a,fd,a9,ef));
	outFields->push(HX_("restoreY",4b,fd,a9,ef));
	outFields->push(HX_("textSelectedHandle",f0,2d,c3,c5));
	outFields->push(HX_("textSelected",28,a8,e8,e5));
	outFields->push(HX_("submitTextHandle",6d,6e,dd,0c));
	outFields->push(HX_("textToSubmit",c0,7d,c0,f5));
	outFields->push(HX_("tabPressed",cd,c4,be,fb));
	outFields->push(HX_("tabPressedHandle",55,d4,6b,06));
	outFields->push(HX_("comboSelectedHandle",51,41,6f,6e));
	outFields->push(HX_("comboSelectedWindow",99,51,fe,08));
	outFields->push(HX_("comboSelectedAlign",3c,c1,1c,85));
	outFields->push(HX_("comboSelectedTexts",9d,b5,24,71));
	outFields->push(HX_("comboSelectedLabel",6b,78,3a,d3));
	outFields->push(HX_("comboSelectedX",6f,23,59,6b));
	outFields->push(HX_("comboSelectedY",70,23,59,6b));
	outFields->push(HX_("comboSelectedW",6e,23,59,6b));
	outFields->push(HX_("submitComboHandle",5e,d5,54,f4));
	outFields->push(HX_("comboToSubmit",61,e2,49,08));
	outFields->push(HX_("tooltipText",50,e3,ed,e4));
	outFields->push(HX_("tooltipImg",c0,da,10,11));
	outFields->push(HX_("tooltipImgMaxWidth",a2,5f,bb,b7));
	outFields->push(HX_("tooltipInvertY",c0,bd,ec,0c));
	outFields->push(HX_("tooltipX",f5,b5,8a,d0));
	outFields->push(HX_("tooltipY",f6,b5,8a,d0));
	outFields->push(HX_("tooltipShown",ce,40,c7,d9));
	outFields->push(HX_("tooltipWait",18,71,e6,e6));
	outFields->push(HX_("tooltipTime",b0,e2,f0,e4));
	outFields->push(HX_("tabNames",33,11,29,05));
	outFields->push(HX_("tabColors",e5,81,d3,27));
	outFields->push(HX_("tabHandle",dd,3f,4a,19));
	outFields->push(HX_("tabScroll",42,94,b1,a8));
	outFields->push(HX_("tabVertical",eb,af,31,45));
	outFields->push(HX_("elementsBaked",74,67,ba,d9));
	outFields->push(HX_("checkSelectImage",d7,c6,b4,cb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Zui_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Zui_obj,isScrolling),HX_("isScrolling",ab,b1,9a,1c)},
	{hx::fsBool,(int)offsetof(Zui_obj,isTyping),HX_("isTyping",01,9a,a3,af)},
	{hx::fsBool,(int)offsetof(Zui_obj,enabled),HX_("enabled",81,04,31,7e)},
	{hx::fsBool,(int)offsetof(Zui_obj,isStarted),HX_("isStarted",77,a6,19,39)},
	{hx::fsBool,(int)offsetof(Zui_obj,isPushed),HX_("isPushed",43,b0,96,ca)},
	{hx::fsBool,(int)offsetof(Zui_obj,isHovered),HX_("isHovered",51,a2,b5,7e)},
	{hx::fsBool,(int)offsetof(Zui_obj,isReleased),HX_("isReleased",c7,9a,96,f1)},
	{hx::fsBool,(int)offsetof(Zui_obj,changed),HX_("changed",f4,b0,cc,cc)},
	{hx::fsBool,(int)offsetof(Zui_obj,imageInvertY),HX_("imageInvertY",68,c6,b9,2d)},
	{hx::fsBool,(int)offsetof(Zui_obj,scrollEnabled),HX_("scrollEnabled",f4,1f,78,f0)},
	{hx::fsBool,(int)offsetof(Zui_obj,alwaysRedraw),HX_("alwaysRedraw",66,ed,9c,81)},
	{hx::fsBool,(int)offsetof(Zui_obj,highlightOnSelect),HX_("highlightOnSelect",cf,77,e1,02)},
	{hx::fsBool,(int)offsetof(Zui_obj,tabSwitchEnabled),HX_("tabSwitchEnabled",58,2d,3d,81)},
	{hx::fsBool,(int)offsetof(Zui_obj,inputRegistered),HX_("inputRegistered",2c,96,7c,a2)},
	{hx::fsBool,(int)offsetof(Zui_obj,inputEnabled),HX_("inputEnabled",97,5d,5d,16)},
	{hx::fsFloat,(int)offsetof(Zui_obj,inputX),HX_("inputX",0e,c5,ed,9b)},
	{hx::fsFloat,(int)offsetof(Zui_obj,inputY),HX_("inputY",0f,c5,ed,9b)},
	{hx::fsFloat,(int)offsetof(Zui_obj,inputStartedX),HX_("inputStartedX",21,8a,4a,d1)},
	{hx::fsFloat,(int)offsetof(Zui_obj,inputStartedY),HX_("inputStartedY",22,8a,4a,d1)},
	{hx::fsFloat,(int)offsetof(Zui_obj,inputDX),HX_("inputDX",1e,96,1e,d4)},
	{hx::fsFloat,(int)offsetof(Zui_obj,inputDY),HX_("inputDY",1f,96,1e,d4)},
	{hx::fsInt,(int)offsetof(Zui_obj,inputWheelDelta),HX_("inputWheelDelta",07,8a,4a,54)},
	{hx::fsBool,(int)offsetof(Zui_obj,inputStarted),HX_("inputStarted",57,82,47,cd)},
	{hx::fsBool,(int)offsetof(Zui_obj,inputStartedR),HX_("inputStartedR",1b,8a,4a,d1)},
	{hx::fsBool,(int)offsetof(Zui_obj,inputReleased),HX_("inputReleased",e7,22,89,05)},
	{hx::fsBool,(int)offsetof(Zui_obj,inputReleasedR),HX_("inputReleasedR",8b,67,75,d2)},
	{hx::fsBool,(int)offsetof(Zui_obj,inputDown),HX_("inputDown",8c,b5,98,09)},
	{hx::fsBool,(int)offsetof(Zui_obj,inputDownR),HX_("inputDownR",46,25,06,5c)},
	{hx::fsBool,(int)offsetof(Zui_obj,isKeyPressed),HX_("isKeyPressed",4d,9b,8d,7a)},
	{hx::fsBool,(int)offsetof(Zui_obj,isKeyDown),HX_("isKeyDown",d7,e6,45,a0)},
	{hx::fsBool,(int)offsetof(Zui_obj,isShiftDown),HX_("isShiftDown",ba,30,e8,ab)},
	{hx::fsBool,(int)offsetof(Zui_obj,isCtrlDown),HX_("isCtrlDown",b7,f0,27,62)},
	{hx::fsBool,(int)offsetof(Zui_obj,isAltDown),HX_("isAltDown",61,e3,ed,eb)},
	{hx::fsBool,(int)offsetof(Zui_obj,isBackspaceDown),HX_("isBackspaceDown",f7,fe,97,1d)},
	{hx::fsBool,(int)offsetof(Zui_obj,isDeleteDown),HX_("isDeleteDown",b7,fe,d9,67)},
	{hx::fsBool,(int)offsetof(Zui_obj,isEscapeDown),HX_("isEscapeDown",0d,e5,ce,6e)},
	{hx::fsBool,(int)offsetof(Zui_obj,isReturnDown),HX_("isReturnDown",bc,09,bc,b0)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Zui_obj,key),HX_("key",9f,89,51,00)},
	{hx::fsString,(int)offsetof(Zui_obj,_hx_char),HX_("char",d6,5e,bf,41)},
	{hx::fsInt,(int)offsetof(Zui_obj,cursorX),HX_("cursorX",c2,6c,94,cc)},
	{hx::fsInt,(int)offsetof(Zui_obj,highlightAnchor),HX_("highlightAnchor",c9,a3,46,ea)},
	{hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Zui_obj,ratios),HX_("ratios",08,35,8a,bb)},
	{hx::fsInt,(int)offsetof(Zui_obj,curRatio),HX_("curRatio",6b,2f,d2,2b)},
	{hx::fsFloat,(int)offsetof(Zui_obj,xBeforeSplit),HX_("xBeforeSplit",43,54,ba,bc)},
	{hx::fsInt,(int)offsetof(Zui_obj,wBeforeSplit),HX_("wBeforeSplit",a4,e6,fa,7a)},
	{hx::fsObject /*  ::kha::graphics2::Graphics */ ,(int)offsetof(Zui_obj,g),HX_("g",67,00,00,00)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Zui_obj,t),HX_("t",74,00,00,00)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Zui_obj,ops),HX_("ops",32,9c,54,00)},
	{hx::fsObject /*  ::kha::graphics2::Graphics */ ,(int)offsetof(Zui_obj,globalG),HX_("globalG",84,05,39,14)},
	{hx::fsObject /*  ::kha::graphics4::PipelineState */ ,(int)offsetof(Zui_obj,rtTextPipeline),HX_("rtTextPipeline",d1,83,79,94)},
	{hx::fsInt,(int)offsetof(Zui_obj,fontSize),HX_("fontSize",30,be,d1,ce)},
	{hx::fsFloat,(int)offsetof(Zui_obj,fontOffsetY),HX_("fontOffsetY",57,bb,35,ec)},
	{hx::fsFloat,(int)offsetof(Zui_obj,arrowOffsetX),HX_("arrowOffsetX",9c,72,93,9f)},
	{hx::fsFloat,(int)offsetof(Zui_obj,arrowOffsetY),HX_("arrowOffsetY",9d,72,93,9f)},
	{hx::fsFloat,(int)offsetof(Zui_obj,titleOffsetX),HX_("titleOffsetX",ad,7e,2b,fb)},
	{hx::fsFloat,(int)offsetof(Zui_obj,buttonOffsetY),HX_("buttonOffsetY",94,d1,c3,f5)},
	{hx::fsFloat,(int)offsetof(Zui_obj,checkOffsetX),HX_("checkOffsetX",7d,c1,eb,c4)},
	{hx::fsFloat,(int)offsetof(Zui_obj,checkOffsetY),HX_("checkOffsetY",7e,c1,eb,c4)},
	{hx::fsFloat,(int)offsetof(Zui_obj,checkSelectOffsetX),HX_("checkSelectOffsetX",e1,87,86,cd)},
	{hx::fsFloat,(int)offsetof(Zui_obj,checkSelectOffsetY),HX_("checkSelectOffsetY",e2,87,86,cd)},
	{hx::fsFloat,(int)offsetof(Zui_obj,radioOffsetX),HX_("radioOffsetX",aa,05,36,2f)},
	{hx::fsFloat,(int)offsetof(Zui_obj,radioOffsetY),HX_("radioOffsetY",ab,05,36,2f)},
	{hx::fsFloat,(int)offsetof(Zui_obj,radioSelectOffsetX),HX_("radioSelectOffsetX",ce,ab,21,0e)},
	{hx::fsFloat,(int)offsetof(Zui_obj,radioSelectOffsetY),HX_("radioSelectOffsetY",cf,ab,21,0e)},
	{hx::fsFloat,(int)offsetof(Zui_obj,scrollAlign),HX_("scrollAlign",78,9f,6e,6b)},
	{hx::fsBool,(int)offsetof(Zui_obj,imageScrollAlign),HX_("imageScrollAlign",dd,6f,2a,36)},
	{hx::fsFloat,(int)offsetof(Zui_obj,_x),HX_("_x",39,53,00,00)},
	{hx::fsFloat,(int)offsetof(Zui_obj,_y),HX_("_y",3a,53,00,00)},
	{hx::fsInt,(int)offsetof(Zui_obj,_w),HX_("_w",38,53,00,00)},
	{hx::fsInt,(int)offsetof(Zui_obj,_h),HX_("_h",29,53,00,00)},
	{hx::fsFloat,(int)offsetof(Zui_obj,_windowX),HX_("_windowX",e9,37,2d,22)},
	{hx::fsFloat,(int)offsetof(Zui_obj,_windowY),HX_("_windowY",ea,37,2d,22)},
	{hx::fsFloat,(int)offsetof(Zui_obj,_windowW),HX_("_windowW",e8,37,2d,22)},
	{hx::fsFloat,(int)offsetof(Zui_obj,_windowH),HX_("_windowH",d9,37,2d,22)},
	{hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,currentWindow),HX_("currentWindow",09,15,e9,35)},
	{hx::fsBool,(int)offsetof(Zui_obj,windowEnded),HX_("windowEnded",ea,de,4c,61)},
	{hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,scrollHandle),HX_("scrollHandle",95,d7,bf,0f)},
	{hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,dragHandle),HX_("dragHandle",bc,92,69,60)},
	{hx::fsFloat,(int)offsetof(Zui_obj,windowHeaderW),HX_("windowHeaderW",1a,44,20,1e)},
	{hx::fsFloat,(int)offsetof(Zui_obj,windowHeaderH),HX_("windowHeaderH",0b,44,20,1e)},
	{hx::fsFloat,(int)offsetof(Zui_obj,restoreX),HX_("restoreX",4a,fd,a9,ef)},
	{hx::fsFloat,(int)offsetof(Zui_obj,restoreY),HX_("restoreY",4b,fd,a9,ef)},
	{hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,textSelectedHandle),HX_("textSelectedHandle",f0,2d,c3,c5)},
	{hx::fsString,(int)offsetof(Zui_obj,textSelected),HX_("textSelected",28,a8,e8,e5)},
	{hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,submitTextHandle),HX_("submitTextHandle",6d,6e,dd,0c)},
	{hx::fsString,(int)offsetof(Zui_obj,textToSubmit),HX_("textToSubmit",c0,7d,c0,f5)},
	{hx::fsBool,(int)offsetof(Zui_obj,tabPressed),HX_("tabPressed",cd,c4,be,fb)},
	{hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,tabPressedHandle),HX_("tabPressedHandle",55,d4,6b,06)},
	{hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,comboSelectedHandle),HX_("comboSelectedHandle",51,41,6f,6e)},
	{hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,comboSelectedWindow),HX_("comboSelectedWindow",99,51,fe,08)},
	{hx::fsInt,(int)offsetof(Zui_obj,comboSelectedAlign),HX_("comboSelectedAlign",3c,c1,1c,85)},
	{hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Zui_obj,comboSelectedTexts),HX_("comboSelectedTexts",9d,b5,24,71)},
	{hx::fsString,(int)offsetof(Zui_obj,comboSelectedLabel),HX_("comboSelectedLabel",6b,78,3a,d3)},
	{hx::fsInt,(int)offsetof(Zui_obj,comboSelectedX),HX_("comboSelectedX",6f,23,59,6b)},
	{hx::fsInt,(int)offsetof(Zui_obj,comboSelectedY),HX_("comboSelectedY",70,23,59,6b)},
	{hx::fsInt,(int)offsetof(Zui_obj,comboSelectedW),HX_("comboSelectedW",6e,23,59,6b)},
	{hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,submitComboHandle),HX_("submitComboHandle",5e,d5,54,f4)},
	{hx::fsInt,(int)offsetof(Zui_obj,comboToSubmit),HX_("comboToSubmit",61,e2,49,08)},
	{hx::fsString,(int)offsetof(Zui_obj,tooltipText),HX_("tooltipText",50,e3,ed,e4)},
	{hx::fsObject /*  ::kha::Image */ ,(int)offsetof(Zui_obj,tooltipImg),HX_("tooltipImg",c0,da,10,11)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Zui_obj,tooltipImgMaxWidth),HX_("tooltipImgMaxWidth",a2,5f,bb,b7)},
	{hx::fsBool,(int)offsetof(Zui_obj,tooltipInvertY),HX_("tooltipInvertY",c0,bd,ec,0c)},
	{hx::fsFloat,(int)offsetof(Zui_obj,tooltipX),HX_("tooltipX",f5,b5,8a,d0)},
	{hx::fsFloat,(int)offsetof(Zui_obj,tooltipY),HX_("tooltipY",f6,b5,8a,d0)},
	{hx::fsBool,(int)offsetof(Zui_obj,tooltipShown),HX_("tooltipShown",ce,40,c7,d9)},
	{hx::fsBool,(int)offsetof(Zui_obj,tooltipWait),HX_("tooltipWait",18,71,e6,e6)},
	{hx::fsFloat,(int)offsetof(Zui_obj,tooltipTime),HX_("tooltipTime",b0,e2,f0,e4)},
	{hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Zui_obj,tabNames),HX_("tabNames",33,11,29,05)},
	{hx::fsObject /* ::Array< int > */ ,(int)offsetof(Zui_obj,tabColors),HX_("tabColors",e5,81,d3,27)},
	{hx::fsObject /*  ::zui::Handle */ ,(int)offsetof(Zui_obj,tabHandle),HX_("tabHandle",dd,3f,4a,19)},
	{hx::fsFloat,(int)offsetof(Zui_obj,tabScroll),HX_("tabScroll",42,94,b1,a8)},
	{hx::fsBool,(int)offsetof(Zui_obj,tabVertical),HX_("tabVertical",eb,af,31,45)},
	{hx::fsBool,(int)offsetof(Zui_obj,elementsBaked),HX_("elementsBaked",74,67,ba,d9)},
	{hx::fsObject /*  ::kha::Image */ ,(int)offsetof(Zui_obj,checkSelectImage),HX_("checkSelectImage",d7,c6,b4,cb)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Zui_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(void *) &Zui_obj::onBorderHover,HX_("onBorderHover",51,ce,c7,1a)},
	{hx::fsObject /*  ::Dynamic */ ,(void *) &Zui_obj::onTextHover,HX_("onTextHover",b0,58,95,e6)},
	{hx::fsBool,(void *) &Zui_obj::alwaysRedrawWindow,HX_("alwaysRedrawWindow",f6,05,3b,16)},
	{hx::fsBool,(void *) &Zui_obj::keyRepeat,HX_("keyRepeat",5a,16,84,9e)},
	{hx::fsFloat,(void *) &Zui_obj::keyRepeatTime,HX_("keyRepeatTime",87,43,2d,0b)},
	{hx::fsString,(void *) &Zui_obj::textToPaste,HX_("textToPaste",ab,9a,5a,65)},
	{hx::fsString,(void *) &Zui_obj::textToCopy,HX_("textToCopy",5d,a7,6e,ae)},
	{hx::fsBool,(void *) &Zui_obj::isCut,HX_("isCut",b8,af,49,c1)},
	{hx::fsBool,(void *) &Zui_obj::isCopy,HX_("isCopy",bf,80,2b,5f)},
	{hx::fsBool,(void *) &Zui_obj::isPaste,HX_("isPaste",09,f7,db,59)},
	{hx::fsObject /*  ::zui::Zui */ ,(void *) &Zui_obj::copyReceiver,HX_("copyReceiver",04,fa,d5,de)},
	{hx::fsInt,(void *) &Zui_obj::copyFrame,HX_("copyFrame",38,9c,7e,8c)},
	{hx::fsBool,(void *) &Zui_obj::comboFirst,HX_("comboFirst",02,e5,92,0e)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Zui_obj_sMemberFields[] = {
	HX_("isScrolling",ab,b1,9a,1c),
	HX_("isTyping",01,9a,a3,af),
	HX_("enabled",81,04,31,7e),
	HX_("isStarted",77,a6,19,39),
	HX_("isPushed",43,b0,96,ca),
	HX_("isHovered",51,a2,b5,7e),
	HX_("isReleased",c7,9a,96,f1),
	HX_("changed",f4,b0,cc,cc),
	HX_("imageInvertY",68,c6,b9,2d),
	HX_("scrollEnabled",f4,1f,78,f0),
	HX_("alwaysRedraw",66,ed,9c,81),
	HX_("highlightOnSelect",cf,77,e1,02),
	HX_("tabSwitchEnabled",58,2d,3d,81),
	HX_("inputRegistered",2c,96,7c,a2),
	HX_("inputEnabled",97,5d,5d,16),
	HX_("inputX",0e,c5,ed,9b),
	HX_("inputY",0f,c5,ed,9b),
	HX_("inputStartedX",21,8a,4a,d1),
	HX_("inputStartedY",22,8a,4a,d1),
	HX_("inputDX",1e,96,1e,d4),
	HX_("inputDY",1f,96,1e,d4),
	HX_("inputWheelDelta",07,8a,4a,54),
	HX_("inputStarted",57,82,47,cd),
	HX_("inputStartedR",1b,8a,4a,d1),
	HX_("inputReleased",e7,22,89,05),
	HX_("inputReleasedR",8b,67,75,d2),
	HX_("inputDown",8c,b5,98,09),
	HX_("inputDownR",46,25,06,5c),
	HX_("isKeyPressed",4d,9b,8d,7a),
	HX_("isKeyDown",d7,e6,45,a0),
	HX_("isShiftDown",ba,30,e8,ab),
	HX_("isCtrlDown",b7,f0,27,62),
	HX_("isAltDown",61,e3,ed,eb),
	HX_("isBackspaceDown",f7,fe,97,1d),
	HX_("isDeleteDown",b7,fe,d9,67),
	HX_("isEscapeDown",0d,e5,ce,6e),
	HX_("isReturnDown",bc,09,bc,b0),
	HX_("key",9f,89,51,00),
	HX_("char",d6,5e,bf,41),
	HX_("cursorX",c2,6c,94,cc),
	HX_("highlightAnchor",c9,a3,46,ea),
	HX_("ratios",08,35,8a,bb),
	HX_("curRatio",6b,2f,d2,2b),
	HX_("xBeforeSplit",43,54,ba,bc),
	HX_("wBeforeSplit",a4,e6,fa,7a),
	HX_("g",67,00,00,00),
	HX_("t",74,00,00,00),
	HX_("ops",32,9c,54,00),
	HX_("globalG",84,05,39,14),
	HX_("rtTextPipeline",d1,83,79,94),
	HX_("fontSize",30,be,d1,ce),
	HX_("fontOffsetY",57,bb,35,ec),
	HX_("arrowOffsetX",9c,72,93,9f),
	HX_("arrowOffsetY",9d,72,93,9f),
	HX_("titleOffsetX",ad,7e,2b,fb),
	HX_("buttonOffsetY",94,d1,c3,f5),
	HX_("checkOffsetX",7d,c1,eb,c4),
	HX_("checkOffsetY",7e,c1,eb,c4),
	HX_("checkSelectOffsetX",e1,87,86,cd),
	HX_("checkSelectOffsetY",e2,87,86,cd),
	HX_("radioOffsetX",aa,05,36,2f),
	HX_("radioOffsetY",ab,05,36,2f),
	HX_("radioSelectOffsetX",ce,ab,21,0e),
	HX_("radioSelectOffsetY",cf,ab,21,0e),
	HX_("scrollAlign",78,9f,6e,6b),
	HX_("imageScrollAlign",dd,6f,2a,36),
	HX_("_x",39,53,00,00),
	HX_("_y",3a,53,00,00),
	HX_("_w",38,53,00,00),
	HX_("_h",29,53,00,00),
	HX_("_windowX",e9,37,2d,22),
	HX_("_windowY",ea,37,2d,22),
	HX_("_windowW",e8,37,2d,22),
	HX_("_windowH",d9,37,2d,22),
	HX_("currentWindow",09,15,e9,35),
	HX_("windowEnded",ea,de,4c,61),
	HX_("scrollHandle",95,d7,bf,0f),
	HX_("dragHandle",bc,92,69,60),
	HX_("windowHeaderW",1a,44,20,1e),
	HX_("windowHeaderH",0b,44,20,1e),
	HX_("restoreX",4a,fd,a9,ef),
	HX_("restoreY",4b,fd,a9,ef),
	HX_("textSelectedHandle",f0,2d,c3,c5),
	HX_("textSelected",28,a8,e8,e5),
	HX_("submitTextHandle",6d,6e,dd,0c),
	HX_("textToSubmit",c0,7d,c0,f5),
	HX_("tabPressed",cd,c4,be,fb),
	HX_("tabPressedHandle",55,d4,6b,06),
	HX_("comboSelectedHandle",51,41,6f,6e),
	HX_("comboSelectedWindow",99,51,fe,08),
	HX_("comboSelectedAlign",3c,c1,1c,85),
	HX_("comboSelectedTexts",9d,b5,24,71),
	HX_("comboSelectedLabel",6b,78,3a,d3),
	HX_("comboSelectedX",6f,23,59,6b),
	HX_("comboSelectedY",70,23,59,6b),
	HX_("comboSelectedW",6e,23,59,6b),
	HX_("submitComboHandle",5e,d5,54,f4),
	HX_("comboToSubmit",61,e2,49,08),
	HX_("tooltipText",50,e3,ed,e4),
	HX_("tooltipImg",c0,da,10,11),
	HX_("tooltipImgMaxWidth",a2,5f,bb,b7),
	HX_("tooltipInvertY",c0,bd,ec,0c),
	HX_("tooltipX",f5,b5,8a,d0),
	HX_("tooltipY",f6,b5,8a,d0),
	HX_("tooltipShown",ce,40,c7,d9),
	HX_("tooltipWait",18,71,e6,e6),
	HX_("tooltipTime",b0,e2,f0,e4),
	HX_("tabNames",33,11,29,05),
	HX_("tabColors",e5,81,d3,27),
	HX_("tabHandle",dd,3f,4a,19),
	HX_("tabScroll",42,94,b1,a8),
	HX_("tabVertical",eb,af,31,45),
	HX_("elementsBaked",74,67,ba,d9),
	HX_("checkSelectImage",d7,c6,b4,cb),
	HX_("setScale",88,37,03,87),
	HX_("bakeElements",70,14,63,f5),
	HX_("remove",44,9c,88,04),
	HX_("registerInput",a7,86,86,b3),
	HX_("unregisterInput",ae,5c,00,71),
	HX_("begin",29,ea,55,b0),
	HX_("end",db,03,4d,00),
	HX_("beginRegion",fd,a3,b2,9a),
	HX_("endRegion",2f,0f,6f,40),
	HX_("endInput",2f,56,1b,bc),
	HX_("inputChanged",0a,0a,f9,64),
	HX_("windowDirty",02,e6,a2,ca),
	HX_("window",f0,93,8c,52),
	HX_("endWindow",2b,e2,6e,92),
	HX_("scroll",0d,d8,64,47),
	HX_("tab",55,5a,58,00),
	HX_("drawTabs",a2,5a,60,61),
	HX_("panel",04,7b,52,bd),
	HX_("image",5b,1f,69,bd),
	HX_("text",ad,cc,f9,4c),
	HX_("splitText",a7,58,59,51),
	HX_("startTextEdit",d9,7f,c5,4a),
	HX_("submitTextEdit",8f,09,7c,f2),
	HX_("updateTextEdit",80,10,34,7b),
	HX_("textInput",1d,54,0b,57),
	HX_("deselectText",8a,64,1c,42),
	HX_("button",f2,61,e0,d9),
	HX_("check",c8,98,b6,45),
	HX_("radio",fb,10,18,e4),
	HX_("combo",4e,28,5d,4a),
	HX_("slider",21,c6,04,70),
	HX_("separator",65,60,7f,31),
	HX_("tooltip",03,ad,8c,6a),
	HX_("tooltipImage",58,d7,08,1b),
	HX_("drawArrow",25,af,9a,ed),
	HX_("drawTree",82,43,6d,61),
	HX_("drawCheck",24,ce,c1,0d),
	HX_("drawRadio",57,46,23,ac),
	HX_("drawSlider",45,41,c8,b1),
	HX_("drawCombo",aa,5d,68,12),
	HX_("drawTooltip",5f,f1,d4,b3),
	HX_("drawTooltipText",ac,85,85,aa),
	HX_("drawTooltipImage",7c,45,1f,3a),
	HX_("drawString",f5,a3,f3,52),
	HX_("endElement",21,d4,76,ac),
	HX_("row",1a,e2,56,00),
	HX_("indent",6c,0c,f3,93),
	HX_("unindent",85,3b,3a,96),
	HX_("fadeColor",47,ca,44,36),
	HX_("fill",83,ce,bb,43),
	HX_("rect",24,4d,a7,4b),
	HX_("drawRect",48,f7,10,60),
	HX_("isVisible",a8,f5,22,a7),
	HX_("getReleased",73,4b,db,9c),
	HX_("getPushed",ef,9d,83,ee),
	HX_("getStarted",4b,af,7c,84),
	HX_("getInitialHover",4e,3c,5f,12),
	HX_("getHover",46,f5,3b,8b),
	HX_("getInputInRect",5d,5a,df,04),
	HX_("onMouseDown",08,94,05,11),
	HX_("onMouseUp",81,ac,1d,98),
	HX_("onMouseMove",b7,7e,f8,16),
	HX_("onMouseWheel",35,ca,ca,bf),
	HX_("setInputPosition",d1,d1,fe,19),
	HX_("onKeyDown",42,22,f2,73),
	HX_("onKeyUp",3b,58,3c,75),
	HX_("onKeyPress",a3,cd,a8,ea),
	HX_("onCut",a3,19,63,32),
	HX_("onCopy",74,c4,4e,e4),
	HX_("onPaste",b4,f1,93,53),
	HX_("ELEMENT_W",b4,b4,43,c3),
	HX_("ELEMENT_H",a5,b4,43,c3),
	HX_("ELEMENT_OFFSET",16,9e,c2,08),
	HX_("ARROW_SIZE",57,2e,b6,3e),
	HX_("BUTTON_H",7b,41,b8,b5),
	HX_("CHECK_SIZE",f8,52,03,db),
	HX_("CHECK_SELECT_SIZE",cd,c6,a9,44),
	HX_("FONT_SIZE",71,f0,3d,80),
	HX_("SCROLL_W",65,b4,da,e5),
	HX_("TEXT_OFFSET",25,60,d0,e5),
	HX_("TAB_W",8d,00,d2,88),
	HX_("HEADER_DRAG_H",af,03,fb,50),
	HX_("SCALE",6a,06,bd,f6),
	HX_("FLASH_SPEED",38,10,dc,1a),
	HX_("TOOLTIP_DELAY",c7,23,45,de),
	HX_("resize",f4,59,7b,08),
	::String(null()) };

static void Zui_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Zui_obj::onBorderHover,"onBorderHover");
	HX_MARK_MEMBER_NAME(Zui_obj::onTextHover,"onTextHover");
	HX_MARK_MEMBER_NAME(Zui_obj::alwaysRedrawWindow,"alwaysRedrawWindow");
	HX_MARK_MEMBER_NAME(Zui_obj::keyRepeat,"keyRepeat");
	HX_MARK_MEMBER_NAME(Zui_obj::keyRepeatTime,"keyRepeatTime");
	HX_MARK_MEMBER_NAME(Zui_obj::textToPaste,"textToPaste");
	HX_MARK_MEMBER_NAME(Zui_obj::textToCopy,"textToCopy");
	HX_MARK_MEMBER_NAME(Zui_obj::isCut,"isCut");
	HX_MARK_MEMBER_NAME(Zui_obj::isCopy,"isCopy");
	HX_MARK_MEMBER_NAME(Zui_obj::isPaste,"isPaste");
	HX_MARK_MEMBER_NAME(Zui_obj::copyReceiver,"copyReceiver");
	HX_MARK_MEMBER_NAME(Zui_obj::copyFrame,"copyFrame");
	HX_MARK_MEMBER_NAME(Zui_obj::comboFirst,"comboFirst");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Zui_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Zui_obj::onBorderHover,"onBorderHover");
	HX_VISIT_MEMBER_NAME(Zui_obj::onTextHover,"onTextHover");
	HX_VISIT_MEMBER_NAME(Zui_obj::alwaysRedrawWindow,"alwaysRedrawWindow");
	HX_VISIT_MEMBER_NAME(Zui_obj::keyRepeat,"keyRepeat");
	HX_VISIT_MEMBER_NAME(Zui_obj::keyRepeatTime,"keyRepeatTime");
	HX_VISIT_MEMBER_NAME(Zui_obj::textToPaste,"textToPaste");
	HX_VISIT_MEMBER_NAME(Zui_obj::textToCopy,"textToCopy");
	HX_VISIT_MEMBER_NAME(Zui_obj::isCut,"isCut");
	HX_VISIT_MEMBER_NAME(Zui_obj::isCopy,"isCopy");
	HX_VISIT_MEMBER_NAME(Zui_obj::isPaste,"isPaste");
	HX_VISIT_MEMBER_NAME(Zui_obj::copyReceiver,"copyReceiver");
	HX_VISIT_MEMBER_NAME(Zui_obj::copyFrame,"copyFrame");
	HX_VISIT_MEMBER_NAME(Zui_obj::comboFirst,"comboFirst");
};

#endif

hx::Class Zui_obj::__mClass;

static ::String Zui_obj_sStaticFields[] = {
	HX_("onBorderHover",51,ce,c7,1a),
	HX_("onTextHover",b0,58,95,e6),
	HX_("alwaysRedrawWindow",f6,05,3b,16),
	HX_("keyRepeat",5a,16,84,9e),
	HX_("keyRepeatTime",87,43,2d,0b),
	HX_("textToPaste",ab,9a,5a,65),
	HX_("textToCopy",5d,a7,6e,ae),
	HX_("isCut",b8,af,49,c1),
	HX_("isCopy",bf,80,2b,5f),
	HX_("isPaste",09,f7,db,59),
	HX_("copyReceiver",04,fa,d5,de),
	HX_("copyFrame",38,9c,7e,8c),
	HX_("comboFirst",02,e5,92,0e),
	::String(null())
};

void Zui_obj::__register()
{
	Zui_obj _hx_dummy;
	Zui_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("zui.Zui",0e,3a,bb,2c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Zui_obj::__GetStatic;
	__mClass->mSetStaticField = &Zui_obj::__SetStatic;
	__mClass->mMarkFunc = Zui_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Zui_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Zui_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Zui_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Zui_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Zui_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Zui_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Zui_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_35_boot)
HXDLIN(  35)		onBorderHover = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_36_boot)
HXDLIN(  36)		onTextHover = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_37_boot)
HXDLIN(  37)		alwaysRedrawWindow = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_38_boot)
HXDLIN(  38)		keyRepeat = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_39_boot)
HXDLIN(  39)		keyRepeatTime = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_67_boot)
HXDLIN(  67)		textToPaste = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_68_boot)
HXDLIN(  68)		textToCopy = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_69_boot)
HXDLIN(  69)		isCut = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_70_boot)
HXDLIN(  70)		isCopy = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_71_boot)
HXDLIN(  71)		isPaste = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_72_boot)
HXDLIN(  72)		copyReceiver = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_73_boot)
HXDLIN(  73)		copyFrame = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c77aca9aabbe4ed_1110_boot)
HXDLIN(1110)		comboFirst = true;
            	}
}

} // end namespace zui
