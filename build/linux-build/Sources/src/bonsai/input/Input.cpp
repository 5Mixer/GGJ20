// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_bonsai_event_EventSystem
#include <hxinc/bonsai/event/EventSystem.h>
#endif
#ifndef INCLUDED_bonsai_input_Input
#include <hxinc/bonsai/input/Input.h>
#endif
#ifndef INCLUDED_bonsai_input_InputEvent
#include <hxinc/bonsai/input/InputEvent.h>
#endif
#ifndef INCLUDED_kha_input_Keyboard
#include <hxinc/kha/input/Keyboard.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <hxinc/kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <hxinc/kha/math/Vector2.h>
#endif
#ifndef INCLUDED_kha_netsync_Controller
#include <hxinc/kha/netsync/Controller.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fac69f2399d2c853_11_new,"bonsai.input.Input","new",0x4d5b58c4,"bonsai.input.Input.new","bonsai/input/Input.hx",11,0x7aa3f3ee)
HX_LOCAL_STACK_FRAME(_hx_pos_fac69f2399d2c853_29_isAnyKeyDown,"bonsai.input.Input","isAnyKeyDown",0xcb607fbb,"bonsai.input.Input.isAnyKeyDown","bonsai/input/Input.hx",29,0x7aa3f3ee)
HX_LOCAL_STACK_FRAME(_hx_pos_fac69f2399d2c853_37_mouseDown,"bonsai.input.Input","mouseDown",0xe0829c8b,"bonsai.input.Input.mouseDown","bonsai/input/Input.hx",37,0x7aa3f3ee)
HX_LOCAL_STACK_FRAME(_hx_pos_fac69f2399d2c853_43_mouseUp,"bonsai.input.Input","mouseUp",0xaff07e44,"bonsai.input.Input.mouseUp","bonsai/input/Input.hx",43,0x7aa3f3ee)
HX_LOCAL_STACK_FRAME(_hx_pos_fac69f2399d2c853_49_mouseMove,"bonsai.input.Input","mouseMove",0xe675873a,"bonsai.input.Input.mouseMove","bonsai/input/Input.hx",49,0x7aa3f3ee)
HX_LOCAL_STACK_FRAME(_hx_pos_fac69f2399d2c853_57_mouseWheel,"bonsai.input.Input","mouseWheel",0x7db53452,"bonsai.input.Input.mouseWheel","bonsai/input/Input.hx",57,0x7aa3f3ee)
HX_LOCAL_STACK_FRAME(_hx_pos_fac69f2399d2c853_61_mouseLeave,"bonsai.input.Input","mouseLeave",0x264e34ae,"bonsai.input.Input.mouseLeave","bonsai/input/Input.hx",61,0x7aa3f3ee)
HX_LOCAL_STACK_FRAME(_hx_pos_fac69f2399d2c853_68_keyDown,"bonsai.input.Input","keyDown",0x8bc4f405,"bonsai.input.Input.keyDown","bonsai/input/Input.hx",68,0x7aa3f3ee)
HX_LOCAL_STACK_FRAME(_hx_pos_fac69f2399d2c853_69_keyUp,"bonsai.input.Input","keyUp",0x2344233e,"bonsai.input.Input.keyUp","bonsai/input/Input.hx",69,0x7aa3f3ee)
HX_LOCAL_STACK_FRAME(_hx_pos_fac69f2399d2c853_70_keyPress,"bonsai.input.Input","keyPress",0xab4d8680,"bonsai.input.Input.keyPress","bonsai/input/Input.hx",70,0x7aa3f3ee)
namespace bonsai{
namespace input{

void Input_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_fac69f2399d2c853_11_new)
HXLINE(  20)		this->_hx_set_downKeys(HX_CTX, ::Array_obj< int >::__new(0));
HXLINE(  18)		this->mouseInside = true;
HXLINE(  17)		this->absoluteScroll = 0;
HXLINE(  14)		this->mouseRightDown = false;
HXLINE(  13)		this->mouseLeftDown = false;
HXLINE(  23)		this->_hx_set_mousePosition(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,0,0));
HXLINE(  24)		this->_hx_set_events(HX_CTX,  ::bonsai::event::EventSystem_obj::__alloc( HX_CTX ));
HXLINE(  25)		::kha::input::Mouse_obj::get(null())->notify(this->mouseDown_dyn(),this->mouseUp_dyn(),this->mouseMove_dyn(),this->mouseWheel_dyn(),this->mouseLeave_dyn());
HXLINE(  26)		::kha::input::Keyboard_obj::get(null())->notify(this->keyDown_dyn(),this->keyUp_dyn(),this->keyPress_dyn());
            	}

Dynamic Input_obj::__CreateEmpty() { return new Input_obj; }

void *Input_obj::_hx_vtable = 0;

Dynamic Input_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Input_obj > _hx_result = new Input_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Input_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x53b66f5a;
}

bool Input_obj::isAnyKeyDown(::Array< int > keys){
            	HX_STACKFRAME(&_hx_pos_fac69f2399d2c853_29_isAnyKeyDown)
HXLINE(  30)		{
HXLINE(  30)			int _g = 0;
HXDLIN(  30)			while((_g < keys->length)){
HXLINE(  30)				int key = keys->__get(_g);
HXDLIN(  30)				_g = (_g + 1);
HXLINE(  31)				if ((this->downKeys->indexOf(key,null()) != -1)) {
HXLINE(  32)					return true;
            				}
            			}
            		}
HXLINE(  33)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,isAnyKeyDown,return )

void Input_obj::mouseDown(int button,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_fac69f2399d2c853_37_mouseDown)
HXLINE(  38)		if ((button == 0)) {
HXLINE(  38)			this->mouseLeftDown = true;
            		}
HXLINE(  39)		if ((button == 2)) {
HXLINE(  39)			this->mouseRightDown = true;
            		}
HXLINE(  40)		this->mousePosition->x = x;
HXLINE(  41)		this->mousePosition->y = y;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Input_obj,mouseDown,(void))

void Input_obj::mouseUp(int button,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_fac69f2399d2c853_43_mouseUp)
HXLINE(  44)		if ((button == 0)) {
HXLINE(  44)			this->mouseLeftDown = false;
            		}
HXLINE(  45)		if ((button == 2)) {
HXLINE(  45)			this->mouseRightDown = false;
            		}
HXLINE(  46)		this->mousePosition->x = x;
HXLINE(  47)		this->mousePosition->y = y;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Input_obj,mouseUp,(void))

void Input_obj::mouseMove(Float x,Float y,int dx,int dy){
            	HX_STACKFRAME(&_hx_pos_fac69f2399d2c853_49_mouseMove)
HXLINE(  50)		if (!(this->mouseInside)) {
HXLINE(  51)			this->events->dispatch(::bonsai::input::InputEvent_obj::MouseEnter_dyn());
            		}
HXLINE(  53)		this->mouseInside = true;
HXLINE(  54)		this->mousePosition->x = x;
HXLINE(  55)		this->mousePosition->y = y;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Input_obj,mouseMove,(void))

void Input_obj::mouseWheel(int delta){
            	HX_STACKFRAME(&_hx_pos_fac69f2399d2c853_57_mouseWheel)
HXLINE(  58)		 ::bonsai::input::Input _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  58)		_hx_tmp->absoluteScroll = (_hx_tmp->absoluteScroll + delta);
HXLINE(  59)		this->events->dispatch(::bonsai::input::InputEvent_obj::MouseScroll(delta));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,mouseWheel,(void))

void Input_obj::mouseLeave(){
            	HX_GC_STACKFRAME(&_hx_pos_fac69f2399d2c853_61_mouseLeave)
HXLINE(  62)		this->mouseInside = false;
HXLINE(  63)		this->_hx_set_downKeys(HX_CTX, ::Array_obj< int >::__new(0));
HXLINE(  64)		this->events->dispatch(::bonsai::input::InputEvent_obj::MouseEnter_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Input_obj,mouseLeave,(void))

void Input_obj::keyDown(int key){
            	HX_STACKFRAME(&_hx_pos_fac69f2399d2c853_68_keyDown)
HXDLIN(  68)		this->downKeys->push(key);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,keyDown,(void))

void Input_obj::keyUp(int key){
            	HX_STACKFRAME(&_hx_pos_fac69f2399d2c853_69_keyUp)
HXDLIN(  69)		this->downKeys->remove(key);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,keyUp,(void))

void Input_obj::keyPress(::String _hx_char){
            	HX_STACKFRAME(&_hx_pos_fac69f2399d2c853_70_keyPress)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Input_obj,keyPress,(void))


hx::ObjectPtr< Input_obj > Input_obj::__new() {
	hx::ObjectPtr< Input_obj > __this = new Input_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Input_obj > Input_obj::__alloc(hx::Ctx *_hx_ctx) {
	Input_obj *__this = (Input_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Input_obj), true, "bonsai.input.Input"));
	*(void **)__this = Input_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Input_obj::Input_obj()
{
}

void Input_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Input);
	HX_MARK_MEMBER_NAME(mousePosition,"mousePosition");
	HX_MARK_MEMBER_NAME(mouseLeftDown,"mouseLeftDown");
	HX_MARK_MEMBER_NAME(mouseRightDown,"mouseRightDown");
	HX_MARK_MEMBER_NAME(events,"events");
	HX_MARK_MEMBER_NAME(absoluteScroll,"absoluteScroll");
	HX_MARK_MEMBER_NAME(mouseInside,"mouseInside");
	HX_MARK_MEMBER_NAME(downKeys,"downKeys");
	HX_MARK_END_CLASS();
}

void Input_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mousePosition,"mousePosition");
	HX_VISIT_MEMBER_NAME(mouseLeftDown,"mouseLeftDown");
	HX_VISIT_MEMBER_NAME(mouseRightDown,"mouseRightDown");
	HX_VISIT_MEMBER_NAME(events,"events");
	HX_VISIT_MEMBER_NAME(absoluteScroll,"absoluteScroll");
	HX_VISIT_MEMBER_NAME(mouseInside,"mouseInside");
	HX_VISIT_MEMBER_NAME(downKeys,"downKeys");
}

hx::Val Input_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"keyUp") ) { return hx::Val( keyUp_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"events") ) { return hx::Val( events ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mouseUp") ) { return hx::Val( mouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyDown") ) { return hx::Val( keyDown_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"downKeys") ) { return hx::Val( downKeys ); }
		if (HX_FIELD_EQ(inName,"keyPress") ) { return hx::Val( keyPress_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mouseDown") ) { return hx::Val( mouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"mouseMove") ) { return hx::Val( mouseMove_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mouseWheel") ) { return hx::Val( mouseWheel_dyn() ); }
		if (HX_FIELD_EQ(inName,"mouseLeave") ) { return hx::Val( mouseLeave_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mouseInside") ) { return hx::Val( mouseInside ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isAnyKeyDown") ) { return hx::Val( isAnyKeyDown_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mousePosition") ) { return hx::Val( mousePosition ); }
		if (HX_FIELD_EQ(inName,"mouseLeftDown") ) { return hx::Val( mouseLeftDown ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mouseRightDown") ) { return hx::Val( mouseRightDown ); }
		if (HX_FIELD_EQ(inName,"absoluteScroll") ) { return hx::Val( absoluteScroll ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Input_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"events") ) { _hx_set_events(HX_CTX_GET,inValue.Cast<  ::bonsai::event::EventSystem >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"downKeys") ) { _hx_set_downKeys(HX_CTX_GET,inValue.Cast< ::Array< int > >()); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mouseInside") ) { mouseInside=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mousePosition") ) { _hx_set_mousePosition(HX_CTX_GET,inValue.Cast<  ::kha::math::Vector2 >()); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseLeftDown") ) { mouseLeftDown=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mouseRightDown") ) { mouseRightDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"absoluteScroll") ) { absoluteScroll=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Input_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mousePosition",ee,9f,fb,59));
	outFields->push(HX_("mouseLeftDown",4e,3b,6a,d8));
	outFields->push(HX_("mouseRightDown",79,ab,12,3f));
	outFields->push(HX_("events",19,4f,6a,96));
	outFields->push(HX_("absoluteScroll",e4,cd,57,37));
	outFields->push(HX_("mouseInside",01,74,68,93));
	outFields->push(HX_("downKeys",76,df,ee,7b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Input_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::kha::math::Vector2 */ ,(int)offsetof(Input_obj,mousePosition),HX_("mousePosition",ee,9f,fb,59)},
	{hx::fsBool,(int)offsetof(Input_obj,mouseLeftDown),HX_("mouseLeftDown",4e,3b,6a,d8)},
	{hx::fsBool,(int)offsetof(Input_obj,mouseRightDown),HX_("mouseRightDown",79,ab,12,3f)},
	{hx::fsObject /*  ::bonsai::event::EventSystem */ ,(int)offsetof(Input_obj,events),HX_("events",19,4f,6a,96)},
	{hx::fsInt,(int)offsetof(Input_obj,absoluteScroll),HX_("absoluteScroll",e4,cd,57,37)},
	{hx::fsBool,(int)offsetof(Input_obj,mouseInside),HX_("mouseInside",01,74,68,93)},
	{hx::fsObject /* ::Array< int > */ ,(int)offsetof(Input_obj,downKeys),HX_("downKeys",76,df,ee,7b)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Input_obj_sStaticStorageInfo = 0;
#endif

static ::String Input_obj_sMemberFields[] = {
	HX_("mousePosition",ee,9f,fb,59),
	HX_("mouseLeftDown",4e,3b,6a,d8),
	HX_("mouseRightDown",79,ab,12,3f),
	HX_("events",19,4f,6a,96),
	HX_("absoluteScroll",e4,cd,57,37),
	HX_("mouseInside",01,74,68,93),
	HX_("downKeys",76,df,ee,7b),
	HX_("isAnyKeyDown",9f,34,82,c4),
	HX_("mouseDown",27,b1,c2,ee),
	HX_("mouseUp",e0,f3,72,c0),
	HX_("mouseMove",d6,9b,b5,f4),
	HX_("mouseWheel",36,28,87,e7),
	HX_("mouseLeave",92,28,20,90),
	HX_("keyDown",a1,69,47,9c),
	HX_("keyUp",da,b9,fe,de),
	HX_("keyPress",64,f9,f1,0c),
	::String(null()) };

hx::Class Input_obj::__mClass;

void Input_obj::__register()
{
	Input_obj _hx_dummy;
	Input_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("bonsai.input.Input",d2,e6,0e,fc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Input_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Input_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Input_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Input_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace bonsai
} // end namespace input
