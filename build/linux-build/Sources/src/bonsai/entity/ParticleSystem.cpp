// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
#ifndef INCLUDED_bonsai_entity_ParticleSystem
#include <hxinc/bonsai/entity/ParticleSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9523ddc12576f44b_3_new,"bonsai.entity.ParticleSystem","new",0x372da71e,"bonsai.entity.ParticleSystem.new","bonsai/entity/ParticleSystem.hx",3,0x9d634ff2)
HX_LOCAL_STACK_FRAME(_hx_pos_9523ddc12576f44b_12_spawnParticle,"bonsai.entity.ParticleSystem","spawnParticle",0x6cefbbdf,"bonsai.entity.ParticleSystem.spawnParticle","bonsai/entity/ParticleSystem.hx",12,0x9d634ff2)
namespace bonsai{
namespace entity{

void ParticleSystem_obj::__construct(hx::Null< int >  __o_poolMaximum){
            		int poolMaximum = __o_poolMaximum.Default(300);
            	HX_GC_STACKFRAME(&_hx_pos_9523ddc12576f44b_3_new)
HXLINE(   6)		this->index = 0;
HXLINE(   8)		this->_hx_set_members(HX_CTX, ::cpp::VirtualArray_obj::__new());
HXLINE(   9)		this->poolMaximum = poolMaximum;
HXLINE(  10)		super::__construct();
            	}

Dynamic ParticleSystem_obj::__CreateEmpty() { return new ParticleSystem_obj; }

void *ParticleSystem_obj::_hx_vtable = 0;

Dynamic ParticleSystem_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ParticleSystem_obj > _hx_result = new ParticleSystem_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ParticleSystem_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x53b01352) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x53b01352;
	} else {
		return inClassId==(int)0x61169fa0;
	}
}

void ParticleSystem_obj::spawnParticle( ::Dynamic particle){
            	HX_STACKFRAME(&_hx_pos_9523ddc12576f44b_12_spawnParticle)
HXLINE(  13)		this->members->set(this->index,particle);
HXLINE(  14)		this->index++;
HXLINE(  15)		if ((this->index > this->poolMaximum)) {
HXLINE(  16)			this->index = 0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ParticleSystem_obj,spawnParticle,(void))


hx::ObjectPtr< ParticleSystem_obj > ParticleSystem_obj::__new(hx::Null< int >  __o_poolMaximum) {
	hx::ObjectPtr< ParticleSystem_obj > __this = new ParticleSystem_obj();
	__this->__construct(__o_poolMaximum);
	return __this;
}

hx::ObjectPtr< ParticleSystem_obj > ParticleSystem_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_poolMaximum) {
	ParticleSystem_obj *__this = (ParticleSystem_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ParticleSystem_obj), true, "bonsai.entity.ParticleSystem"));
	*(void **)__this = ParticleSystem_obj::_hx_vtable;
	__this->__construct(__o_poolMaximum);
	return __this;
}

ParticleSystem_obj::ParticleSystem_obj()
{
}

void ParticleSystem_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ParticleSystem);
	HX_MARK_MEMBER_NAME(members,"members");
	HX_MARK_MEMBER_NAME(poolMaximum,"poolMaximum");
	HX_MARK_MEMBER_NAME(index,"index");
	 ::bonsai::entity::Entity_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ParticleSystem_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(members,"members");
	HX_VISIT_MEMBER_NAME(poolMaximum,"poolMaximum");
	HX_VISIT_MEMBER_NAME(index,"index");
	 ::bonsai::entity::Entity_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ParticleSystem_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"members") ) { return hx::Val( members ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"poolMaximum") ) { return hx::Val( poolMaximum ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"spawnParticle") ) { return hx::Val( spawnParticle_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ParticleSystem_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"members") ) { _hx_set_members(HX_CTX_GET,inValue.Cast< ::cpp::VirtualArray >()); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"poolMaximum") ) { poolMaximum=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ParticleSystem_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("members",d9,2c,70,1a));
	outFields->push(HX_("poolMaximum",64,6a,f0,01));
	outFields->push(HX_("index",12,9b,14,be));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ParticleSystem_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ParticleSystem_obj,members),HX_("members",d9,2c,70,1a)},
	{hx::fsInt,(int)offsetof(ParticleSystem_obj,poolMaximum),HX_("poolMaximum",64,6a,f0,01)},
	{hx::fsInt,(int)offsetof(ParticleSystem_obj,index),HX_("index",12,9b,14,be)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ParticleSystem_obj_sStaticStorageInfo = 0;
#endif

static ::String ParticleSystem_obj_sMemberFields[] = {
	HX_("members",d9,2c,70,1a),
	HX_("poolMaximum",64,6a,f0,01),
	HX_("index",12,9b,14,be),
	HX_("spawnParticle",a1,cb,1a,3a),
	::String(null()) };

hx::Class ParticleSystem_obj::__mClass;

void ParticleSystem_obj::__register()
{
	ParticleSystem_obj _hx_dummy;
	ParticleSystem_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("bonsai.entity.ParticleSystem",2c,80,90,f0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ParticleSystem_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ParticleSystem_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ParticleSystem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ParticleSystem_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace bonsai
} // end namespace entity
