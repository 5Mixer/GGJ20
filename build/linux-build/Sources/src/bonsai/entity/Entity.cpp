// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <hxinc/kha/math/Vector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6382ef93610544f7_3_new,"bonsai.entity.Entity","new",0x6aa9086c,"bonsai.entity.Entity.new","bonsai/entity/Entity.hx",3,0x52a53264)
HX_LOCAL_STACK_FRAME(_hx_pos_6382ef93610544f7_11_render,"bonsai.entity.Entity","render",0x09d5c2ca,"bonsai.entity.Entity.render","bonsai/entity/Entity.hx",11,0x52a53264)
HX_LOCAL_STACK_FRAME(_hx_pos_6382ef93610544f7_14_update,"bonsai.entity.Entity","update",0x8bb1dd7d,"bonsai.entity.Entity.update","bonsai/entity/Entity.hx",14,0x52a53264)
namespace bonsai{
namespace entity{

void Entity_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_6382ef93610544f7_3_new)
HXLINE(   6)		this->visible = true;
HXLINE(   5)		this->active = true;
HXLINE(   9)		this->_hx_set_position(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,null(),null()));
            	}

Dynamic Entity_obj::__CreateEmpty() { return new Entity_obj; }

void *Entity_obj::_hx_vtable = 0;

Dynamic Entity_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Entity_obj > _hx_result = new Entity_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Entity_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x61169fa0;
}

void Entity_obj::render( ::kha::graphics2::Graphics graphics){
            	HX_STACKFRAME(&_hx_pos_6382ef93610544f7_11_render)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,render,(void))

void Entity_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_6382ef93610544f7_14_update)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entity_obj,update,(void))


hx::ObjectPtr< Entity_obj > Entity_obj::__new() {
	hx::ObjectPtr< Entity_obj > __this = new Entity_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Entity_obj > Entity_obj::__alloc(hx::Ctx *_hx_ctx) {
	Entity_obj *__this = (Entity_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Entity_obj), true, "bonsai.entity.Entity"));
	*(void **)__this = Entity_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Entity_obj::Entity_obj()
{
}

void Entity_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Entity);
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(visible,"visible");
	HX_MARK_END_CLASS();
}

void Entity_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(visible,"visible");
}

hx::Val Entity_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"visible") ) { return hx::Val( visible ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Entity_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"visible") ) { visible=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { _hx_set_position(HX_CTX_GET,inValue.Cast<  ::kha::math::Vector2 >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Entity_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("active",c6,41,46,16));
	outFields->push(HX_("visible",72,78,24,a3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Entity_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::kha::math::Vector2 */ ,(int)offsetof(Entity_obj,position),HX_("position",a9,a0,fa,ca)},
	{hx::fsBool,(int)offsetof(Entity_obj,active),HX_("active",c6,41,46,16)},
	{hx::fsBool,(int)offsetof(Entity_obj,visible),HX_("visible",72,78,24,a3)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Entity_obj_sStaticStorageInfo = 0;
#endif

static ::String Entity_obj_sMemberFields[] = {
	HX_("position",a9,a0,fa,ca),
	HX_("active",c6,41,46,16),
	HX_("visible",72,78,24,a3),
	HX_("render",56,6b,29,05),
	HX_("update",09,86,05,87),
	::String(null()) };

hx::Class Entity_obj::__mClass;

void Entity_obj::__register()
{
	Entity_obj _hx_dummy;
	Entity_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("bonsai.entity.Entity",7a,a2,91,06);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Entity_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Entity_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Entity_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Entity_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace bonsai
} // end namespace entity
