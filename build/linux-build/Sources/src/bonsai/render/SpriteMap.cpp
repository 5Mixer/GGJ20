// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_bonsai_render_SpriteMap
#include <hxinc/bonsai/render/SpriteMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <hxinc/haxe/Log.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a13f6e9c18a41fdc_7_new,"bonsai.render.SpriteMap","new",0x96307505,"bonsai.render.SpriteMap.new","bonsai/render/SpriteMap.hx",7,0x3c50f42b)
HX_LOCAL_STACK_FRAME(_hx_pos_a13f6e9c18a41fdc_17_render,"bonsai.render.SpriteMap","render",0x54db7bd1,"bonsai.render.SpriteMap.render","bonsai/render/SpriteMap.hx",17,0x3c50f42b)
HX_LOCAL_STACK_FRAME(_hx_pos_a13f6e9c18a41fdc_23_renderCell,"bonsai.render.SpriteMap","renderCell",0x2b0a8613,"bonsai.render.SpriteMap.renderCell","bonsai/render/SpriteMap.hx",23,0x3c50f42b)
namespace bonsai{
namespace render{

void SpriteMap_obj::__construct( ::kha::Image image,int gridWidth,int gridHeight){
            	HX_GC_STACKFRAME(&_hx_pos_a13f6e9c18a41fdc_7_new)
HXLINE(   9)		this->_hx_set_image(HX_CTX, image);
HXLINE(  10)		this->gridWidth = gridWidth;
HXLINE(  11)		this->gridHeight = gridHeight;
HXLINE(  13)		if ((hx::Mod(this->image->get_width(),gridWidth) != 0)) {
HXLINE(  14)			::haxe::Log_obj::trace(HX_("Warning: SpriteMap created where image width is not a multiple of gridWidth",a0,0f,46,98),hx::SourceInfo(HX_("bonsai/render/SpriteMap.hx",2b,f4,50,3c),14,HX_("bonsai.render.SpriteMap",93,8e,2e,3e),HX_("new",60,d0,53,00)));
            		}
            	}

Dynamic SpriteMap_obj::__CreateEmpty() { return new SpriteMap_obj; }

void *SpriteMap_obj::_hx_vtable = 0;

Dynamic SpriteMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SpriteMap_obj > _hx_result = new SpriteMap_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool SpriteMap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6a5d2c1f;
}

void SpriteMap_obj::render( ::kha::graphics2::Graphics graphics,float x,float y,int index){
            	HX_STACKFRAME(&_hx_pos_a13f6e9c18a41fdc_17_render)
HXLINE(  18)		int sx = (index * this->gridWidth);
HXDLIN(  18)		int sx1 = hx::Mod(sx,this->image->get_width());
HXLINE(  19)		int sy = this->image->get_width();
HXDLIN(  19)		int sy1 = (::Math_obj::floor((( (Float)(index) ) / (( (Float)(sy) ) / ( (Float)(this->gridWidth) )))) * this->gridHeight);
HXLINE(  20)		graphics->drawSubImage(this->image,x,y,( (float)(sx1) ),( (float)(sy1) ),( (float)(this->gridWidth) ),( (float)(this->gridHeight) ));
            	}


HX_DEFINE_DYNAMIC_FUNC4(SpriteMap_obj,render,(void))

void SpriteMap_obj::renderCell( ::kha::graphics2::Graphics graphics,float x,float y,int xcell,int ycell){
            	HX_STACKFRAME(&_hx_pos_a13f6e9c18a41fdc_23_renderCell)
HXDLIN(  23)		graphics->drawSubImage(this->image,x,y,( (float)((xcell * this->gridWidth)) ),( (float)((ycell * this->gridHeight)) ),( (float)(this->gridWidth) ),( (float)(this->gridHeight) ));
            	}


HX_DEFINE_DYNAMIC_FUNC5(SpriteMap_obj,renderCell,(void))


hx::ObjectPtr< SpriteMap_obj > SpriteMap_obj::__new( ::kha::Image image,int gridWidth,int gridHeight) {
	hx::ObjectPtr< SpriteMap_obj > __this = new SpriteMap_obj();
	__this->__construct(image,gridWidth,gridHeight);
	return __this;
}

hx::ObjectPtr< SpriteMap_obj > SpriteMap_obj::__alloc(hx::Ctx *_hx_ctx, ::kha::Image image,int gridWidth,int gridHeight) {
	SpriteMap_obj *__this = (SpriteMap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SpriteMap_obj), true, "bonsai.render.SpriteMap"));
	*(void **)__this = SpriteMap_obj::_hx_vtable;
	__this->__construct(image,gridWidth,gridHeight);
	return __this;
}

SpriteMap_obj::SpriteMap_obj()
{
}

void SpriteMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SpriteMap);
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(gridWidth,"gridWidth");
	HX_MARK_MEMBER_NAME(gridHeight,"gridHeight");
	HX_MARK_END_CLASS();
}

void SpriteMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(gridWidth,"gridWidth");
	HX_VISIT_MEMBER_NAME(gridHeight,"gridHeight");
}

hx::Val SpriteMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gridWidth") ) { return hx::Val( gridWidth ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"gridHeight") ) { return hx::Val( gridHeight ); }
		if (HX_FIELD_EQ(inName,"renderCell") ) { return hx::Val( renderCell_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SpriteMap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { _hx_set_image(HX_CTX_GET,inValue.Cast<  ::kha::Image >()); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gridWidth") ) { gridWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"gridHeight") ) { gridHeight=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SpriteMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("image",5b,1f,69,bd));
	outFields->push(HX_("gridWidth",60,01,26,bf));
	outFields->push(HX_("gridHeight",4d,ab,6a,38));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo SpriteMap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::kha::Image */ ,(int)offsetof(SpriteMap_obj,image),HX_("image",5b,1f,69,bd)},
	{hx::fsInt,(int)offsetof(SpriteMap_obj,gridWidth),HX_("gridWidth",60,01,26,bf)},
	{hx::fsInt,(int)offsetof(SpriteMap_obj,gridHeight),HX_("gridHeight",4d,ab,6a,38)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SpriteMap_obj_sStaticStorageInfo = 0;
#endif

static ::String SpriteMap_obj_sMemberFields[] = {
	HX_("image",5b,1f,69,bd),
	HX_("gridWidth",60,01,26,bf),
	HX_("gridHeight",4d,ab,6a,38),
	HX_("render",56,6b,29,05),
	HX_("renderCell",18,1c,c7,de),
	::String(null()) };

hx::Class SpriteMap_obj::__mClass;

void SpriteMap_obj::__register()
{
	SpriteMap_obj _hx_dummy;
	SpriteMap_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("bonsai.render.SpriteMap",93,8e,2e,3e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SpriteMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SpriteMap_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SpriteMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SpriteMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace bonsai
} // end namespace render
