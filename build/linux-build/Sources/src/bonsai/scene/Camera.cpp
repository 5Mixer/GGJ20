// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_bonsai_render_Transformation
#include <hxinc/bonsai/render/Transformation.h>
#endif
#ifndef INCLUDED_bonsai_scene_Camera
#include <hxinc/bonsai/scene/Camera.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <hxinc/kha/math/Vector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b0a90e9217cab66b_5_new,"bonsai.scene.Camera","new",0x8d38b44d,"bonsai.scene.Camera.new","bonsai/scene/Camera.hx",5,0x2fb7b4c1)
HX_LOCAL_STACK_FRAME(_hx_pos_b0a90e9217cab66b_19_update,"bonsai.scene.Camera","update",0xc8b8143c,"bonsai.scene.Camera.update","bonsai/scene/Camera.hx",19,0x2fb7b4c1)
HX_LOCAL_STACK_FRAME(_hx_pos_b0a90e9217cab66b_21_apply,"bonsai.scene.Camera","apply",0x5f12fe9b,"bonsai.scene.Camera.apply","bonsai/scene/Camera.hx",21,0x2fb7b4c1)
HX_LOCAL_STACK_FRAME(_hx_pos_b0a90e9217cab66b_37_finish,"bonsai.scene.Camera","finish",0xc831ce86,"bonsai.scene.Camera.finish","bonsai/scene/Camera.hx",37,0x2fb7b4c1)
HX_LOCAL_STACK_FRAME(_hx_pos_b0a90e9217cab66b_41_shake,"bonsai.scene.Camera","shake",0xb6f457f3,"bonsai.scene.Camera.shake","bonsai/scene/Camera.hx",41,0x2fb7b4c1)
namespace bonsai{
namespace scene{

void Camera_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_b0a90e9217cab66b_5_new)
HXLINE(   9)		this->shakeStrength = 0;
HXLINE(   8)		this->shakeDuration = ((Float)0.);
HXLINE(  13)		this->_hx_set_position(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,0,0));
HXLINE(  14)		this->_hx_set_transformation(HX_CTX,  ::bonsai::render::Transformation_obj::__alloc( HX_CTX ));
HXLINE(  15)		this->transformation->_hx_set_scale(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,2,2));
HXLINE(  16)		this->_hx_set_shakeTransformation(HX_CTX,  ::bonsai::render::Transformation_obj::__alloc( HX_CTX ));
            	}

Dynamic Camera_obj::__CreateEmpty() { return new Camera_obj; }

void *Camera_obj::_hx_vtable = 0;

Dynamic Camera_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Camera_obj > _hx_result = new Camera_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Camera_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x74acb5b3;
}

void Camera_obj::update(Float delta){
            	HX_STACKFRAME(&_hx_pos_b0a90e9217cab66b_19_update)
HXDLIN(  19)		 ::bonsai::scene::Camera _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  19)		_hx_tmp->shakeDuration = (_hx_tmp->shakeDuration - delta);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,update,(void))

void Camera_obj::apply( ::kha::graphics2::Graphics g){
            	HX_GC_STACKFRAME(&_hx_pos_b0a90e9217cab66b_21_apply)
HXLINE(  22)		if ((this->shakeDuration > 0)) {
HXLINE(  23)			Float strength = (::Math_obj::random() * ( (Float)(this->shakeStrength) ));
HXLINE(  24)			Float direction = ((( (Float)(2) ) * ::Math_obj::PI) * ::Math_obj::random());
HXLINE(  25)			this->shakeTransformation->offset->x = (::Math_obj::cos(direction) * strength);
HXLINE(  26)			this->shakeTransformation->offset->y = (::Math_obj::sin(direction) * strength);
            		}
            		else {
HXLINE(  28)			this->shakeTransformation->offset->x = ( (Float)(0) );
HXLINE(  29)			this->shakeTransformation->offset->y = ( (Float)(0) );
            		}
HXLINE(  32)		 ::kha::math::Vector2 _this = this->position;
HXDLIN(  32)		 ::kha::math::Vector2 _hx_tmp =  ::kha::math::Vector2_obj::__alloc( HX_CTX ,(_this->x * ( (Float)(-1) )),(_this->y * ( (Float)(-1) )));
HXDLIN(  32)		this->transformation->_hx_set_offset(HX_CTX, _hx_tmp);
HXLINE(  34)		this->shakeTransformation->apply(g);
HXLINE(  35)		this->transformation->apply(g);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,apply,(void))

void Camera_obj::finish( ::kha::graphics2::Graphics g){
            	HX_STACKFRAME(&_hx_pos_b0a90e9217cab66b_37_finish)
HXLINE(  38)		this->transformation->finish(g);
HXLINE(  39)		this->shakeTransformation->finish(g);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Camera_obj,finish,(void))

void Camera_obj::shake(Float duration,int strength){
            	HX_STACKFRAME(&_hx_pos_b0a90e9217cab66b_41_shake)
HXLINE(  42)		this->shakeDuration = duration;
HXLINE(  43)		this->shakeStrength = strength;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Camera_obj,shake,(void))


hx::ObjectPtr< Camera_obj > Camera_obj::__new() {
	hx::ObjectPtr< Camera_obj > __this = new Camera_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Camera_obj > Camera_obj::__alloc(hx::Ctx *_hx_ctx) {
	Camera_obj *__this = (Camera_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Camera_obj), true, "bonsai.scene.Camera"));
	*(void **)__this = Camera_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Camera_obj::Camera_obj()
{
}

void Camera_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Camera);
	HX_MARK_MEMBER_NAME(transformation,"transformation");
	HX_MARK_MEMBER_NAME(shakeTransformation,"shakeTransformation");
	HX_MARK_MEMBER_NAME(shakeDuration,"shakeDuration");
	HX_MARK_MEMBER_NAME(shakeStrength,"shakeStrength");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_END_CLASS();
}

void Camera_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(transformation,"transformation");
	HX_VISIT_MEMBER_NAME(shakeTransformation,"shakeTransformation");
	HX_VISIT_MEMBER_NAME(shakeDuration,"shakeDuration");
	HX_VISIT_MEMBER_NAME(shakeStrength,"shakeStrength");
	HX_VISIT_MEMBER_NAME(position,"position");
}

hx::Val Camera_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"apply") ) { return hx::Val( apply_dyn() ); }
		if (HX_FIELD_EQ(inName,"shake") ) { return hx::Val( shake_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"finish") ) { return hx::Val( finish_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shakeDuration") ) { return hx::Val( shakeDuration ); }
		if (HX_FIELD_EQ(inName,"shakeStrength") ) { return hx::Val( shakeStrength ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformation") ) { return hx::Val( transformation ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"shakeTransformation") ) { return hx::Val( shakeTransformation ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Camera_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { _hx_set_position(HX_CTX_GET,inValue.Cast<  ::kha::math::Vector2 >()); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shakeDuration") ) { shakeDuration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shakeStrength") ) { shakeStrength=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformation") ) { _hx_set_transformation(HX_CTX_GET,inValue.Cast<  ::bonsai::render::Transformation >()); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"shakeTransformation") ) { _hx_set_shakeTransformation(HX_CTX_GET,inValue.Cast<  ::bonsai::render::Transformation >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Camera_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("transformation",c9,bd,2f,0a));
	outFields->push(HX_("shakeTransformation",2f,3f,c8,18));
	outFields->push(HX_("shakeDuration",3a,e0,21,66));
	outFields->push(HX_("shakeStrength",67,a3,22,e0));
	outFields->push(HX_("position",a9,a0,fa,ca));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Camera_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::bonsai::render::Transformation */ ,(int)offsetof(Camera_obj,transformation),HX_("transformation",c9,bd,2f,0a)},
	{hx::fsObject /*  ::bonsai::render::Transformation */ ,(int)offsetof(Camera_obj,shakeTransformation),HX_("shakeTransformation",2f,3f,c8,18)},
	{hx::fsFloat,(int)offsetof(Camera_obj,shakeDuration),HX_("shakeDuration",3a,e0,21,66)},
	{hx::fsInt,(int)offsetof(Camera_obj,shakeStrength),HX_("shakeStrength",67,a3,22,e0)},
	{hx::fsObject /*  ::kha::math::Vector2 */ ,(int)offsetof(Camera_obj,position),HX_("position",a9,a0,fa,ca)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Camera_obj_sStaticStorageInfo = 0;
#endif

static ::String Camera_obj_sMemberFields[] = {
	HX_("transformation",c9,bd,2f,0a),
	HX_("shakeTransformation",2f,3f,c8,18),
	HX_("shakeDuration",3a,e0,21,66),
	HX_("shakeStrength",67,a3,22,e0),
	HX_("position",a9,a0,fa,ca),
	HX_("update",09,86,05,87),
	HX_("apply",6e,85,3b,24),
	HX_("finish",53,40,7f,86),
	HX_("shake",c6,de,1c,7c),
	::String(null()) };

hx::Class Camera_obj::__mClass;

void Camera_obj::__register()
{
	Camera_obj _hx_dummy;
	Camera_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("bonsai.scene.Camera",db,89,c3,52);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Camera_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Camera_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Camera_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Camera_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace bonsai
} // end namespace scene
