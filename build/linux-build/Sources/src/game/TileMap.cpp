// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
#ifndef INCLUDED_bonsai_render_SpriteMap
#include <hxinc/bonsai/render/SpriteMap.h>
#endif
#ifndef INCLUDED_bonsai_render_Transformation
#include <hxinc/bonsai/render/Transformation.h>
#endif
#ifndef INCLUDED_bonsai_resource_Tiled
#include <hxinc/bonsai/resource/Tiled.h>
#endif
#ifndef INCLUDED_game_TileMap
#include <hxinc/game/TileMap.h>
#endif
#ifndef INCLUDED_kha_Assets
#include <hxinc/kha/Assets.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha__Assets_BlobList
#include <hxinc/kha/_Assets/BlobList.h>
#endif
#ifndef INCLUDED_kha__Assets_ImageList
#include <hxinc/kha/_Assets/ImageList.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_internal_BytesBlob
#include <hxinc/kha/internal/BytesBlob.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <hxinc/kha/math/Vector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ff75d527b55e4390_7_new,"game.TileMap","new",0x6d50c964,"game.TileMap.new","game/TileMap.hx",7,0x1572d9cd)
HX_LOCAL_STACK_FRAME(_hx_pos_ff75d527b55e4390_32_render,"game.TileMap","render",0x7672ecd2,"game.TileMap.render","game/TileMap.hx",32,0x1572d9cd)
HX_LOCAL_STACK_FRAME(_hx_pos_ff75d527b55e4390_44_update,"game.TileMap","update",0xf84f0785,"game.TileMap.update","game/TileMap.hx",44,0x1572d9cd)
namespace game{

void TileMap_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ff75d527b55e4390_7_new)
HXLINE(  11)		this->_hx_set_tiles(HX_CTX, ::Array_obj< ::Dynamic>::__new(0));
HXLINE(   9)		this->height = 100;
HXLINE(   8)		this->width = 100;
HXLINE(  17)		super::__construct();
HXLINE(  19)		this->_hx_set_tiled(HX_CTX,  ::bonsai::resource::Tiled_obj::__alloc( HX_CTX ,::kha::Assets_obj::blobs->map_tmx->toString()));
HXLINE(  20)		this->width = this->tiled->width;
HXLINE(  21)		this->height = this->tiled->height;
HXLINE(  22)		this->width = 100;
HXLINE(  23)		this->height = 100;
HXLINE(  25)		this->_hx_set_spriteMap(HX_CTX,  ::bonsai::render::SpriteMap_obj::__alloc( HX_CTX ,::kha::Assets_obj::images->tiles,16,16));
HXLINE(  27)		this->_hx_set_transformation(HX_CTX,  ::bonsai::render::Transformation_obj::__alloc( HX_CTX ));
HXLINE(  28)		this->transformation->_hx_set_offset(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,0,0));
HXLINE(  29)		this->transformation->_hx_set_origin(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,0,0));
            	}

Dynamic TileMap_obj::__CreateEmpty() { return new TileMap_obj; }

void *TileMap_obj::_hx_vtable = 0;

Dynamic TileMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TileMap_obj > _hx_result = new TileMap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TileMap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x09b9af30) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x09b9af30;
	} else {
		return inClassId==(int)0x61169fa0;
	}
}

void TileMap_obj::render( ::kha::graphics2::Graphics graphics){
            	HX_STACKFRAME(&_hx_pos_ff75d527b55e4390_32_render)
HXLINE(  33)		this->transformation->apply(graphics);
HXLINE(  35)		{
HXLINE(  35)			int _g = 0;
HXDLIN(  35)			int _g1 = this->width;
HXDLIN(  35)			while((_g < _g1)){
HXLINE(  35)				_g = (_g + 1);
HXDLIN(  35)				int y = (_g - 1);
HXLINE(  36)				{
HXLINE(  36)					int _g2 = 0;
HXDLIN(  36)					int _g11 = this->height;
HXDLIN(  36)					while((_g2 < _g11)){
HXLINE(  36)						_g2 = (_g2 + 1);
HXDLIN(  36)						int x = (_g2 - 1);
HXLINE(  37)						this->spriteMap->render(graphics,( (float)((x * 16)) ),( (float)((y * 16)) ),(this->tiled->tiles->__get(y).StaticCast< ::Array< int > >()->__get(x) - 1));
            					}
            				}
            			}
            		}
HXLINE(  41)		this->transformation->finish(graphics);
            	}


void TileMap_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_ff75d527b55e4390_44_update)
            	}



hx::ObjectPtr< TileMap_obj > TileMap_obj::__new() {
	hx::ObjectPtr< TileMap_obj > __this = new TileMap_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TileMap_obj > TileMap_obj::__alloc(hx::Ctx *_hx_ctx) {
	TileMap_obj *__this = (TileMap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TileMap_obj), true, "game.TileMap"));
	*(void **)__this = TileMap_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TileMap_obj::TileMap_obj()
{
}

void TileMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TileMap);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(transformation,"transformation");
	HX_MARK_MEMBER_NAME(tiles,"tiles");
	HX_MARK_MEMBER_NAME(tiled,"tiled");
	HX_MARK_MEMBER_NAME(spriteMap,"spriteMap");
	 ::bonsai::entity::Entity_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TileMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(transformation,"transformation");
	HX_VISIT_MEMBER_NAME(tiles,"tiles");
	HX_VISIT_MEMBER_NAME(tiled,"tiled");
	HX_VISIT_MEMBER_NAME(spriteMap,"spriteMap");
	 ::bonsai::entity::Entity_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TileMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"tiles") ) { return hx::Val( tiles ); }
		if (HX_FIELD_EQ(inName,"tiled") ) { return hx::Val( tiled ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spriteMap") ) { return hx::Val( spriteMap ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformation") ) { return hx::Val( transformation ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TileMap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tiles") ) { _hx_set_tiles(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"tiled") ) { _hx_set_tiled(HX_CTX_GET,inValue.Cast<  ::bonsai::resource::Tiled >()); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spriteMap") ) { _hx_set_spriteMap(HX_CTX_GET,inValue.Cast<  ::bonsai::render::SpriteMap >()); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformation") ) { _hx_set_transformation(HX_CTX_GET,inValue.Cast<  ::bonsai::render::Transformation >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TileMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("transformation",c9,bd,2f,0a));
	outFields->push(HX_("tiles",85,fd,34,10));
	outFields->push(HX_("tiled",76,fd,34,10));
	outFields->push(HX_("spriteMap",97,77,04,56));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TileMap_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TileMap_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsInt,(int)offsetof(TileMap_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /*  ::bonsai::render::Transformation */ ,(int)offsetof(TileMap_obj,transformation),HX_("transformation",c9,bd,2f,0a)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(TileMap_obj,tiles),HX_("tiles",85,fd,34,10)},
	{hx::fsObject /*  ::bonsai::resource::Tiled */ ,(int)offsetof(TileMap_obj,tiled),HX_("tiled",76,fd,34,10)},
	{hx::fsObject /*  ::bonsai::render::SpriteMap */ ,(int)offsetof(TileMap_obj,spriteMap),HX_("spriteMap",97,77,04,56)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TileMap_obj_sStaticStorageInfo = 0;
#endif

static ::String TileMap_obj_sMemberFields[] = {
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("transformation",c9,bd,2f,0a),
	HX_("tiles",85,fd,34,10),
	HX_("tiled",76,fd,34,10),
	HX_("spriteMap",97,77,04,56),
	HX_("render",56,6b,29,05),
	HX_("update",09,86,05,87),
	::String(null()) };

hx::Class TileMap_obj::__mClass;

void TileMap_obj::__register()
{
	TileMap_obj _hx_dummy;
	TileMap_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("game.TileMap",72,87,17,bb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TileMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TileMap_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TileMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TileMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
