// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
#ifndef INCLUDED_bonsai_render_AnimatedSprite
#include <hxinc/bonsai/render/AnimatedSprite.h>
#endif
#ifndef INCLUDED_bonsai_render_SpriteMap
#include <hxinc/bonsai/render/SpriteMap.h>
#endif
#ifndef INCLUDED_game_SummonCircle
#include <hxinc/game/SummonCircle.h>
#endif
#ifndef INCLUDED_kha_Assets
#include <hxinc/kha/Assets.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha__Assets_ImageList
#include <hxinc/kha/_Assets/ImageList.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_92230940eb20a0e5_6_new,"game.SummonCircle","new",0xb65d7c9f,"game.SummonCircle.new","game/SummonCircle.hx",6,0xdcab64d0)
static const int _hx_array_data_0c65412d_1[] = {
	(int)0,(int)1,
};
static const int _hx_array_data_0c65412d_2[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_92230940eb20a0e5_27_render,"game.SummonCircle","render",0xd517b077,"game.SummonCircle.render","game/SummonCircle.hx",27,0xdcab64d0)
HX_LOCAL_STACK_FRAME(_hx_pos_92230940eb20a0e5_30_update,"game.SummonCircle","update",0x56f3cb2a,"game.SummonCircle.update","game/SummonCircle.hx",30,0xdcab64d0)
namespace game{

void SummonCircle_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_92230940eb20a0e5_6_new)
HXLINE(   8)		this->height = 32;
HXLINE(   7)		this->width = 32;
HXLINE(  12)		super::__construct();
HXLINE(  14)		this->_hx_set_animation(HX_CTX,  ::bonsai::render::AnimatedSprite_obj::__alloc( HX_CTX ));
HXLINE(  15)		 ::bonsai::render::AnimatedSprite _hx_tmp = this->animation;
HXDLIN(  15)		_hx_tmp->registerAnimation(HX_("idle",14,a7,b3,45), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("frames",a6,af,85,ac),::Array_obj< int >::fromData( _hx_array_data_0c65412d_1,2))
            			->setFixed(1,HX_("spriteMap",97,77,04,56), ::bonsai::render::SpriteMap_obj::__alloc( HX_CTX ,::kha::Assets_obj::images->satanicCircle,this->width,this->height))));
HXLINE(  19)		 ::bonsai::render::AnimatedSprite _hx_tmp1 = this->animation;
HXDLIN(  19)		_hx_tmp1->registerAnimation(HX_("summon",21,b6,4b,a1), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("frames",a6,af,85,ac),::Array_obj< int >::fromData( _hx_array_data_0c65412d_2,1))
            			->setFixed(1,HX_("spriteMap",97,77,04,56), ::bonsai::render::SpriteMap_obj::__alloc( HX_CTX ,::kha::Assets_obj::images->satanicCircle,this->width,this->height))));
HXLINE(  23)		this->animation->play(HX_("idle",14,a7,b3,45));
            	}

Dynamic SummonCircle_obj::__CreateEmpty() { return new SummonCircle_obj; }

void *SummonCircle_obj::_hx_vtable = 0;

Dynamic SummonCircle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SummonCircle_obj > _hx_result = new SummonCircle_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SummonCircle_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x61169fa0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x61169fa0;
	} else {
		return inClassId==(int)0x7ebcd057;
	}
}

void SummonCircle_obj::render( ::kha::graphics2::Graphics graphics){
            	HX_STACKFRAME(&_hx_pos_92230940eb20a0e5_27_render)
HXDLIN(  27)		this->animation->render(graphics,( (float)(0) ),( (float)(0) ));
            	}


void SummonCircle_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_92230940eb20a0e5_30_update)
HXLINE(  31)		this->animation->update(dt);
HXLINE(  32)		this->super::update(dt);
            	}



hx::ObjectPtr< SummonCircle_obj > SummonCircle_obj::__new() {
	hx::ObjectPtr< SummonCircle_obj > __this = new SummonCircle_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SummonCircle_obj > SummonCircle_obj::__alloc(hx::Ctx *_hx_ctx) {
	SummonCircle_obj *__this = (SummonCircle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SummonCircle_obj), true, "game.SummonCircle"));
	*(void **)__this = SummonCircle_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SummonCircle_obj::SummonCircle_obj()
{
}

void SummonCircle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SummonCircle);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(animation,"animation");
	 ::bonsai::entity::Entity_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SummonCircle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(animation,"animation");
	 ::bonsai::entity::Entity_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SummonCircle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"animation") ) { return hx::Val( animation ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SummonCircle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"animation") ) { _hx_set_animation(HX_CTX_GET,inValue.Cast<  ::bonsai::render::AnimatedSprite >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SummonCircle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("animation",04,ef,34,4b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo SummonCircle_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(SummonCircle_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsInt,(int)offsetof(SummonCircle_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /*  ::bonsai::render::AnimatedSprite */ ,(int)offsetof(SummonCircle_obj,animation),HX_("animation",04,ef,34,4b)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SummonCircle_obj_sStaticStorageInfo = 0;
#endif

static ::String SummonCircle_obj_sMemberFields[] = {
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("animation",04,ef,34,4b),
	HX_("render",56,6b,29,05),
	HX_("update",09,86,05,87),
	::String(null()) };

hx::Class SummonCircle_obj::__mClass;

void SummonCircle_obj::__register()
{
	SummonCircle_obj _hx_dummy;
	SummonCircle_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("game.SummonCircle",2d,41,65,0c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SummonCircle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SummonCircle_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SummonCircle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SummonCircle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
