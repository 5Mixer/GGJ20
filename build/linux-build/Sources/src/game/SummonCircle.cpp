// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <hxinc/Type.h>
#endif
#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
#ifndef INCLUDED_bonsai_render_AnimatedSprite
#include <hxinc/bonsai/render/AnimatedSprite.h>
#endif
#ifndef INCLUDED_bonsai_render_SpriteMap
#include <hxinc/bonsai/render/SpriteMap.h>
#endif
#ifndef INCLUDED_game_Body
#include <hxinc/game/Body.h>
#endif
#ifndef INCLUDED_game_BodyPart
#include <hxinc/game/BodyPart.h>
#endif
#ifndef INCLUDED_game_SummonCircle
#include <hxinc/game/SummonCircle.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <hxinc/haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <hxinc/haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_kha_Assets
#include <hxinc/kha/Assets.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha__Assets_ImageList
#include <hxinc/kha/_Assets/ImageList.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <hxinc/kha/math/Vector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_92230940eb20a0e5_7_new,"game.SummonCircle","new",0xb65d7c9f,"game.SummonCircle.new","game/SummonCircle.hx",7,0xdcab64d0)
static const int _hx_array_data_0c65412d_1[] = {
	(int)0,(int)1,
};
static const int _hx_array_data_0c65412d_2[] = {
	(int)0,(int)4,
};
static const int _hx_array_data_0c65412d_3[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,
};
static const int _hx_array_data_0c65412d_4[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_92230940eb20a0e5_65_isComplete,"game.SummonCircle","isComplete",0xffa4fc64,"game.SummonCircle.isComplete","game/SummonCircle.hx",65,0xdcab64d0)
HX_LOCAL_STACK_FRAME(_hx_pos_92230940eb20a0e5_67_getBody,"game.SummonCircle","getBody",0x342c6217,"game.SummonCircle.getBody","game/SummonCircle.hx",67,0xdcab64d0)
HX_LOCAL_STACK_FRAME(_hx_pos_92230940eb20a0e5_80_clear,"game.SummonCircle","clear",0xd557eb8c,"game.SummonCircle.clear","game/SummonCircle.hx",80,0xdcab64d0)
HX_LOCAL_STACK_FRAME(_hx_pos_92230940eb20a0e5_89_addPart,"game.SummonCircle","addPart",0xa71d5e73,"game.SummonCircle.addPart","game/SummonCircle.hx",89,0xdcab64d0)
HX_LOCAL_STACK_FRAME(_hx_pos_92230940eb20a0e5_125_render,"game.SummonCircle","render",0xd517b077,"game.SummonCircle.render","game/SummonCircle.hx",125,0xdcab64d0)
HX_LOCAL_STACK_FRAME(_hx_pos_92230940eb20a0e5_159_update,"game.SummonCircle","update",0x56f3cb2a,"game.SummonCircle.update","game/SummonCircle.hx",159,0xdcab64d0)
namespace game{

void SummonCircle_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_92230940eb20a0e5_7_new)
HXLINE(  26)		this->_hx_set_bodyLayers(HX_CTX,  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX ));
HXLINE(  22)		this->_hx_set_headParts(HX_CTX, ::Array_obj< ::Dynamic>::__new(1)->init(0,::game::BodyPart_obj::NaturalHead_dyn()));
HXLINE(  21)		this->_hx_set_chestParts(HX_CTX, ::Array_obj< ::Dynamic>::__new(1)->init(0,::game::BodyPart_obj::NaturalChest_dyn()));
HXLINE(  20)		this->_hx_set_legParts(HX_CTX, ::Array_obj< ::Dynamic>::__new(2)->init(0,::game::BodyPart_obj::NaturalLeg_dyn())->init(1,::game::BodyPart_obj::Boots_dyn()));
HXLINE(  19)		this->_hx_set_armParts(HX_CTX, ::Array_obj< ::Dynamic>::__new(4)->init(0,::game::BodyPart_obj::NaturalArm_dyn())->init(1,::game::BodyPart_obj::Axe_dyn())->init(2,::game::BodyPart_obj::Sword_dyn())->init(3,::game::BodyPart_obj::Knife_dyn()));
HXLINE(   9)		this->height = 64;
HXLINE(   8)		this->width = 64;
HXLINE(  30)		super::__construct();
HXLINE(  32)		 ::haxe::ds::EnumValueMap _g =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN(  32)		_g->set(::game::BodyPart_obj::NaturalChest_dyn(),0);
HXDLIN(  32)		_g->set(::game::BodyPart_obj::NaturalHead_dyn(),3);
HXDLIN(  32)		_g->set(::game::BodyPart_obj::NaturalHeadUp_dyn(),3);
HXDLIN(  32)		_g->set(::game::BodyPart_obj::NaturalHeadDown_dyn(),2);
HXDLIN(  32)		_g->set(::game::BodyPart_obj::NaturalHeadLeft_dyn(),1);
HXDLIN(  32)		_g->set(::game::BodyPart_obj::NaturalHeadRight_dyn(),0);
HXDLIN(  32)		_g->set(::game::BodyPart_obj::NaturalLeg_dyn(),5);
HXDLIN(  32)		_g->set(::game::BodyPart_obj::NaturalArm_dyn(),6);
HXDLIN(  32)		_g->set(::game::BodyPart_obj::Knife_dyn(),7);
HXDLIN(  32)		_g->set(::game::BodyPart_obj::Sword_dyn(),8);
HXDLIN(  32)		_g->set(::game::BodyPart_obj::Axe_dyn(),9);
HXDLIN(  32)		_g->set(::game::BodyPart_obj::Boots_dyn(),10);
HXDLIN(  32)		this->_hx_set_bodyLayers(HX_CTX, _g);
HXLINE(  47)		this->_hx_set_animation(HX_CTX,  ::bonsai::render::AnimatedSprite_obj::__alloc( HX_CTX ));
HXLINE(  48)		this->animation->_hx_set_drawLayers(HX_CTX, ::Array_obj< int >::fromData( _hx_array_data_0c65412d_1,2));
HXLINE(  49)		 ::bonsai::render::AnimatedSprite _hx_tmp = this->animation;
HXDLIN(  49)		_hx_tmp->registerAnimation(HX_("idle",14,a7,b3,45), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("frames",a6,af,85,ac),::Array_obj< int >::fromData( _hx_array_data_0c65412d_2,2))
            			->setFixed(1,HX_("spriteMap",97,77,04,56), ::bonsai::render::SpriteMap_obj::__alloc( HX_CTX ,::kha::Assets_obj::images->satanicCircle,this->width,this->height))));
HXLINE(  53)		 ::bonsai::render::AnimatedSprite _hx_tmp1 = this->animation;
HXDLIN(  53)		_hx_tmp1->registerAnimation(HX_("summon",21,b6,4b,a1), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("frames",a6,af,85,ac),::Array_obj< int >::fromData( _hx_array_data_0c65412d_3,5))
            			->setFixed(1,HX_("spriteMap",97,77,04,56), ::bonsai::render::SpriteMap_obj::__alloc( HX_CTX ,::kha::Assets_obj::images->satanicCircle,this->width,this->height))));
HXLINE(  57)		this->animation->play(HX_("summon",21,b6,4b,a1));
HXLINE(  59)		this->_hx_set_animatedSprite(HX_CTX,  ::bonsai::render::AnimatedSprite_obj::__alloc( HX_CTX ));
HXLINE(  60)		 ::bonsai::render::AnimatedSprite _hx_tmp2 = this->animatedSprite;
HXDLIN(  60)		_hx_tmp2->registerAnimation(HX_("idle",14,a7,b3,45), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("frames",a6,af,85,ac),::Array_obj< int >::fromData( _hx_array_data_0c65412d_4,1))
            			->setFixed(1,HX_("spriteMap",97,77,04,56), ::bonsai::render::SpriteMap_obj::__alloc( HX_CTX ,::kha::Assets_obj::images->bodyParts2,32,32))));
HXLINE(  61)		this->animatedSprite->play(HX_("idle",14,a7,b3,45));
            	}

Dynamic SummonCircle_obj::__CreateEmpty() { return new SummonCircle_obj; }

void *SummonCircle_obj::_hx_vtable = 0;

Dynamic SummonCircle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SummonCircle_obj > _hx_result = new SummonCircle_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SummonCircle_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x61169fa0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x61169fa0;
	} else {
		return inClassId==(int)0x7ebcd057;
	}
}

bool SummonCircle_obj::isComplete(){
            	HX_STACKFRAME(&_hx_pos_92230940eb20a0e5_65_isComplete)
HXDLIN(  65)		bool _hx_tmp;
HXDLIN(  65)		bool _hx_tmp1;
HXDLIN(  65)		bool _hx_tmp2;
HXDLIN(  65)		bool _hx_tmp3;
HXDLIN(  65)		if (hx::IsNotNull( this->head )) {
HXDLIN(  65)			_hx_tmp3 = hx::IsNotNull( this->chest );
            		}
            		else {
HXDLIN(  65)			_hx_tmp3 = false;
            		}
HXDLIN(  65)		if (_hx_tmp3) {
HXDLIN(  65)			_hx_tmp2 = hx::IsNotNull( this->leftArm );
            		}
            		else {
HXDLIN(  65)			_hx_tmp2 = false;
            		}
HXDLIN(  65)		if (_hx_tmp2) {
HXDLIN(  65)			_hx_tmp1 = hx::IsNotNull( this->rightArm );
            		}
            		else {
HXDLIN(  65)			_hx_tmp1 = false;
            		}
HXDLIN(  65)		if (_hx_tmp1) {
HXDLIN(  65)			_hx_tmp = hx::IsNotNull( this->leftLeg );
            		}
            		else {
HXDLIN(  65)			_hx_tmp = false;
            		}
HXDLIN(  65)		if (_hx_tmp) {
HXDLIN(  65)			return hx::IsNotNull( this->rightLeg );
            		}
            		else {
HXDLIN(  65)			return false;
            		}
HXDLIN(  65)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SummonCircle_obj,isComplete,return )

 ::game::Body SummonCircle_obj::getBody(){
            	HX_GC_STACKFRAME(&_hx_pos_92230940eb20a0e5_67_getBody)
HXLINE(  68)		 ::game::Body body =  ::game::Body_obj::__alloc( HX_CTX );
HXLINE(  69)		if (hx::IsEq( this->head,::game::BodyPart_obj::NaturalHead_dyn() )) {
HXLINE(  70)			this->_hx_set_head(HX_CTX, ::game::BodyPart_obj::NaturalHeadDown_dyn());
            		}
HXLINE(  72)		::cpp::VirtualArray params = null();
HXDLIN(  72)		body->_hx_set_head(HX_CTX, ::Type_obj::createEnum(hx::ClassOf< ::game::BodyPart >(),::Type_obj::enumConstructor(this->head),params));
HXLINE(  73)		::cpp::VirtualArray params1 = null();
HXDLIN(  73)		body->_hx_set_chest(HX_CTX, ::Type_obj::createEnum(hx::ClassOf< ::game::BodyPart >(),::Type_obj::enumConstructor(this->chest),params1));
HXLINE(  74)		::cpp::VirtualArray params2 = null();
HXDLIN(  74)		body->_hx_set_leftArm(HX_CTX, ::Type_obj::createEnum(hx::ClassOf< ::game::BodyPart >(),::Type_obj::enumConstructor(this->leftArm),params2));
HXLINE(  75)		::cpp::VirtualArray params3 = null();
HXDLIN(  75)		body->_hx_set_rightArm(HX_CTX, ::Type_obj::createEnum(hx::ClassOf< ::game::BodyPart >(),::Type_obj::enumConstructor(this->rightArm),params3));
HXLINE(  76)		::cpp::VirtualArray params4 = null();
HXDLIN(  76)		body->_hx_set_leftLeg(HX_CTX, ::Type_obj::createEnum(hx::ClassOf< ::game::BodyPart >(),::Type_obj::enumConstructor(this->leftLeg),params4));
HXLINE(  77)		::cpp::VirtualArray params5 = null();
HXDLIN(  77)		body->_hx_set_rightLeg(HX_CTX, ::Type_obj::createEnum(hx::ClassOf< ::game::BodyPart >(),::Type_obj::enumConstructor(this->rightLeg),params5));
HXLINE(  78)		return body;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SummonCircle_obj,getBody,return )

void SummonCircle_obj::clear(){
            	HX_GC_STACKFRAME(&_hx_pos_92230940eb20a0e5_80_clear)
HXLINE(  81)		this->_hx_set_head(HX_CTX, null());
HXLINE(  82)		this->_hx_set_chest(HX_CTX, null());
HXLINE(  83)		this->_hx_set_leftArm(HX_CTX, null());
HXLINE(  84)		this->_hx_set_rightArm(HX_CTX, null());
HXLINE(  85)		this->_hx_set_leftLeg(HX_CTX, null());
HXLINE(  86)		this->_hx_set_rightLeg(HX_CTX, null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(SummonCircle_obj,clear,(void))

bool SummonCircle_obj::addPart( ::game::BodyPart part){
            	HX_GC_STACKFRAME(&_hx_pos_92230940eb20a0e5_89_addPart)
HXLINE(  90)		if ((this->armParts->indexOf(part,null()) != -1)) {
HXLINE(  91)			if (hx::IsNull( this->leftArm )) {
HXLINE(  92)				this->_hx_set_leftArm(HX_CTX, part);
HXLINE(  93)				return true;
            			}
HXLINE(  95)			if (hx::IsNull( this->rightArm )) {
HXLINE(  96)				this->_hx_set_rightArm(HX_CTX, part);
HXLINE(  97)				return true;
            			}
            		}
HXLINE( 100)		if ((this->legParts->indexOf(part,null()) != -1)) {
HXLINE( 101)			if (hx::IsNull( this->leftLeg )) {
HXLINE( 102)				this->_hx_set_leftLeg(HX_CTX, part);
HXLINE( 103)				return true;
            			}
HXLINE( 105)			if (hx::IsNull( this->rightLeg )) {
HXLINE( 106)				this->_hx_set_rightLeg(HX_CTX, part);
HXLINE( 107)				return true;
            			}
            		}
HXLINE( 110)		if ((this->headParts->indexOf(part,null()) != -1)) {
HXLINE( 111)			if (hx::IsNull( this->head )) {
HXLINE( 112)				this->_hx_set_head(HX_CTX, part);
HXLINE( 113)				return true;
            			}
            		}
HXLINE( 116)		if ((this->chestParts->indexOf(part,null()) != -1)) {
HXLINE( 117)			if (hx::IsNull( this->chest )) {
HXLINE( 118)				this->_hx_set_chest(HX_CTX, part);
HXLINE( 119)				return true;
            			}
            		}
HXLINE( 122)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SummonCircle_obj,addPart,return )

void SummonCircle_obj::render( ::kha::graphics2::Graphics graphics){
            	HX_GC_STACKFRAME(&_hx_pos_92230940eb20a0e5_125_render)
HXLINE( 126)		this->animation->render(graphics,( (float)(0) ),( (float)(0) ));
HXLINE( 128)		if (hx::IsNotNull( this->chest )) {
HXLINE( 129)			 ::Dynamic _hx_tmp = this->bodyLayers->get(this->chest);
HXDLIN( 129)			this->animatedSprite->_hx_set_drawLayers(HX_CTX, ::Array_obj< int >::__new(1)->init(0,_hx_tmp));
HXLINE( 130)			this->animatedSprite->render(graphics,( (float)(this->position->x) ),( (float)(this->position->y) ));
            		}
HXLINE( 133)		if (hx::IsNotNull( this->head )) {
HXLINE( 134)			 ::Dynamic _hx_tmp1 = this->bodyLayers->get(this->head);
HXDLIN( 134)			this->animatedSprite->_hx_set_drawLayers(HX_CTX, ::Array_obj< int >::__new(1)->init(0,_hx_tmp1));
HXLINE( 135)			this->animatedSprite->render(graphics,( (float)(this->position->x) ),( (float)(this->position->y) ));
            		}
HXLINE( 138)		if (hx::IsNotNull( this->leftLeg )) {
HXLINE( 139)			 ::Dynamic _hx_tmp2 = this->bodyLayers->get(this->leftLeg);
HXDLIN( 139)			this->animatedSprite->_hx_set_drawLayers(HX_CTX, ::Array_obj< int >::__new(1)->init(0,_hx_tmp2));
HXLINE( 140)			this->animatedSprite->render(graphics,( (float)(this->position->x) ),( (float)(this->position->y) ));
            		}
HXLINE( 143)		if (hx::IsNotNull( this->rightLeg )) {
HXLINE( 144)			 ::Dynamic _hx_tmp3 = this->bodyLayers->get(this->rightLeg);
HXDLIN( 144)			this->animatedSprite->_hx_set_drawLayers(HX_CTX, ::Array_obj< int >::__new(1)->init(0,_hx_tmp3));
HXLINE( 145)			this->animatedSprite->render(graphics,( (float)((this->position->x + 5)) ),( (float)(this->position->y) ));
            		}
HXLINE( 148)		if (hx::IsNotNull( this->leftArm )) {
HXLINE( 149)			 ::Dynamic _hx_tmp4 = this->bodyLayers->get(this->leftArm);
HXDLIN( 149)			this->animatedSprite->_hx_set_drawLayers(HX_CTX, ::Array_obj< int >::__new(1)->init(0,_hx_tmp4));
HXLINE( 150)			this->animatedSprite->render(graphics,( (float)(this->position->x) ),( (float)(this->position->y) ));
            		}
HXLINE( 153)		if (hx::IsNotNull( this->rightArm )) {
HXLINE( 154)			 ::Dynamic _hx_tmp5 = this->bodyLayers->get(this->rightArm);
HXDLIN( 154)			this->animatedSprite->_hx_set_drawLayers(HX_CTX, ::Array_obj< int >::__new(1)->init(0,_hx_tmp5));
HXLINE( 155)			this->animatedSprite->render(graphics,( (float)((this->position->x + 7)) ),( (float)(this->position->y) ));
            		}
            	}


void SummonCircle_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_92230940eb20a0e5_159_update)
HXLINE( 160)		this->animation->update(dt);
HXLINE( 161)		this->super::update(dt);
            	}



hx::ObjectPtr< SummonCircle_obj > SummonCircle_obj::__new() {
	hx::ObjectPtr< SummonCircle_obj > __this = new SummonCircle_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SummonCircle_obj > SummonCircle_obj::__alloc(hx::Ctx *_hx_ctx) {
	SummonCircle_obj *__this = (SummonCircle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SummonCircle_obj), true, "game.SummonCircle"));
	*(void **)__this = SummonCircle_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SummonCircle_obj::SummonCircle_obj()
{
}

void SummonCircle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SummonCircle);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(animation,"animation");
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(chest,"chest");
	HX_MARK_MEMBER_NAME(leftArm,"leftArm");
	HX_MARK_MEMBER_NAME(rightArm,"rightArm");
	HX_MARK_MEMBER_NAME(leftLeg,"leftLeg");
	HX_MARK_MEMBER_NAME(rightLeg,"rightLeg");
	HX_MARK_MEMBER_NAME(armParts,"armParts");
	HX_MARK_MEMBER_NAME(legParts,"legParts");
	HX_MARK_MEMBER_NAME(chestParts,"chestParts");
	HX_MARK_MEMBER_NAME(headParts,"headParts");
	HX_MARK_MEMBER_NAME(animatedSprite,"animatedSprite");
	HX_MARK_MEMBER_NAME(bodyLayers,"bodyLayers");
	 ::bonsai::entity::Entity_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SummonCircle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(animation,"animation");
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(chest,"chest");
	HX_VISIT_MEMBER_NAME(leftArm,"leftArm");
	HX_VISIT_MEMBER_NAME(rightArm,"rightArm");
	HX_VISIT_MEMBER_NAME(leftLeg,"leftLeg");
	HX_VISIT_MEMBER_NAME(rightLeg,"rightLeg");
	HX_VISIT_MEMBER_NAME(armParts,"armParts");
	HX_VISIT_MEMBER_NAME(legParts,"legParts");
	HX_VISIT_MEMBER_NAME(chestParts,"chestParts");
	HX_VISIT_MEMBER_NAME(headParts,"headParts");
	HX_VISIT_MEMBER_NAME(animatedSprite,"animatedSprite");
	HX_VISIT_MEMBER_NAME(bodyLayers,"bodyLayers");
	 ::bonsai::entity::Entity_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SummonCircle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"chest") ) { return hx::Val( chest ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"leftArm") ) { return hx::Val( leftArm ); }
		if (HX_FIELD_EQ(inName,"leftLeg") ) { return hx::Val( leftLeg ); }
		if (HX_FIELD_EQ(inName,"getBody") ) { return hx::Val( getBody_dyn() ); }
		if (HX_FIELD_EQ(inName,"addPart") ) { return hx::Val( addPart_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rightArm") ) { return hx::Val( rightArm ); }
		if (HX_FIELD_EQ(inName,"rightLeg") ) { return hx::Val( rightLeg ); }
		if (HX_FIELD_EQ(inName,"armParts") ) { return hx::Val( armParts ); }
		if (HX_FIELD_EQ(inName,"legParts") ) { return hx::Val( legParts ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"animation") ) { return hx::Val( animation ); }
		if (HX_FIELD_EQ(inName,"headParts") ) { return hx::Val( headParts ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"chestParts") ) { return hx::Val( chestParts ); }
		if (HX_FIELD_EQ(inName,"bodyLayers") ) { return hx::Val( bodyLayers ); }
		if (HX_FIELD_EQ(inName,"isComplete") ) { return hx::Val( isComplete_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"animatedSprite") ) { return hx::Val( animatedSprite ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SummonCircle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { _hx_set_head(HX_CTX_GET,inValue.Cast<  ::game::BodyPart >()); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chest") ) { _hx_set_chest(HX_CTX_GET,inValue.Cast<  ::game::BodyPart >()); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"leftArm") ) { _hx_set_leftArm(HX_CTX_GET,inValue.Cast<  ::game::BodyPart >()); return inValue; }
		if (HX_FIELD_EQ(inName,"leftLeg") ) { _hx_set_leftLeg(HX_CTX_GET,inValue.Cast<  ::game::BodyPart >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rightArm") ) { _hx_set_rightArm(HX_CTX_GET,inValue.Cast<  ::game::BodyPart >()); return inValue; }
		if (HX_FIELD_EQ(inName,"rightLeg") ) { _hx_set_rightLeg(HX_CTX_GET,inValue.Cast<  ::game::BodyPart >()); return inValue; }
		if (HX_FIELD_EQ(inName,"armParts") ) { _hx_set_armParts(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"legParts") ) { _hx_set_legParts(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"animation") ) { _hx_set_animation(HX_CTX_GET,inValue.Cast<  ::bonsai::render::AnimatedSprite >()); return inValue; }
		if (HX_FIELD_EQ(inName,"headParts") ) { _hx_set_headParts(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"chestParts") ) { _hx_set_chestParts(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"bodyLayers") ) { _hx_set_bodyLayers(HX_CTX_GET,inValue.Cast<  ::haxe::ds::EnumValueMap >()); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"animatedSprite") ) { _hx_set_animatedSprite(HX_CTX_GET,inValue.Cast<  ::bonsai::render::AnimatedSprite >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SummonCircle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("animation",04,ef,34,4b));
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("chest",c1,a6,b6,45));
	outFields->push(HX_("leftArm",95,2c,d7,f4));
	outFields->push(HX_("rightArm",e0,7b,11,e4));
	outFields->push(HX_("leftLeg",07,7a,df,f4));
	outFields->push(HX_("rightLeg",52,c9,19,e4));
	outFields->push(HX_("armParts",24,75,15,16));
	outFields->push(HX_("legParts",72,2a,85,08));
	outFields->push(HX_("chestParts",9f,3e,d3,ff));
	outFields->push(HX_("headParts",e0,c3,ce,50));
	outFields->push(HX_("animatedSprite",08,df,a8,cb));
	outFields->push(HX_("bodyLayers",c4,a9,cd,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo SummonCircle_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(SummonCircle_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsInt,(int)offsetof(SummonCircle_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /*  ::bonsai::render::AnimatedSprite */ ,(int)offsetof(SummonCircle_obj,animation),HX_("animation",04,ef,34,4b)},
	{hx::fsObject /*  ::game::BodyPart */ ,(int)offsetof(SummonCircle_obj,head),HX_("head",20,29,0b,45)},
	{hx::fsObject /*  ::game::BodyPart */ ,(int)offsetof(SummonCircle_obj,chest),HX_("chest",c1,a6,b6,45)},
	{hx::fsObject /*  ::game::BodyPart */ ,(int)offsetof(SummonCircle_obj,leftArm),HX_("leftArm",95,2c,d7,f4)},
	{hx::fsObject /*  ::game::BodyPart */ ,(int)offsetof(SummonCircle_obj,rightArm),HX_("rightArm",e0,7b,11,e4)},
	{hx::fsObject /*  ::game::BodyPart */ ,(int)offsetof(SummonCircle_obj,leftLeg),HX_("leftLeg",07,7a,df,f4)},
	{hx::fsObject /*  ::game::BodyPart */ ,(int)offsetof(SummonCircle_obj,rightLeg),HX_("rightLeg",52,c9,19,e4)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(SummonCircle_obj,armParts),HX_("armParts",24,75,15,16)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(SummonCircle_obj,legParts),HX_("legParts",72,2a,85,08)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(SummonCircle_obj,chestParts),HX_("chestParts",9f,3e,d3,ff)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(SummonCircle_obj,headParts),HX_("headParts",e0,c3,ce,50)},
	{hx::fsObject /*  ::bonsai::render::AnimatedSprite */ ,(int)offsetof(SummonCircle_obj,animatedSprite),HX_("animatedSprite",08,df,a8,cb)},
	{hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(SummonCircle_obj,bodyLayers),HX_("bodyLayers",c4,a9,cd,9f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SummonCircle_obj_sStaticStorageInfo = 0;
#endif

static ::String SummonCircle_obj_sMemberFields[] = {
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("animation",04,ef,34,4b),
	HX_("head",20,29,0b,45),
	HX_("chest",c1,a6,b6,45),
	HX_("leftArm",95,2c,d7,f4),
	HX_("rightArm",e0,7b,11,e4),
	HX_("leftLeg",07,7a,df,f4),
	HX_("rightLeg",52,c9,19,e4),
	HX_("armParts",24,75,15,16),
	HX_("legParts",72,2a,85,08),
	HX_("chestParts",9f,3e,d3,ff),
	HX_("headParts",e0,c3,ce,50),
	HX_("animatedSprite",08,df,a8,cb),
	HX_("bodyLayers",c4,a9,cd,9f),
	HX_("isComplete",c3,12,77,fa),
	HX_("getBody",58,2a,9e,13),
	HX_("clear",8d,71,5b,48),
	HX_("addPart",b4,26,8f,86),
	HX_("render",56,6b,29,05),
	HX_("update",09,86,05,87),
	::String(null()) };

hx::Class SummonCircle_obj::__mClass;

void SummonCircle_obj::__register()
{
	SummonCircle_obj _hx_dummy;
	SummonCircle_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("game.SummonCircle",2d,41,65,0c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SummonCircle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SummonCircle_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SummonCircle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SummonCircle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
