// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_bonsai_Engine
#include <hxinc/bonsai/Engine.h>
#endif
#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
#ifndef INCLUDED_bonsai_entity_ParticleSystem
#include <hxinc/bonsai/entity/ParticleSystem.h>
#endif
#ifndef INCLUDED_bonsai_render_AnimatedSprite
#include <hxinc/bonsai/render/AnimatedSprite.h>
#endif
#ifndef INCLUDED_bonsai_render_SpriteMap
#include <hxinc/bonsai/render/SpriteMap.h>
#endif
#ifndef INCLUDED_bonsai_render_Transformation
#include <hxinc/bonsai/render/Transformation.h>
#endif
#ifndef INCLUDED_bonsai_scene_Scene
#include <hxinc/bonsai/scene/Scene.h>
#endif
#ifndef INCLUDED_game_BodyPartParticles
#include <hxinc/game/BodyPartParticles.h>
#endif
#ifndef INCLUDED_game_World
#include <hxinc/game/World.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <hxinc/kha/math/Vector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_33757abb4f47b789_14_new,"game.World","new",0x082148a8,"game.World.new","game/World.hx",14,0xee87ecc9)
HX_LOCAL_STACK_FRAME(_hx_pos_33757abb4f47b789_28_update,"game.World","update",0x1e8a6ac1,"game.World.update","game/World.hx",28,0xee87ecc9)
HX_LOCAL_STACK_FRAME(_hx_pos_33757abb4f47b789_30_render,"game.World","render",0x9cae500e,"game.World.render","game/World.hx",30,0xee87ecc9)
namespace game{

void World_obj::__construct( ::bonsai::Engine engine){
            	HX_GC_STACKFRAME(&_hx_pos_33757abb4f47b789_14_new)
HXLINE(  15)		super::__construct(HX_("World Scene",be,8c,76,52),engine);
HXLINE(  18)		this->_hx_set_transformation(HX_CTX,  ::bonsai::render::Transformation_obj::__alloc( HX_CTX ));
HXLINE(  19)		this->transformation->_hx_set_scale(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,3,3));
HXLINE(  23)		this->_hx_set_bodyParticleSystem(HX_CTX,  ::game::BodyPartParticles_obj::__alloc( HX_CTX ));
            	}

Dynamic World_obj::__CreateEmpty() { return new World_obj; }

void *World_obj::_hx_vtable = 0;

Dynamic World_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< World_obj > _hx_result = new World_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool World_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x158729c0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x158729c0;
	} else {
		return inClassId==(int)0x1b8885fe;
	}
}

void World_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_33757abb4f47b789_28_update)
HXDLIN(  28)		this->super::update(dt);
            	}


void World_obj::render( ::kha::graphics2::Graphics g){
            	HX_STACKFRAME(&_hx_pos_33757abb4f47b789_30_render)
HXLINE(  31)		this->transformation->apply(g);
HXLINE(  32)		this->super::render(g);
HXLINE(  33)		this->transformation->finish(g);
            	}



hx::ObjectPtr< World_obj > World_obj::__new( ::bonsai::Engine engine) {
	hx::ObjectPtr< World_obj > __this = new World_obj();
	__this->__construct(engine);
	return __this;
}

hx::ObjectPtr< World_obj > World_obj::__alloc(hx::Ctx *_hx_ctx, ::bonsai::Engine engine) {
	World_obj *__this = (World_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(World_obj), true, "game.World"));
	*(void **)__this = World_obj::_hx_vtable;
	__this->__construct(engine);
	return __this;
}

World_obj::World_obj()
{
}

void World_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(World);
	HX_MARK_MEMBER_NAME(transformation,"transformation");
	HX_MARK_MEMBER_NAME(bodyParticleSystem,"bodyParticleSystem");
	HX_MARK_MEMBER_NAME(bodyAnimatedSprite,"bodyAnimatedSprite");
	HX_MARK_MEMBER_NAME(bodySpriteMap,"bodySpriteMap");
	 ::bonsai::scene::Scene_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void World_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(transformation,"transformation");
	HX_VISIT_MEMBER_NAME(bodyParticleSystem,"bodyParticleSystem");
	HX_VISIT_MEMBER_NAME(bodyAnimatedSprite,"bodyAnimatedSprite");
	HX_VISIT_MEMBER_NAME(bodySpriteMap,"bodySpriteMap");
	 ::bonsai::scene::Scene_obj::__Visit(HX_VISIT_ARG);
}

hx::Val World_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bodySpriteMap") ) { return hx::Val( bodySpriteMap ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformation") ) { return hx::Val( transformation ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"bodyParticleSystem") ) { return hx::Val( bodyParticleSystem ); }
		if (HX_FIELD_EQ(inName,"bodyAnimatedSprite") ) { return hx::Val( bodyAnimatedSprite ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val World_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"bodySpriteMap") ) { _hx_set_bodySpriteMap(HX_CTX_GET,inValue.Cast<  ::bonsai::render::SpriteMap >()); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformation") ) { _hx_set_transformation(HX_CTX_GET,inValue.Cast<  ::bonsai::render::Transformation >()); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"bodyParticleSystem") ) { _hx_set_bodyParticleSystem(HX_CTX_GET,inValue.Cast<  ::game::BodyPartParticles >()); return inValue; }
		if (HX_FIELD_EQ(inName,"bodyAnimatedSprite") ) { _hx_set_bodyAnimatedSprite(HX_CTX_GET,inValue.Cast<  ::bonsai::render::AnimatedSprite >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void World_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("transformation",c9,bd,2f,0a));
	outFields->push(HX_("bodyParticleSystem",17,e8,76,1e));
	outFields->push(HX_("bodyAnimatedSprite",4a,85,b6,81));
	outFields->push(HX_("bodySpriteMap",95,78,9c,67));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo World_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::bonsai::render::Transformation */ ,(int)offsetof(World_obj,transformation),HX_("transformation",c9,bd,2f,0a)},
	{hx::fsObject /*  ::game::BodyPartParticles */ ,(int)offsetof(World_obj,bodyParticleSystem),HX_("bodyParticleSystem",17,e8,76,1e)},
	{hx::fsObject /*  ::bonsai::render::AnimatedSprite */ ,(int)offsetof(World_obj,bodyAnimatedSprite),HX_("bodyAnimatedSprite",4a,85,b6,81)},
	{hx::fsObject /*  ::bonsai::render::SpriteMap */ ,(int)offsetof(World_obj,bodySpriteMap),HX_("bodySpriteMap",95,78,9c,67)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *World_obj_sStaticStorageInfo = 0;
#endif

static ::String World_obj_sMemberFields[] = {
	HX_("transformation",c9,bd,2f,0a),
	HX_("bodyParticleSystem",17,e8,76,1e),
	HX_("bodyAnimatedSprite",4a,85,b6,81),
	HX_("bodySpriteMap",95,78,9c,67),
	HX_("update",09,86,05,87),
	HX_("render",56,6b,29,05),
	::String(null()) };

hx::Class World_obj::__mClass;

void World_obj::__register()
{
	World_obj _hx_dummy;
	World_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("game.World",b6,14,de,d3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(World_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< World_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = World_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = World_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
