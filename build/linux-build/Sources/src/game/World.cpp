// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_InputBindings
#include <hxinc/InputBindings.h>
#endif
#ifndef INCLUDED_bonsai_Engine
#include <hxinc/bonsai/Engine.h>
#endif
#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
#ifndef INCLUDED_bonsai_entity_ParticleSystem
#include <hxinc/bonsai/entity/ParticleSystem.h>
#endif
#ifndef INCLUDED_bonsai_input_Input
#include <hxinc/bonsai/input/Input.h>
#endif
#ifndef INCLUDED_bonsai_render_AnimatedSprite
#include <hxinc/bonsai/render/AnimatedSprite.h>
#endif
#ifndef INCLUDED_bonsai_render_SpriteMap
#include <hxinc/bonsai/render/SpriteMap.h>
#endif
#ifndef INCLUDED_bonsai_render_Transformation
#include <hxinc/bonsai/render/Transformation.h>
#endif
#ifndef INCLUDED_bonsai_scene_Camera
#include <hxinc/bonsai/scene/Camera.h>
#endif
#ifndef INCLUDED_bonsai_scene_Scene
#include <hxinc/bonsai/scene/Scene.h>
#endif
#ifndef INCLUDED_differ_data_ShapeCollision
#include <hxinc/differ/data/ShapeCollision.h>
#endif
#ifndef INCLUDED_differ_shapes_Circle
#include <hxinc/differ/shapes/Circle.h>
#endif
#ifndef INCLUDED_differ_shapes_Shape
#include <hxinc/differ/shapes/Shape.h>
#endif
#ifndef INCLUDED_game_Body
#include <hxinc/game/Body.h>
#endif
#ifndef INCLUDED_game_BodyPart
#include <hxinc/game/BodyPart.h>
#endif
#ifndef INCLUDED_game_BodyPartParticles
#include <hxinc/game/BodyPartParticles.h>
#endif
#ifndef INCLUDED_game_Inventory
#include <hxinc/game/Inventory.h>
#endif
#ifndef INCLUDED_game_SummonCircle
#include <hxinc/game/SummonCircle.h>
#endif
#ifndef INCLUDED_game_TileMap
#include <hxinc/game/TileMap.h>
#endif
#ifndef INCLUDED_game_World
#include <hxinc/game/World.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <hxinc/haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <hxinc/haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_math_FastVector2
#include <hxinc/kha/math/FastVector2.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <hxinc/kha/math/Vector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_33757abb4f47b789_42_new,"game.World","new",0x082148a8,"game.World.new","game/World.hx",42,0xee87ecc9)
HX_DEFINE_STACK_FRAME(_hx_pos_33757abb4f47b789_72_new,"game.World","new",0x082148a8,"game.World.new","game/World.hx",72,0xee87ecc9)
HX_DEFINE_STACK_FRAME(_hx_pos_33757abb4f47b789_9_new,"game.World","new",0x082148a8,"game.World.new","game/World.hx",9,0xee87ecc9)
HX_LOCAL_STACK_FRAME(_hx_pos_33757abb4f47b789_141_update,"game.World","update",0x1e8a6ac1,"game.World.update","game/World.hx",141,0xee87ecc9)
HX_LOCAL_STACK_FRAME(_hx_pos_33757abb4f47b789_77_update,"game.World","update",0x1e8a6ac1,"game.World.update","game/World.hx",77,0xee87ecc9)
HX_LOCAL_STACK_FRAME(_hx_pos_33757abb4f47b789_174_render,"game.World","render",0x9cae500e,"game.World.render","game/World.hx",174,0xee87ecc9)
HX_LOCAL_STACK_FRAME(_hx_pos_33757abb4f47b789_192_explodeBody,"game.World","explodeBody",0x5665676b,"game.World.explodeBody","game/World.hx",192,0xee87ecc9)
namespace game{

void World_obj::__construct( ::bonsai::Engine engine){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::game::World,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_33757abb4f47b789_42_new)
HXLINE(  43)			 ::game::BodyPart clickedPart = _gthis->inventory->getItemClicked(_gthis->input->mousePosition);
HXLINE(  44)			if (hx::IsNotNull( clickedPart )) {
HXLINE(  45)				if (_gthis->summonCircle->addPart(clickedPart)) {
HXLINE(  47)					{
HXLINE(  47)						::Dynamic this1 = _gthis->inventory->items;
HXDLIN(  47)						( ( ::haxe::ds::EnumValueMap)(this1) )->set(clickedPart,(( (int)(_gthis->inventory->items->get(clickedPart)) ) - 1));
            					}
HXLINE(  48)					_gthis->camera->shake(((Float).1),( (Float)(10) ));
HXLINE(  50)					if (_gthis->summonCircle->isComplete()) {
HXLINE(  51)						 ::game::Body body = _gthis->summonCircle->getBody();
HXLINE(  52)						 ::kha::math::Vector2 _this = _gthis->summonCircle->position;
HXDLIN(  52)						body->_hx_set_position(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,_this->x,_this->y));
HXLINE(  53)						body->vz = ( (Float)(-4) );
HXLINE(  54)						body->vx = (-1 + (::Math_obj::random() * ( (Float)(2) )));
HXLINE(  55)						_gthis->add(body,null());
HXLINE(  56)						_gthis->summonCircle->clear();
HXLINE(  57)						_gthis->summonCircle->animation->playOnce(HX_("summon",21,b6,4b,a1));
HXLINE(  58)						_gthis->camera->shake(( (Float)(1) ),( (Float)(6) ));
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		int _hx_run( ::game::Body a, ::game::Body b){
            			HX_GC_STACKFRAME(&_hx_pos_33757abb4f47b789_72_new)
HXLINE(  72)			if ((a->position->y < b->position->y)) {
HXLINE(  72)				return -1;
            			}
            			else {
HXLINE(  72)				return 1;
            			}
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_33757abb4f47b789_9_new)
HXLINE( 182)		 ::haxe::ds::EnumValueMap _g =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN( 182)		_g->set(::game::BodyPart_obj::NaturalHead_dyn(),21);
HXDLIN( 182)		_g->set(::game::BodyPart_obj::NaturalChest_dyn(),10);
HXDLIN( 182)		_g->set(::game::BodyPart_obj::NaturalLeg_dyn(),0);
HXDLIN( 182)		_g->set(::game::BodyPart_obj::NaturalArm_dyn(),14);
HXDLIN( 182)		_g->set(::game::BodyPart_obj::Boots_dyn(),0);
HXDLIN( 182)		_g->set(::game::BodyPart_obj::Axe_dyn(),1);
HXDLIN( 182)		_g->set(::game::BodyPart_obj::Sword_dyn(),2);
HXDLIN( 182)		_g->set(::game::BodyPart_obj::Knife_dyn(),9);
HXDLIN( 182)		this->_hx_set_zOffset(HX_CTX, _g);
HXLINE(  75)		this->f = ((Float)0.);
HXLINE(  16)		this->_hx_set_bodies(HX_CTX, ::Array_obj< ::Dynamic>::__new(0));
HXLINE(  22)		 ::game::World _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  23)		super::__construct(HX_("World Scene",be,8c,76,52),engine);
HXLINE(  24)		this->_hx_set_input(HX_CTX, engine->input);
HXLINE(  27)		this->add( ::game::TileMap_obj::__alloc( HX_CTX ),null());
HXLINE(  30)		this->_hx_set_bodyParticleSystem(HX_CTX,  ::game::BodyPartParticles_obj::__alloc( HX_CTX ));
HXLINE(  31)		this->bodyParticleSystem->poolMaximum = 6000;
HXLINE(  32)		this->add(this->bodyParticleSystem,null());
HXLINE(  34)		this->_hx_set_camera(HX_CTX,  ::bonsai::scene::Camera_obj::__alloc( HX_CTX ));
HXLINE(  35)		this->camera->position->x = ( (Float)(-300) );
HXLINE(  36)		this->camera->position->y = ( (Float)(-300) );
HXLINE(  37)		this->_hx_set_summonCircle(HX_CTX,  ::game::SummonCircle_obj::__alloc( HX_CTX ));
HXLINE(  38)		this->add(this->summonCircle,null());
HXLINE(  40)		this->_hx_set_inventory(HX_CTX,  ::game::Inventory_obj::__alloc( HX_CTX ));
HXLINE(  42)		this->input->mouseUpListeners->push( ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE(  66)		{
HXLINE(  66)			int _g1 = 0;
HXDLIN(  66)			while((_g1 < 500)){
HXLINE(  66)				_g1 = (_g1 + 1);
HXDLIN(  66)				int i = (_g1 - 1);
HXLINE(  67)				 ::game::Body body1 =  ::game::Body_obj::__alloc( HX_CTX );
HXLINE(  69)				this->bodies->push(body1);
            			}
            		}
HXLINE(  71)		this->bodies->sort( ::Dynamic(new _hx_Closure_1()));
            	}

Dynamic World_obj::__CreateEmpty() { return new World_obj; }

void *World_obj::_hx_vtable = 0;

Dynamic World_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< World_obj > _hx_result = new World_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool World_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x158729c0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x158729c0;
	} else {
		return inClassId==(int)0x1b8885fe;
	}
}

void World_obj::update(Float dt){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::Dynamic a, ::Dynamic b){
            			HX_GC_STACKFRAME(&_hx_pos_33757abb4f47b789_141_update)
HXLINE( 141)			if (((( (Float)(a->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ( (Float)(b->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) )) > 0)) {
HXLINE( 141)				return 1;
            			}
            			else {
HXLINE( 141)				return -1;
            			}
HXDLIN( 141)			return 0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_33757abb4f47b789_77_update)
HXLINE(  78)		this->f++;
HXLINE(  79)		this->camera->update(dt);
HXLINE(  82)		 ::kha::math::FastVector2 worldMousePos = this->camera->transformation->transformPoint(this->input->mousePosition);
HXLINE(  84)		int cameraSpeed = 800;
HXLINE(  85)		if (this->input->isAnyKeyDown(::InputBindings_obj::left)) {
HXLINE(  86)			 ::kha::math::Vector2 _hx_tmp = this->camera->position;
HXDLIN(  86)			_hx_tmp->x = (_hx_tmp->x - (dt * ( (Float)(cameraSpeed) )));
            		}
HXLINE(  87)		if (this->input->isAnyKeyDown(::InputBindings_obj::right)) {
HXLINE(  88)			 ::kha::math::Vector2 _hx_tmp1 = this->camera->position;
HXDLIN(  88)			_hx_tmp1->x = (_hx_tmp1->x + (dt * ( (Float)(cameraSpeed) )));
            		}
HXLINE(  89)		if (this->input->isAnyKeyDown(::InputBindings_obj::down)) {
HXLINE(  90)			 ::kha::math::Vector2 _hx_tmp2 = this->camera->position;
HXDLIN(  90)			_hx_tmp2->y = (_hx_tmp2->y + (dt * ( (Float)(cameraSpeed) )));
            		}
HXLINE(  91)		if (this->input->isAnyKeyDown(::InputBindings_obj::up)) {
HXLINE(  92)			 ::kha::math::Vector2 _hx_tmp3 = this->camera->position;
HXDLIN(  92)			_hx_tmp3->y = (_hx_tmp3->y - (dt * ( (Float)(cameraSpeed) )));
            		}
HXLINE(  94)		this->super::update(dt);
HXLINE(  95)		{
HXLINE(  95)			int _g = 0;
HXDLIN(  95)			::Array< ::Dynamic> _g1 = this->bodies;
HXDLIN(  95)			while((_g < _g1->length)){
HXLINE(  95)				 ::game::Body body = _g1->__get(_g).StaticCast<  ::game::Body >();
HXDLIN(  95)				_g = (_g + 1);
HXLINE(  96)				body->update(dt);
            			}
            		}
HXLINE( 105)		 ::kha::math::FastVector2 worldMouseFast = this->camera->transformation->transformPoint(this->input->mousePosition);
HXLINE( 106)		 ::kha::math::Vector2 worldMouse =  ::kha::math::Vector2_obj::__alloc( HX_CTX ,worldMouseFast->x,worldMouseFast->y);
HXLINE( 107)		{
HXLINE( 107)			int _g2 = 0;
HXDLIN( 107)			::Array< ::Dynamic> _g3 = this->bodies;
HXDLIN( 107)			while((_g2 < _g3->length)){
HXLINE( 107)				 ::game::Body body1 = _g3->__get(_g2).StaticCast<  ::game::Body >();
HXDLIN( 107)				_g2 = (_g2 + 1);
HXLINE( 108)				if (body1->friendly) {
HXLINE( 109)					body1->_hx_set_targetPosition(HX_CTX, worldMouse);
            				}
HXLINE( 111)				{
HXLINE( 111)					int _g21 = 0;
HXDLIN( 111)					::Array< ::Dynamic> _g31 = this->bodies;
HXDLIN( 111)					while((_g21 < _g31->length)){
HXLINE( 111)						 ::game::Body body2 = _g31->__get(_g21).StaticCast<  ::game::Body >();
HXDLIN( 111)						_g21 = (_g21 + 1);
HXLINE( 112)						bool _hx_tmp4;
HXDLIN( 112)						bool _hx_tmp5;
HXDLIN( 112)						if (hx::IsNotEq( body1,body2 )) {
HXLINE( 112)							_hx_tmp5 = (::Math_obj::abs((body1->position->x - body2->position->x)) > 15);
            						}
            						else {
HXLINE( 112)							_hx_tmp5 = true;
            						}
HXDLIN( 112)						if (!(_hx_tmp5)) {
HXLINE( 112)							_hx_tmp4 = (::Math_obj::abs((body1->position->y - body2->position->y)) > 15);
            						}
            						else {
HXLINE( 112)							_hx_tmp4 = true;
            						}
HXDLIN( 112)						if (_hx_tmp4) {
HXLINE( 113)							continue;
            						}
HXLINE( 114)						 ::differ::data::ShapeCollision collision = body1->collider->testCircle(body2->collider,null(),null());
HXLINE( 115)						if (hx::IsNotNull( collision )) {
HXLINE( 116)							if ((body1->friendly != body2->friendly)) {
HXLINE( 119)								if ((body1->attackCooldown == 0)) {
HXLINE( 120)									 ::game::Body body21 = body2;
HXDLIN( 120)									int body22 = body21->health;
HXDLIN( 120)									body21->health = (body22 - body1->getDamage());
HXLINE( 121)									body1->attackCooldown = ((Float).5);
            								}
HXLINE( 123)								if ((body2->attackCooldown == 0)) {
HXLINE( 124)									 ::game::Body body3 = body1;
HXDLIN( 124)									int body4 = body3->health;
HXDLIN( 124)									body3->health = (body4 - body2->getDamage());
HXLINE( 125)									body2->attackCooldown = ((Float).5);
            								}
HXLINE( 128)								if ((body1->health < 0)) {
HXLINE( 129)									this->explodeBody(body1);
            								}
HXLINE( 130)								if ((body2->health < 0)) {
HXLINE( 131)									this->explodeBody(body2);
            								}
            							}
HXLINE( 135)							 ::game::Body body5 = body1;
HXDLIN( 135)							body5->vx = (body5->vx + (collision->separationX * ((Float).1)));
HXLINE( 136)							 ::game::Body body6 = body1;
HXDLIN( 136)							body6->vy = (body6->vy + (collision->separationY * ((Float).1)));
            						}
            					}
            				}
            			}
            		}
HXLINE( 140)		this->bodyParticleSystem->members->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 144)		int i = (this->bodyParticleSystem->members->get_length() - 1);
HXLINE( 145)		while((i >= 0)){
HXLINE( 146)			 ::Dynamic item = this->bodyParticleSystem->members->__get(i);
HXLINE( 147)			if (hx::IsNull( item )) {
HXLINE( 148)				i = (i - 1);
HXLINE( 149)				continue;
            			}
HXLINE( 152)			if (((::Math_obj::pow((( (Float)((item->__Field(HX_("x",78,00,00,00),hx::paccDynamic) + 16)) ) - ( (Float)(worldMousePos->x) )),( (Float)(2) )) + ::Math_obj::pow((( (Float)((item->__Field(HX_("y",79,00,00,00),hx::paccDynamic) + 14)) ) - ( (Float)(worldMousePos->y) )),( (Float)(2) ))) < 200)) {
HXLINE( 154)				if ((::Array_obj< ::Dynamic>::__new(4)->init(0,::game::BodyPart_obj::NaturalHeadUp_dyn())->init(1,::game::BodyPart_obj::NaturalHeadDown_dyn())->init(2,::game::BodyPart_obj::NaturalHeadRight_dyn())->init(3,::game::BodyPart_obj::NaturalHeadLeft_dyn())->indexOf( ::Dynamic(item->__Field(HX_("part",f3,e3,51,4a),hx::paccDynamic)),null()) != -1)) {
HXLINE( 155)					item->__SetField(HX_("part",f3,e3,51,4a),::game::BodyPart_obj::NaturalHead_dyn(),hx::paccDynamic);
            				}
HXLINE( 156)				{
HXLINE( 156)					::Dynamic this1 = this->inventory->items;
HXDLIN( 156)					 ::game::BodyPart key = item->__Field(HX_("part",f3,e3,51,4a),hx::paccDynamic);
HXDLIN( 156)					( ( ::haxe::ds::EnumValueMap)(this1) )->set(key,(this->inventory->items->get( ::Dynamic(item->__Field(HX_("part",f3,e3,51,4a),hx::paccDynamic))) + 1));
            				}
HXLINE( 157)				this->bodyParticleSystem->members->remove(item);
            			}
            			else {
HXLINE( 160)				i = (i - 1);
            			}
            		}
            	}


void World_obj::render( ::kha::graphics2::Graphics g){
            	HX_STACKFRAME(&_hx_pos_33757abb4f47b789_174_render)
HXLINE( 175)		this->camera->apply(g);
HXLINE( 176)		this->super::render(g);
HXLINE( 177)		{
HXLINE( 177)			int _g = 0;
HXDLIN( 177)			::Array< ::Dynamic> _g1 = this->bodies;
HXDLIN( 177)			while((_g < _g1->length)){
HXLINE( 177)				 ::game::Body body = _g1->__get(_g).StaticCast<  ::game::Body >();
HXDLIN( 177)				_g = (_g + 1);
HXLINE( 178)				body->render(g);
            			}
            		}
HXLINE( 179)		this->camera->finish(g);
HXLINE( 180)		this->inventory->render(g);
            	}


void World_obj::explodeBody( ::game::Body body){
            	HX_STACKFRAME(&_hx_pos_33757abb4f47b789_192_explodeBody)
HXLINE( 193)		int offset = 0;
HXLINE( 194)		Float vz = ((( (Float)(-1) ) * ::Math_obj::random()) - ( (Float)(2) ));
HXLINE( 195)		if (hx::IsNull( body )) {
HXLINE( 196)			return;
            		}
HXLINE( 197)		 ::game::BodyPartParticles _hx_tmp = this->bodyParticleSystem;
HXLINE( 198)		Float body1 = body->position->x;
HXLINE( 199)		Float body2 = body->position->y;
HXDLIN( 199)		Float _hx_tmp1 = (body2 + this->zOffset->get(body->head));
HXLINE( 200)		Float _hx_tmp2 = ( (Float)((offset + this->zOffset->get(body->head))) );
HXLINE( 197)		_hx_tmp->spawnParticle( ::Dynamic(hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("x",78,00,00,00),body1)
            			->setFixed(1,HX_("y",79,00,00,00),_hx_tmp1)
            			->setFixed(2,HX_("z",7a,00,00,00),_hx_tmp2)
            			->setFixed(3,HX_("vx",42,67,00,00),(::Math_obj::random() - ((Float).5)))
            			->setFixed(4,HX_("vz",44,67,00,00),vz)
            			->setFixed(5,HX_("part",f3,e3,51,4a),body->head)));
HXLINE( 205)		 ::game::BodyPartParticles _hx_tmp3 = this->bodyParticleSystem;
HXLINE( 206)		Float body3 = body->position->x;
HXLINE( 207)		Float body4 = body->position->y;
HXDLIN( 207)		Float _hx_tmp4 = (body4 + this->zOffset->get(body->chest));
HXLINE( 208)		Float _hx_tmp5 = ( (Float)((offset + this->zOffset->get(body->chest))) );
HXLINE( 205)		_hx_tmp3->spawnParticle( ::Dynamic(hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("x",78,00,00,00),body3)
            			->setFixed(1,HX_("y",79,00,00,00),_hx_tmp4)
            			->setFixed(2,HX_("z",7a,00,00,00),_hx_tmp5)
            			->setFixed(3,HX_("vx",42,67,00,00),(::Math_obj::random() - ((Float).5)))
            			->setFixed(4,HX_("vz",44,67,00,00),vz)
            			->setFixed(5,HX_("part",f3,e3,51,4a),body->chest)));
HXLINE( 213)		 ::game::BodyPartParticles _hx_tmp6 = this->bodyParticleSystem;
HXLINE( 214)		Float body5 = body->position->x;
HXLINE( 215)		Float body6 = body->position->y;
HXDLIN( 215)		Float _hx_tmp7 = (body6 + this->zOffset->get(body->leftArm));
HXLINE( 216)		Float _hx_tmp8 = ( (Float)((offset + this->zOffset->get(body->leftArm))) );
HXLINE( 213)		_hx_tmp6->spawnParticle( ::Dynamic(hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("x",78,00,00,00),body5)
            			->setFixed(1,HX_("y",79,00,00,00),_hx_tmp7)
            			->setFixed(2,HX_("z",7a,00,00,00),_hx_tmp8)
            			->setFixed(3,HX_("vx",42,67,00,00),(::Math_obj::random() - ((Float).5)))
            			->setFixed(4,HX_("vz",44,67,00,00),vz)
            			->setFixed(5,HX_("part",f3,e3,51,4a),body->leftArm)));
HXLINE( 221)		 ::game::BodyPartParticles _hx_tmp9 = this->bodyParticleSystem;
HXLINE( 222)		Float body7 = body->position->x;
HXLINE( 223)		Float body8 = body->position->y;
HXDLIN( 223)		Float _hx_tmp10 = (body8 + this->zOffset->get(body->rightArm));
HXLINE( 224)		Float _hx_tmp11 = ( (Float)((offset + this->zOffset->get(body->rightArm))) );
HXLINE( 221)		_hx_tmp9->spawnParticle( ::Dynamic(hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("x",78,00,00,00),body7)
            			->setFixed(1,HX_("y",79,00,00,00),_hx_tmp10)
            			->setFixed(2,HX_("z",7a,00,00,00),_hx_tmp11)
            			->setFixed(3,HX_("vx",42,67,00,00),(::Math_obj::random() - ((Float).5)))
            			->setFixed(4,HX_("vz",44,67,00,00),vz)
            			->setFixed(5,HX_("part",f3,e3,51,4a),body->rightArm)));
HXLINE( 229)		 ::game::BodyPartParticles _hx_tmp12 = this->bodyParticleSystem;
HXLINE( 230)		Float body9 = body->position->x;
HXLINE( 231)		Float body10 = body->position->y;
HXDLIN( 231)		Float _hx_tmp13 = (body10 + this->zOffset->get(body->leftLeg));
HXLINE( 232)		Float _hx_tmp14 = ( (Float)((offset + this->zOffset->get(body->leftLeg))) );
HXLINE( 229)		_hx_tmp12->spawnParticle( ::Dynamic(hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("x",78,00,00,00),body9)
            			->setFixed(1,HX_("y",79,00,00,00),_hx_tmp13)
            			->setFixed(2,HX_("z",7a,00,00,00),_hx_tmp14)
            			->setFixed(3,HX_("vx",42,67,00,00),(::Math_obj::random() - ((Float).5)))
            			->setFixed(4,HX_("vz",44,67,00,00),vz)
            			->setFixed(5,HX_("part",f3,e3,51,4a),body->leftLeg)));
HXLINE( 237)		 ::game::BodyPartParticles _hx_tmp15 = this->bodyParticleSystem;
HXLINE( 238)		Float body11 = body->position->x;
HXLINE( 239)		Float body12 = body->position->y;
HXDLIN( 239)		Float _hx_tmp16 = (body12 + this->zOffset->get(body->rightLeg));
HXLINE( 240)		Float _hx_tmp17 = ( (Float)((offset + this->zOffset->get(body->rightLeg))) );
HXLINE( 237)		_hx_tmp15->spawnParticle( ::Dynamic(hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("x",78,00,00,00),body11)
            			->setFixed(1,HX_("y",79,00,00,00),_hx_tmp16)
            			->setFixed(2,HX_("z",7a,00,00,00),_hx_tmp17)
            			->setFixed(3,HX_("vx",42,67,00,00),(::Math_obj::random() - ((Float).5)))
            			->setFixed(4,HX_("vz",44,67,00,00),vz)
            			->setFixed(5,HX_("part",f3,e3,51,4a),body->rightLeg)));
HXLINE( 245)		this->bodies->remove(body);
HXLINE( 246)		this->remove(body);
            	}


HX_DEFINE_DYNAMIC_FUNC1(World_obj,explodeBody,(void))


hx::ObjectPtr< World_obj > World_obj::__new( ::bonsai::Engine engine) {
	hx::ObjectPtr< World_obj > __this = new World_obj();
	__this->__construct(engine);
	return __this;
}

hx::ObjectPtr< World_obj > World_obj::__alloc(hx::Ctx *_hx_ctx, ::bonsai::Engine engine) {
	World_obj *__this = (World_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(World_obj), true, "game.World"));
	*(void **)__this = World_obj::_hx_vtable;
	__this->__construct(engine);
	return __this;
}

World_obj::World_obj()
{
}

void World_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(World);
	HX_MARK_MEMBER_NAME(inventory,"inventory");
	HX_MARK_MEMBER_NAME(bodyParticleSystem,"bodyParticleSystem");
	HX_MARK_MEMBER_NAME(bodyAnimatedSprite,"bodyAnimatedSprite");
	HX_MARK_MEMBER_NAME(bodySpriteMap,"bodySpriteMap");
	HX_MARK_MEMBER_NAME(bodies,"bodies");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(camera,"camera");
	HX_MARK_MEMBER_NAME(summonCircle,"summonCircle");
	HX_MARK_MEMBER_NAME(f,"f");
	HX_MARK_MEMBER_NAME(zOffset,"zOffset");
	 ::bonsai::scene::Scene_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void World_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(inventory,"inventory");
	HX_VISIT_MEMBER_NAME(bodyParticleSystem,"bodyParticleSystem");
	HX_VISIT_MEMBER_NAME(bodyAnimatedSprite,"bodyAnimatedSprite");
	HX_VISIT_MEMBER_NAME(bodySpriteMap,"bodySpriteMap");
	HX_VISIT_MEMBER_NAME(bodies,"bodies");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(camera,"camera");
	HX_VISIT_MEMBER_NAME(summonCircle,"summonCircle");
	HX_VISIT_MEMBER_NAME(f,"f");
	HX_VISIT_MEMBER_NAME(zOffset,"zOffset");
	 ::bonsai::scene::Scene_obj::__Visit(HX_VISIT_ARG);
}

hx::Val World_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"f") ) { return hx::Val( f ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bodies") ) { return hx::Val( bodies ); }
		if (HX_FIELD_EQ(inName,"camera") ) { return hx::Val( camera ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"zOffset") ) { return hx::Val( zOffset ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inventory") ) { return hx::Val( inventory ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"explodeBody") ) { return hx::Val( explodeBody_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"summonCircle") ) { return hx::Val( summonCircle ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bodySpriteMap") ) { return hx::Val( bodySpriteMap ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"bodyParticleSystem") ) { return hx::Val( bodyParticleSystem ); }
		if (HX_FIELD_EQ(inName,"bodyAnimatedSprite") ) { return hx::Val( bodyAnimatedSprite ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val World_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"f") ) { f=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { _hx_set_input(HX_CTX_GET,inValue.Cast<  ::bonsai::input::Input >()); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bodies") ) { _hx_set_bodies(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"camera") ) { _hx_set_camera(HX_CTX_GET,inValue.Cast<  ::bonsai::scene::Camera >()); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"zOffset") ) { _hx_set_zOffset(HX_CTX_GET,inValue.Cast<  ::haxe::ds::EnumValueMap >()); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inventory") ) { _hx_set_inventory(HX_CTX_GET,inValue.Cast<  ::game::Inventory >()); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"summonCircle") ) { _hx_set_summonCircle(HX_CTX_GET,inValue.Cast<  ::game::SummonCircle >()); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bodySpriteMap") ) { _hx_set_bodySpriteMap(HX_CTX_GET,inValue.Cast<  ::bonsai::render::SpriteMap >()); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"bodyParticleSystem") ) { _hx_set_bodyParticleSystem(HX_CTX_GET,inValue.Cast<  ::game::BodyPartParticles >()); return inValue; }
		if (HX_FIELD_EQ(inName,"bodyAnimatedSprite") ) { _hx_set_bodyAnimatedSprite(HX_CTX_GET,inValue.Cast<  ::bonsai::render::AnimatedSprite >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void World_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("inventory",9c,76,b6,48));
	outFields->push(HX_("bodyParticleSystem",17,e8,76,1e));
	outFields->push(HX_("bodyAnimatedSprite",4a,85,b6,81));
	outFields->push(HX_("bodySpriteMap",95,78,9c,67));
	outFields->push(HX_("bodies",80,1b,dd,5a));
	outFields->push(HX_("input",0a,c4,1d,be));
	outFields->push(HX_("camera",a5,46,8c,b7));
	outFields->push(HX_("summonCircle",11,6b,de,54));
	outFields->push(HX_("f",66,00,00,00));
	outFields->push(HX_("zOffset",ad,a3,0e,66));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo World_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::game::Inventory */ ,(int)offsetof(World_obj,inventory),HX_("inventory",9c,76,b6,48)},
	{hx::fsObject /*  ::game::BodyPartParticles */ ,(int)offsetof(World_obj,bodyParticleSystem),HX_("bodyParticleSystem",17,e8,76,1e)},
	{hx::fsObject /*  ::bonsai::render::AnimatedSprite */ ,(int)offsetof(World_obj,bodyAnimatedSprite),HX_("bodyAnimatedSprite",4a,85,b6,81)},
	{hx::fsObject /*  ::bonsai::render::SpriteMap */ ,(int)offsetof(World_obj,bodySpriteMap),HX_("bodySpriteMap",95,78,9c,67)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(World_obj,bodies),HX_("bodies",80,1b,dd,5a)},
	{hx::fsObject /*  ::bonsai::input::Input */ ,(int)offsetof(World_obj,input),HX_("input",0a,c4,1d,be)},
	{hx::fsObject /*  ::bonsai::scene::Camera */ ,(int)offsetof(World_obj,camera),HX_("camera",a5,46,8c,b7)},
	{hx::fsObject /*  ::game::SummonCircle */ ,(int)offsetof(World_obj,summonCircle),HX_("summonCircle",11,6b,de,54)},
	{hx::fsFloat,(int)offsetof(World_obj,f),HX_("f",66,00,00,00)},
	{hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(World_obj,zOffset),HX_("zOffset",ad,a3,0e,66)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *World_obj_sStaticStorageInfo = 0;
#endif

static ::String World_obj_sMemberFields[] = {
	HX_("inventory",9c,76,b6,48),
	HX_("bodyParticleSystem",17,e8,76,1e),
	HX_("bodyAnimatedSprite",4a,85,b6,81),
	HX_("bodySpriteMap",95,78,9c,67),
	HX_("bodies",80,1b,dd,5a),
	HX_("input",0a,c4,1d,be),
	HX_("camera",a5,46,8c,b7),
	HX_("summonCircle",11,6b,de,54),
	HX_("f",66,00,00,00),
	HX_("update",09,86,05,87),
	HX_("render",56,6b,29,05),
	HX_("zOffset",ad,a3,0e,66),
	HX_("explodeBody",23,67,7a,bc),
	::String(null()) };

hx::Class World_obj::__mClass;

void World_obj::__register()
{
	World_obj _hx_dummy;
	World_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("game.World",b6,14,de,d3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(World_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< World_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = World_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = World_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
