// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_bonsai_Engine
#include <hxinc/bonsai/Engine.h>
#endif
#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
#ifndef INCLUDED_bonsai_entity_ParticleSystem
#include <hxinc/bonsai/entity/ParticleSystem.h>
#endif
#ifndef INCLUDED_bonsai_input_Input
#include <hxinc/bonsai/input/Input.h>
#endif
#ifndef INCLUDED_bonsai_render_Transformation
#include <hxinc/bonsai/render/Transformation.h>
#endif
#ifndef INCLUDED_bonsai_scene_Scene
#include <hxinc/bonsai/scene/Scene.h>
#endif
#ifndef INCLUDED_game_Goblin
#include <hxinc/game/Goblin.h>
#endif
#ifndef INCLUDED_game_Level1
#include <hxinc/game/Level1.h>
#endif
#ifndef INCLUDED_game_Player
#include <hxinc/game/Player.h>
#endif
#ifndef INCLUDED_game_PunchParticleSystem
#include <hxinc/game/PunchParticleSystem.h>
#endif
#ifndef INCLUDED_game_RainParticleSystem
#include <hxinc/game/RainParticleSystem.h>
#endif
#ifndef INCLUDED_game_TextParticleSystem
#include <hxinc/game/TextParticleSystem.h>
#endif
#ifndef INCLUDED_game_TileMap
#include <hxinc/game/TileMap.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <hxinc/kha/math/Vector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_15559fb93ba180cb_11_new,"game.Level1","new",0x18d850bb,"game.Level1.new","game/Level1.hx",11,0xf2e9d6f4)
HX_LOCAL_STACK_FRAME(_hx_pos_15559fb93ba180cb_22_update,"game.Level1","update",0x7077708e,"game.Level1.update","game/Level1.hx",22,0xf2e9d6f4)
HX_LOCAL_STACK_FRAME(_hx_pos_15559fb93ba180cb_27_render,"game.Level1","render",0xee9b55db,"game.Level1.render","game/Level1.hx",27,0xf2e9d6f4)
namespace game{

void Level1_obj::__construct( ::bonsai::Engine engine){
            	HX_GC_STACKFRAME(&_hx_pos_15559fb93ba180cb_11_new)
HXLINE(  12)		super::__construct(HX_("Level1",4d,32,e4,d8),engine);
HXLINE(  13)		this->_hx_set_transformation(HX_CTX,  ::bonsai::render::Transformation_obj::__alloc( HX_CTX ));
HXLINE(  14)		this->transformation->_hx_set_scale(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,3,3));
HXLINE(  15)		this->add( ::game::RainParticleSystem_obj::__alloc( HX_CTX ),2);
HXLINE(  16)		this->add( ::game::PunchParticleSystem_obj::__alloc( HX_CTX ),2);
HXLINE(  17)		this->_hx_set_t(HX_CTX,  ::game::TextParticleSystem_obj::__alloc( HX_CTX ));
HXLINE(  18)		this->add( ::game::Goblin_obj::__alloc( HX_CTX ,( (Float)(20) ),( (Float)(46) )),1);
HXLINE(  19)		this->add( ::game::Player_obj::__alloc( HX_CTX ,( (Float)(10) ),( (Float)(30) ),engine->input),1);
HXLINE(  20)		this->add( ::game::TileMap_obj::__alloc( HX_CTX ),null());
            	}

Dynamic Level1_obj::__CreateEmpty() { return new Level1_obj; }

void *Level1_obj::_hx_vtable = 0;

Dynamic Level1_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Level1_obj > _hx_result = new Level1_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Level1_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19d037c7) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x19d037c7;
	} else {
		return inClassId==(int)0x1b8885fe;
	}
}

void Level1_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_15559fb93ba180cb_22_update)
HXLINE(  23)		Float dtMultiplier;
HXDLIN(  23)		if (this->engine->input->mouseInside) {
HXLINE(  23)			dtMultiplier = ( (Float)(1) );
            		}
            		else {
HXLINE(  23)			dtMultiplier = ((Float).5);
            		}
HXLINE(  24)		this->super::update((dt * dtMultiplier));
HXLINE(  25)		this->t->update(dt);
            	}


void Level1_obj::render( ::kha::graphics2::Graphics g){
            	HX_STACKFRAME(&_hx_pos_15559fb93ba180cb_27_render)
HXLINE(  28)		this->transformation->apply(g);
HXLINE(  29)		this->super::render(g);
HXLINE(  30)		this->transformation->finish(g);
HXLINE(  31)		this->t->render(g);
            	}



hx::ObjectPtr< Level1_obj > Level1_obj::__new( ::bonsai::Engine engine) {
	hx::ObjectPtr< Level1_obj > __this = new Level1_obj();
	__this->__construct(engine);
	return __this;
}

hx::ObjectPtr< Level1_obj > Level1_obj::__alloc(hx::Ctx *_hx_ctx, ::bonsai::Engine engine) {
	Level1_obj *__this = (Level1_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Level1_obj), true, "game.Level1"));
	*(void **)__this = Level1_obj::_hx_vtable;
	__this->__construct(engine);
	return __this;
}

Level1_obj::Level1_obj()
{
}

void Level1_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Level1);
	HX_MARK_MEMBER_NAME(rain,"rain");
	HX_MARK_MEMBER_NAME(transformation,"transformation");
	HX_MARK_MEMBER_NAME(t,"t");
	 ::bonsai::scene::Scene_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Level1_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(rain,"rain");
	HX_VISIT_MEMBER_NAME(transformation,"transformation");
	HX_VISIT_MEMBER_NAME(t,"t");
	 ::bonsai::scene::Scene_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Level1_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"t") ) { return hx::Val( t ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rain") ) { return hx::Val( rain ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformation") ) { return hx::Val( transformation ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Level1_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"t") ) { _hx_set_t(HX_CTX_GET,inValue.Cast<  ::game::TextParticleSystem >()); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rain") ) { _hx_set_rain(HX_CTX_GET,inValue.Cast<  ::game::RainParticleSystem >()); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformation") ) { _hx_set_transformation(HX_CTX_GET,inValue.Cast<  ::bonsai::render::Transformation >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Level1_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("rain",54,49,a4,4b));
	outFields->push(HX_("transformation",c9,bd,2f,0a));
	outFields->push(HX_("t",74,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Level1_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::game::RainParticleSystem */ ,(int)offsetof(Level1_obj,rain),HX_("rain",54,49,a4,4b)},
	{hx::fsObject /*  ::bonsai::render::Transformation */ ,(int)offsetof(Level1_obj,transformation),HX_("transformation",c9,bd,2f,0a)},
	{hx::fsObject /*  ::game::TextParticleSystem */ ,(int)offsetof(Level1_obj,t),HX_("t",74,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Level1_obj_sStaticStorageInfo = 0;
#endif

static ::String Level1_obj_sMemberFields[] = {
	HX_("rain",54,49,a4,4b),
	HX_("transformation",c9,bd,2f,0a),
	HX_("t",74,00,00,00),
	HX_("update",09,86,05,87),
	HX_("render",56,6b,29,05),
	::String(null()) };

hx::Class Level1_obj::__mClass;

void Level1_obj::__register()
{
	Level1_obj _hx_dummy;
	Level1_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("game.Level1",49,d7,24,69);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Level1_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Level1_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Level1_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Level1_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
