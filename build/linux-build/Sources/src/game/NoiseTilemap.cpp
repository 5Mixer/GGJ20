// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
#ifndef INCLUDED_bonsai_render_SpriteMap
#include <hxinc/bonsai/render/SpriteMap.h>
#endif
#ifndef INCLUDED_differ_shapes_Polygon
#include <hxinc/differ/shapes/Polygon.h>
#endif
#ifndef INCLUDED_differ_shapes_Shape
#include <hxinc/differ/shapes/Shape.h>
#endif
#ifndef INCLUDED_game_NoiseTilemap
#include <hxinc/game/NoiseTilemap.h>
#endif
#ifndef INCLUDED_hxnoise_Perlin
#include <hxinc/hxnoise/Perlin.h>
#endif
#ifndef INCLUDED_kha_Assets
#include <hxinc/kha/Assets.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha__Assets_ImageList
#include <hxinc/kha/_Assets/ImageList.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <hxinc/kha/math/Vector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1574c75c1681c97a_8_new,"game.NoiseTilemap","new",0xefe7aec2,"game.NoiseTilemap.new","game/NoiseTilemap.hx",8,0xd730080d)
HX_LOCAL_STACK_FRAME(_hx_pos_1574c75c1681c97a_38_findSpawn,"game.NoiseTilemap","findSpawn",0x5863a324,"game.NoiseTilemap.findSpawn","game/NoiseTilemap.hx",38,0xd730080d)
HX_LOCAL_STACK_FRAME(_hx_pos_1574c75c1681c97a_47_getTile,"game.NoiseTilemap","getTile",0x369f3246,"game.NoiseTilemap.getTile","game/NoiseTilemap.hx",47,0xd730080d)
HX_LOCAL_STACK_FRAME(_hx_pos_1574c75c1681c97a_55_render,"game.NoiseTilemap","render",0xd19b3634,"game.NoiseTilemap.render","game/NoiseTilemap.hx",55,0xd730080d)
HX_LOCAL_STACK_FRAME(_hx_pos_1574c75c1681c97a_63_update,"game.NoiseTilemap","update",0x537750e7,"game.NoiseTilemap.update","game/NoiseTilemap.hx",63,0xd730080d)
namespace game{

void NoiseTilemap_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_1574c75c1681c97a_8_new)
HXLINE(  20)		this->seaLevel = ((Float)-.75);
HXLINE(  19)		this->seed = ((Float)0.);
HXLINE(  16)		this->_hx_set_tilesByBiome(HX_CTX, ::Array_obj< ::Dynamic>::__new(6)->init(0,::Array_obj< ::Dynamic>::__new(0))->init(1,::Array_obj< ::Dynamic>::__new(0))->init(2,::Array_obj< ::Dynamic>::__new(0))->init(3,::Array_obj< ::Dynamic>::__new(0))->init(4,::Array_obj< ::Dynamic>::__new(0))->init(5,::Array_obj< ::Dynamic>::__new(0)));
HXLINE(  15)		this->_hx_set_baseTiles(HX_CTX, ::Array_obj< ::Dynamic>::__new(0));
HXLINE(  13)		this->_hx_set_colliders(HX_CTX, ::Array_obj< ::Dynamic>::__new(0));
HXLINE(  10)		this->height = 300;
HXLINE(   9)		this->width = 300;
HXLINE(  23)		super::__construct();
HXLINE(  25)		this->_hx_set_spriteMap(HX_CTX,  ::bonsai::render::SpriteMap_obj::__alloc( HX_CTX ,::kha::Assets_obj::images->tiles,16,16));
HXLINE(  27)		this->_hx_set_perlin(HX_CTX,  ::hxnoise::Perlin_obj::__alloc( HX_CTX ,null()));
HXLINE(  28)		this->seed = (::Math_obj::random() * ( (Float)(30000) ));
HXLINE(  29)		{
HXLINE(  29)			int _g = 0;
HXDLIN(  29)			int _g1 = this->width;
HXDLIN(  29)			while((_g < _g1)){
HXLINE(  29)				_g = (_g + 1);
HXDLIN(  29)				int y = (_g - 1);
HXLINE(  30)				this->baseTiles->setCtx( HX_CTX, y,::Array_obj< int >::__new(0));
HXLINE(  31)				{
HXLINE(  31)					int _g2 = 0;
HXDLIN(  31)					int _g11 = this->height;
HXDLIN(  31)					while((_g2 < _g11)){
HXLINE(  31)						_g2 = (_g2 + 1);
HXDLIN(  31)						int x = (_g2 - 1);
HXLINE(  32)						this->baseTiles->__get(y).StaticCast< ::Array< int > >()[x] = this->getTile(x,y);
HXLINE(  33)						::Array< ::Dynamic> _hx_tmp = this->tilesByBiome;
HXDLIN(  33)						int _hx_tmp1 = this->getTile(x,y);
HXDLIN(  33)						_hx_tmp->__get(_hx_tmp1).StaticCast< ::Array< ::Dynamic> >()->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("x",78,00,00,00),x)
            							->setFixed(1,HX_("y",79,00,00,00),y)));
            					}
            				}
            			}
            		}
            	}

Dynamic NoiseTilemap_obj::__CreateEmpty() { return new NoiseTilemap_obj; }

void *NoiseTilemap_obj::_hx_vtable = 0;

Dynamic NoiseTilemap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NoiseTilemap_obj > _hx_result = new NoiseTilemap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool NoiseTilemap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x61169fa0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x61169fa0;
	} else {
		return inClassId==(int)0x7aa83126;
	}
}

 ::kha::math::Vector2 NoiseTilemap_obj::findSpawn(){
            	HX_GC_STACKFRAME(&_hx_pos_1574c75c1681c97a_38_findSpawn)
HXLINE(  39)		int spawnx = 2;
HXLINE(  40)		int spawny = 150;
HXLINE(  41)		while(true){
HXLINE(  41)			bool _hx_tmp;
HXDLIN(  41)			if ((this->getTile(spawnx,spawny) < 1)) {
HXLINE(  41)				_hx_tmp = (spawnx < 150);
            			}
            			else {
HXLINE(  41)				_hx_tmp = false;
            			}
HXDLIN(  41)			if (!(_hx_tmp)) {
HXLINE(  41)				goto _hx_goto_3;
            			}
HXLINE(  42)			spawnx = (spawnx + 1);
            		}
            		_hx_goto_3:;
HXLINE(  44)		spawnx = (spawnx + 4);
HXLINE(  45)		return  ::kha::math::Vector2_obj::__alloc( HX_CTX ,(spawnx * 16),(spawny * 16));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NoiseTilemap_obj,findSpawn,return )

int NoiseTilemap_obj::getTile(int x,int y){
            	HX_STACKFRAME(&_hx_pos_1574c75c1681c97a_47_getTile)
HXLINE(  48)		Float offset = ::Math_obj::max(( (Float)(0) ),(((::Math_obj::pow(( (Float)((x - 150)) ),( (Float)(2) )) + ::Math_obj::pow(( (Float)((y - 150)) ),( (Float)(2) ))) / ( (Float)(5000) )) + this->seaLevel));
HXLINE(  49)		Float c = ::Math_obj::min(( (Float)(5) ),((this->perlin->OctavePerlin((( (Float)(x) ) / ( (Float)(16) )),(( (Float)(y) ) / ( (Float)(16) )),this->seed,5,((Float)0.5),((Float)0.25)) * ( (Float)(8) )) - offset));
HXLINE(  51)		return ::Math_obj::round(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(5) ),(c - ( (Float)(1) )))));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NoiseTilemap_obj,getTile,return )

void NoiseTilemap_obj::render( ::kha::graphics2::Graphics graphics){
            	HX_STACKFRAME(&_hx_pos_1574c75c1681c97a_55_render)
HXDLIN(  55)		int _g = 0;
HXDLIN(  55)		int _g1 = this->width;
HXDLIN(  55)		while((_g < _g1)){
HXDLIN(  55)			_g = (_g + 1);
HXDLIN(  55)			int y = (_g - 1);
HXLINE(  56)			{
HXLINE(  56)				int _g2 = 0;
HXDLIN(  56)				int _g11 = this->height;
HXDLIN(  56)				while((_g2 < _g11)){
HXLINE(  56)					_g2 = (_g2 + 1);
HXDLIN(  56)					int x = (_g2 - 1);
HXLINE(  57)					this->spriteMap->renderCell(graphics,( (float)((x * 16)) ),( (float)((y * 16)) ),0,this->baseTiles->__get(y).StaticCast< ::Array< int > >()->__get(x));
            				}
            			}
            		}
            	}


void NoiseTilemap_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_1574c75c1681c97a_63_update)
            	}



hx::ObjectPtr< NoiseTilemap_obj > NoiseTilemap_obj::__new() {
	hx::ObjectPtr< NoiseTilemap_obj > __this = new NoiseTilemap_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< NoiseTilemap_obj > NoiseTilemap_obj::__alloc(hx::Ctx *_hx_ctx) {
	NoiseTilemap_obj *__this = (NoiseTilemap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NoiseTilemap_obj), true, "game.NoiseTilemap"));
	*(void **)__this = NoiseTilemap_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

NoiseTilemap_obj::NoiseTilemap_obj()
{
}

void NoiseTilemap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NoiseTilemap);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(spriteMap,"spriteMap");
	HX_MARK_MEMBER_NAME(colliders,"colliders");
	HX_MARK_MEMBER_NAME(baseTiles,"baseTiles");
	HX_MARK_MEMBER_NAME(tilesByBiome,"tilesByBiome");
	HX_MARK_MEMBER_NAME(perlin,"perlin");
	HX_MARK_MEMBER_NAME(seed,"seed");
	HX_MARK_MEMBER_NAME(seaLevel,"seaLevel");
	 ::bonsai::entity::Entity_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NoiseTilemap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(spriteMap,"spriteMap");
	HX_VISIT_MEMBER_NAME(colliders,"colliders");
	HX_VISIT_MEMBER_NAME(baseTiles,"baseTiles");
	HX_VISIT_MEMBER_NAME(tilesByBiome,"tilesByBiome");
	HX_VISIT_MEMBER_NAME(perlin,"perlin");
	HX_VISIT_MEMBER_NAME(seed,"seed");
	HX_VISIT_MEMBER_NAME(seaLevel,"seaLevel");
	 ::bonsai::entity::Entity_obj::__Visit(HX_VISIT_ARG);
}

hx::Val NoiseTilemap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"seed") ) { return hx::Val( seed ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"perlin") ) { return hx::Val( perlin ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getTile") ) { return hx::Val( getTile_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"seaLevel") ) { return hx::Val( seaLevel ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spriteMap") ) { return hx::Val( spriteMap ); }
		if (HX_FIELD_EQ(inName,"colliders") ) { return hx::Val( colliders ); }
		if (HX_FIELD_EQ(inName,"baseTiles") ) { return hx::Val( baseTiles ); }
		if (HX_FIELD_EQ(inName,"findSpawn") ) { return hx::Val( findSpawn_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"tilesByBiome") ) { return hx::Val( tilesByBiome ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NoiseTilemap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"seed") ) { seed=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"perlin") ) { _hx_set_perlin(HX_CTX_GET,inValue.Cast<  ::hxnoise::Perlin >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"seaLevel") ) { seaLevel=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spriteMap") ) { _hx_set_spriteMap(HX_CTX_GET,inValue.Cast<  ::bonsai::render::SpriteMap >()); return inValue; }
		if (HX_FIELD_EQ(inName,"colliders") ) { _hx_set_colliders(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		if (HX_FIELD_EQ(inName,"baseTiles") ) { _hx_set_baseTiles(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"tilesByBiome") ) { _hx_set_tilesByBiome(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NoiseTilemap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("spriteMap",97,77,04,56));
	outFields->push(HX_("colliders",bf,6e,4d,d1));
	outFields->push(HX_("baseTiles",b4,a7,19,20));
	outFields->push(HX_("tilesByBiome",c4,7d,2f,10));
	outFields->push(HX_("perlin",94,a2,1d,3b));
	outFields->push(HX_("seed",71,85,50,4c));
	outFields->push(HX_("seaLevel",75,a3,cf,e7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo NoiseTilemap_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(NoiseTilemap_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsInt,(int)offsetof(NoiseTilemap_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /*  ::bonsai::render::SpriteMap */ ,(int)offsetof(NoiseTilemap_obj,spriteMap),HX_("spriteMap",97,77,04,56)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(NoiseTilemap_obj,colliders),HX_("colliders",bf,6e,4d,d1)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(NoiseTilemap_obj,baseTiles),HX_("baseTiles",b4,a7,19,20)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(NoiseTilemap_obj,tilesByBiome),HX_("tilesByBiome",c4,7d,2f,10)},
	{hx::fsObject /*  ::hxnoise::Perlin */ ,(int)offsetof(NoiseTilemap_obj,perlin),HX_("perlin",94,a2,1d,3b)},
	{hx::fsFloat,(int)offsetof(NoiseTilemap_obj,seed),HX_("seed",71,85,50,4c)},
	{hx::fsFloat,(int)offsetof(NoiseTilemap_obj,seaLevel),HX_("seaLevel",75,a3,cf,e7)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NoiseTilemap_obj_sStaticStorageInfo = 0;
#endif

static ::String NoiseTilemap_obj_sMemberFields[] = {
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("spriteMap",97,77,04,56),
	HX_("colliders",bf,6e,4d,d1),
	HX_("baseTiles",b4,a7,19,20),
	HX_("tilesByBiome",c4,7d,2f,10),
	HX_("perlin",94,a2,1d,3b),
	HX_("seed",71,85,50,4c),
	HX_("seaLevel",75,a3,cf,e7),
	HX_("findSpawn",42,cf,5d,70),
	HX_("getTile",e4,7a,7f,1f),
	HX_("render",56,6b,29,05),
	HX_("update",09,86,05,87),
	::String(null()) };

hx::Class NoiseTilemap_obj::__mClass;

void NoiseTilemap_obj::__register()
{
	NoiseTilemap_obj _hx_dummy;
	NoiseTilemap_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("game.NoiseTilemap",d0,e5,fc,1c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NoiseTilemap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NoiseTilemap_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NoiseTilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NoiseTilemap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
