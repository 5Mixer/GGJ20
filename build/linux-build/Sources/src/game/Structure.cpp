// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
#ifndef INCLUDED_bonsai_render_SpriteMap
#include <hxinc/bonsai/render/SpriteMap.h>
#endif
#ifndef INCLUDED_bonsai_render_Transformation
#include <hxinc/bonsai/render/Transformation.h>
#endif
#ifndef INCLUDED_bonsai_resource_Tiled
#include <hxinc/bonsai/resource/Tiled.h>
#endif
#ifndef INCLUDED_differ_shapes_Polygon
#include <hxinc/differ/shapes/Polygon.h>
#endif
#ifndef INCLUDED_differ_shapes_Shape
#include <hxinc/differ/shapes/Shape.h>
#endif
#ifndef INCLUDED_game_Structure
#include <hxinc/game/Structure.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <hxinc/haxe/iterators/MapKeyValueIterator.h>
#endif
#ifndef INCLUDED_kha_Assets
#include <hxinc/kha/Assets.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha__Assets_BlobList
#include <hxinc/kha/_Assets/BlobList.h>
#endif
#ifndef INCLUDED_kha__Assets_ImageList
#include <hxinc/kha/_Assets/ImageList.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_internal_BytesBlob
#include <hxinc/kha/internal/BytesBlob.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <hxinc/kha/math/Vector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e44038689cab253e_7_new,"game.Structure","new",0x9e290d09,"game.Structure.new","game/Structure.hx",7,0x991da408)
HX_LOCAL_STACK_FRAME(_hx_pos_e44038689cab253e_54_render,"game.Structure","render",0x12f6be4d,"game.Structure.render","game/Structure.hx",54,0x991da408)
HX_LOCAL_STACK_FRAME(_hx_pos_e44038689cab253e_67_update,"game.Structure","update",0x94d2d900,"game.Structure.update","game/Structure.hx",67,0x991da408)
namespace game{

void Structure_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e44038689cab253e_7_new)
HXLINE(  14)		this->_hx_set_colliders(HX_CTX, ::Array_obj< ::Dynamic>::__new(0));
HXLINE(   9)		this->height = 100;
HXLINE(   8)		this->width = 100;
HXLINE(  17)		super::__construct();
HXLINE(  19)		this->_hx_set_tiled(HX_CTX,  ::bonsai::resource::Tiled_obj::__alloc( HX_CTX ,::kha::Assets_obj::blobs->castle2_tmx->toString()));
HXLINE(  20)		this->width = this->tiled->width;
HXLINE(  21)		this->height = this->tiled->height;
HXLINE(  23)		{
HXLINE(  23)			int _g = 0;
HXDLIN(  23)			::Array< ::Dynamic> _g1 = this->tiled->polygons;
HXDLIN(  23)			while((_g < _g1->length)){
HXLINE(  23)				::Array< ::Dynamic> polygon = _g1->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  23)				_g = (_g + 1);
            			}
            		}
HXLINE(  30)		{
HXLINE(  30)			int _g2 = 0;
HXDLIN(  30)			::Array< ::Dynamic> _g3 = this->tiled->rectangles;
HXDLIN(  30)			while((_g2 < _g3->length)){
HXLINE(  30)				 ::Dynamic rectangle = _g3->__get(_g2);
HXDLIN(  30)				_g2 = (_g2 + 1);
HXLINE(  31)				::Array< ::Dynamic> _hx_tmp = this->colliders;
HXDLIN(  31)				_hx_tmp->push(::differ::shapes::Polygon_obj::rectangle(( (Float)(rectangle->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ),( (Float)(rectangle->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ),( (Float)(rectangle->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ),( (Float)(rectangle->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) ),null()));
            			}
            		}
HXLINE(  48)		this->_hx_set_spriteMap(HX_CTX,  ::bonsai::render::SpriteMap_obj::__alloc( HX_CTX ,::kha::Assets_obj::images->castleTiles,16,16));
HXLINE(  50)		this->_hx_set_transformation(HX_CTX,  ::bonsai::render::Transformation_obj::__alloc( HX_CTX ));
HXLINE(  51)		this->transformation->_hx_set_offset(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,0,0));
            	}

Dynamic Structure_obj::__CreateEmpty() { return new Structure_obj; }

void *Structure_obj::_hx_vtable = 0;

Dynamic Structure_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Structure_obj > _hx_result = new Structure_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Structure_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x04cb36a1) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x04cb36a1;
	} else {
		return inClassId==(int)0x61169fa0;
	}
}

void Structure_obj::render( ::kha::graphics2::Graphics graphics){
            	HX_GC_STACKFRAME(&_hx_pos_e44038689cab253e_54_render)
HXLINE(  55)		this->transformation->apply(graphics);
HXLINE(  56)		{
HXLINE(  56)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,this->tiled->layers);
HXDLIN(  56)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  56)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)();
HXDLIN(  56)				::String layerName = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),hx::paccDynamic)) );
HXDLIN(  56)				 ::Dynamic layer = _g1->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic);
HXLINE(  57)				{
HXLINE(  57)					int _g2 = 0;
HXDLIN(  57)					int _g3 = this->width;
HXDLIN(  57)					while((_g2 < _g3)){
HXLINE(  57)						_g2 = (_g2 + 1);
HXDLIN(  57)						int y = (_g2 - 1);
HXLINE(  58)						{
HXLINE(  58)							int _g21 = 0;
HXDLIN(  58)							int _g31 = this->height;
HXDLIN(  58)							while((_g21 < _g31)){
HXLINE(  58)								_g21 = (_g21 + 1);
HXDLIN(  58)								int x = (_g21 - 1);
HXLINE(  59)								this->spriteMap->render(graphics,( (float)((x * 16)) ),( (float)((y * 16)) ),(( (int)( ::Dynamic(layer->__Field(HX_("tiles",85,fd,34,10),hx::paccDynamic))->__GetItem(y)->__GetItem(x)) ) - 1));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  64)		this->transformation->finish(graphics);
            	}


void Structure_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_e44038689cab253e_67_update)
            	}



hx::ObjectPtr< Structure_obj > Structure_obj::__new() {
	hx::ObjectPtr< Structure_obj > __this = new Structure_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Structure_obj > Structure_obj::__alloc(hx::Ctx *_hx_ctx) {
	Structure_obj *__this = (Structure_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Structure_obj), true, "game.Structure"));
	*(void **)__this = Structure_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Structure_obj::Structure_obj()
{
}

void Structure_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Structure);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(transformation,"transformation");
	HX_MARK_MEMBER_NAME(tiled,"tiled");
	HX_MARK_MEMBER_NAME(spriteMap,"spriteMap");
	HX_MARK_MEMBER_NAME(colliders,"colliders");
	 ::bonsai::entity::Entity_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Structure_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(transformation,"transformation");
	HX_VISIT_MEMBER_NAME(tiled,"tiled");
	HX_VISIT_MEMBER_NAME(spriteMap,"spriteMap");
	HX_VISIT_MEMBER_NAME(colliders,"colliders");
	 ::bonsai::entity::Entity_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Structure_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"tiled") ) { return hx::Val( tiled ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spriteMap") ) { return hx::Val( spriteMap ); }
		if (HX_FIELD_EQ(inName,"colliders") ) { return hx::Val( colliders ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformation") ) { return hx::Val( transformation ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Structure_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tiled") ) { _hx_set_tiled(HX_CTX_GET,inValue.Cast<  ::bonsai::resource::Tiled >()); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spriteMap") ) { _hx_set_spriteMap(HX_CTX_GET,inValue.Cast<  ::bonsai::render::SpriteMap >()); return inValue; }
		if (HX_FIELD_EQ(inName,"colliders") ) { _hx_set_colliders(HX_CTX_GET,inValue.Cast< ::Array< ::Dynamic> >()); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformation") ) { _hx_set_transformation(HX_CTX_GET,inValue.Cast<  ::bonsai::render::Transformation >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Structure_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("transformation",c9,bd,2f,0a));
	outFields->push(HX_("tiled",76,fd,34,10));
	outFields->push(HX_("spriteMap",97,77,04,56));
	outFields->push(HX_("colliders",bf,6e,4d,d1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Structure_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Structure_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsInt,(int)offsetof(Structure_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /*  ::bonsai::render::Transformation */ ,(int)offsetof(Structure_obj,transformation),HX_("transformation",c9,bd,2f,0a)},
	{hx::fsObject /*  ::bonsai::resource::Tiled */ ,(int)offsetof(Structure_obj,tiled),HX_("tiled",76,fd,34,10)},
	{hx::fsObject /*  ::bonsai::render::SpriteMap */ ,(int)offsetof(Structure_obj,spriteMap),HX_("spriteMap",97,77,04,56)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Structure_obj,colliders),HX_("colliders",bf,6e,4d,d1)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Structure_obj_sStaticStorageInfo = 0;
#endif

static ::String Structure_obj_sMemberFields[] = {
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("transformation",c9,bd,2f,0a),
	HX_("tiled",76,fd,34,10),
	HX_("spriteMap",97,77,04,56),
	HX_("colliders",bf,6e,4d,d1),
	HX_("render",56,6b,29,05),
	HX_("update",09,86,05,87),
	::String(null()) };

hx::Class Structure_obj::__mClass;

void Structure_obj::__register()
{
	Structure_obj _hx_dummy;
	Structure_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("game.Structure",97,d4,71,0e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Structure_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Structure_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Structure_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Structure_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
