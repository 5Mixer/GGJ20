// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_game_BodyPart
#include <hxinc/game/BodyPart.h>
#endif
#ifndef INCLUDED_game_BodyParticle
#include <hxinc/game/BodyParticle.h>
#endif

namespace game{

void BodyParticle_obj::__construct() { }

Dynamic BodyParticle_obj::__CreateEmpty() { return new BodyParticle_obj; }

void *BodyParticle_obj::_hx_vtable = 0;

Dynamic BodyParticle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BodyParticle_obj > _hx_result = new BodyParticle_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BodyParticle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6f7fbd5a;
}


BodyParticle_obj::BodyParticle_obj()
{
}

void BodyParticle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BodyParticle);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(vz,"vz");
	HX_MARK_MEMBER_NAME(z,"z");
	HX_MARK_MEMBER_NAME(part,"part");
	HX_MARK_END_CLASS();
}

void BodyParticle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(vz,"vz");
	HX_VISIT_MEMBER_NAME(z,"z");
	HX_VISIT_MEMBER_NAME(part,"part");
}

hx::Val BodyParticle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"vz") ) { return hx::Val( vz ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"part") ) { return hx::Val( part ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BodyParticle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"vz") ) { vz=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"part") ) { _hx_set_part(HX_CTX_GET,inValue.Cast<  ::game::BodyPart >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BodyParticle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("vz",44,67,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	outFields->push(HX_("part",f3,e3,51,4a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo BodyParticle_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(BodyParticle_obj,x),HX_("x",78,00,00,00)},
	{hx::fsFloat,(int)offsetof(BodyParticle_obj,y),HX_("y",79,00,00,00)},
	{hx::fsFloat,(int)offsetof(BodyParticle_obj,vz),HX_("vz",44,67,00,00)},
	{hx::fsFloat,(int)offsetof(BodyParticle_obj,z),HX_("z",7a,00,00,00)},
	{hx::fsObject /*  ::game::BodyPart */ ,(int)offsetof(BodyParticle_obj,part),HX_("part",f3,e3,51,4a)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BodyParticle_obj_sStaticStorageInfo = 0;
#endif

static ::String BodyParticle_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("vz",44,67,00,00),
	HX_("z",7a,00,00,00),
	HX_("part",f3,e3,51,4a),
	::String(null()) };

hx::Class BodyParticle_obj::__mClass;

void BodyParticle_obj::__register()
{
	BodyParticle_obj _hx_dummy;
	BodyParticle_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("game.BodyParticle",24,bd,b3,da);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BodyParticle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BodyParticle_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BodyParticle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BodyParticle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
