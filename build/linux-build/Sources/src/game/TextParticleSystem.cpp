// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
#ifndef INCLUDED_bonsai_entity_ParticleSystem
#include <hxinc/bonsai/entity/ParticleSystem.h>
#endif
#ifndef INCLUDED_game_TextParticleSystem
#include <hxinc/game/TextParticleSystem.h>
#endif
#ifndef INCLUDED_kha_Assets
#include <hxinc/kha/Assets.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha__Assets_FontList
#include <hxinc/kha/_Assets/FontList.h>
#endif
#ifndef INCLUDED_kha__Color_Color_Impl_
#include <hxinc/kha/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_860634ea42d016f5_15_new,"game.TextParticleSystem","new",0x496aa270,"game.TextParticleSystem.new","game/TextParticleSystem.hx",15,0x73b3c55f)
HX_LOCAL_STACK_FRAME(_hx_pos_860634ea42d016f5_19_render,"game.TextParticleSystem","render",0xe7354346,"game.TextParticleSystem.render","game/TextParticleSystem.hx",19,0x73b3c55f)
HX_LOCAL_STACK_FRAME(_hx_pos_860634ea42d016f5_30_update,"game.TextParticleSystem","update",0x69115df9,"game.TextParticleSystem.update","game/TextParticleSystem.hx",30,0x73b3c55f)
namespace game{

void TextParticleSystem_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_860634ea42d016f5_15_new)
HXLINE(  29)		this->s = ((Float)0.);
HXLINE(  17)		super::__construct(0);
            	}

Dynamic TextParticleSystem_obj::__CreateEmpty() { return new TextParticleSystem_obj; }

void *TextParticleSystem_obj::_hx_vtable = 0;

Dynamic TextParticleSystem_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextParticleSystem_obj > _hx_result = new TextParticleSystem_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextParticleSystem_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x53b01352) {
		if (inClassId<=(int)0x129b0398) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x129b0398;
		} else {
			return inClassId==(int)0x53b01352;
		}
	} else {
		return inClassId==(int)0x61169fa0;
	}
}

void TextParticleSystem_obj::render( ::kha::graphics2::Graphics graphics){
            	HX_STACKFRAME(&_hx_pos_860634ea42d016f5_19_render)
HXLINE(  20)		graphics->set_color(::kha::_Color::Color_Impl__obj::fromString(HX_("#44cc55",e3,96,8f,ac)));
HXLINE(  21)		graphics->set_font(::kha::Assets_obj::fonts->KenneyMini);
HXLINE(  22)		graphics->set_fontSize(20);
HXLINE(  23)		{
HXLINE(  23)			int _g = 0;
HXDLIN(  23)			::Array< ::Dynamic> _g1 = this->members;
HXDLIN(  23)			while((_g < _g1->length)){
HXLINE(  23)				 ::Dynamic particle = _g1->__get(_g);
HXDLIN(  23)				_g = (_g + 1);
HXLINE(  24)				graphics->drawString(( (::String)(particle->__Field(HX_("text",ad,cc,f9,4c),hx::paccDynamic)) ),( (Float)(particle->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ),( (Float)(particle->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ));
            			}
            		}
HXLINE(  26)		graphics->set_opacity(( (Float)(1) ));
HXLINE(  27)		graphics->set_color(-1);
            	}


void TextParticleSystem_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_860634ea42d016f5_30_update)
HXLINE(  31)		 ::game::TextParticleSystem _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  31)		_hx_tmp->s = (_hx_tmp->s + dt);
HXLINE(  33)		{
HXLINE(  33)			int _g = 0;
HXDLIN(  33)			::Array< ::Dynamic> _g1 = this->members;
HXDLIN(  33)			while((_g < _g1->length)){
HXLINE(  33)				 ::Dynamic particle = _g1->__get(_g);
HXDLIN(  33)				_g = (_g + 1);
HXLINE(  34)				 ::Dynamic particle1 = particle;
HXDLIN(  34)				particle1->__SetField(HX_("x",78,00,00,00),(particle1->__Field(HX_("x",78,00,00,00),hx::paccDynamic) + (( (Float)(particle->__Field(HX_("vx",42,67,00,00),hx::paccDynamic)) ) * dt)),hx::paccDynamic);
HXLINE(  35)				 ::Dynamic particle2 = particle;
HXDLIN(  35)				particle2->__SetField(HX_("y",79,00,00,00),(particle2->__Field(HX_("y",79,00,00,00),hx::paccDynamic) + (( (Float)(particle->__Field(HX_("vy",43,67,00,00),hx::paccDynamic)) ) * dt)),hx::paccDynamic);
HXLINE(  36)				 ::Dynamic particle3 = particle;
HXDLIN(  36)				particle3->__SetField(HX_("vy",43,67,00,00),(( (Float)(particle3->__Field(HX_("vy",43,67,00,00),hx::paccDynamic)) ) * ((Float).8)),hx::paccDynamic);
HXLINE(  37)				 ::Dynamic particle4 = particle;
HXDLIN(  37)				particle4->__SetField(HX_("life",fc,10,b3,47),(( (Float)(particle4->__Field(HX_("life",fc,10,b3,47),hx::paccDynamic)) ) - dt),hx::paccDynamic);
            			}
            		}
HXLINE(  40)		if ((this->s > 1)) {
HXLINE(  41)			this->s = ( (Float)(0) );
HXLINE(  42)			this->spawnParticle( ::Dynamic(hx::Anon_obj::Create(6)
            				->setFixed(0,HX_("x",78,00,00,00),( (Float)((::Math_obj::round((::Math_obj::random() * ( (Float)(110) ))) - 5)) ))
            				->setFixed(1,HX_("y",79,00,00,00),(30 + (::Math_obj::random() * ( (Float)(40) ))))
            				->setFixed(2,HX_("vx",42,67,00,00),( (Float)(0) ))
            				->setFixed(3,HX_("vy",43,67,00,00),( (Float)(-170) ))
            				->setFixed(4,HX_("life",fc,10,b3,47),(1000 + (::Math_obj::random() * ( (Float)(500) ))))
            				->setFixed(5,HX_("text",ad,cc,f9,4c),(HX_("$",24,00,00,00) + ::Math_obj::floor((100 + (::Math_obj::random() * ( (Float)(900) ))))))));
            		}
            	}



hx::ObjectPtr< TextParticleSystem_obj > TextParticleSystem_obj::__new() {
	hx::ObjectPtr< TextParticleSystem_obj > __this = new TextParticleSystem_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TextParticleSystem_obj > TextParticleSystem_obj::__alloc(hx::Ctx *_hx_ctx) {
	TextParticleSystem_obj *__this = (TextParticleSystem_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextParticleSystem_obj), true, "game.TextParticleSystem"));
	*(void **)__this = TextParticleSystem_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextParticleSystem_obj::TextParticleSystem_obj()
{
}

hx::Val TextParticleSystem_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { return hx::Val( s ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TextParticleSystem_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { s=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextParticleSystem_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("s",73,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TextParticleSystem_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(TextParticleSystem_obj,s),HX_("s",73,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TextParticleSystem_obj_sStaticStorageInfo = 0;
#endif

static ::String TextParticleSystem_obj_sMemberFields[] = {
	HX_("render",56,6b,29,05),
	HX_("s",73,00,00,00),
	HX_("update",09,86,05,87),
	::String(null()) };

hx::Class TextParticleSystem_obj::__mClass;

void TextParticleSystem_obj::__register()
{
	TextParticleSystem_obj _hx_dummy;
	TextParticleSystem_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("game.TextParticleSystem",7e,ea,74,90);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextParticleSystem_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextParticleSystem_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextParticleSystem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextParticleSystem_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
