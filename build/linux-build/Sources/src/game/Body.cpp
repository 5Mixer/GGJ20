// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
#ifndef INCLUDED_bonsai_render_AnimatedSprite
#include <hxinc/bonsai/render/AnimatedSprite.h>
#endif
#ifndef INCLUDED_bonsai_render_SpriteMap
#include <hxinc/bonsai/render/SpriteMap.h>
#endif
#ifndef INCLUDED_differ_shapes_Circle
#include <hxinc/differ/shapes/Circle.h>
#endif
#ifndef INCLUDED_differ_shapes_Shape
#include <hxinc/differ/shapes/Shape.h>
#endif
#ifndef INCLUDED_game_Body
#include <hxinc/game/Body.h>
#endif
#ifndef INCLUDED_game_BodyPart
#include <hxinc/game/BodyPart.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <hxinc/haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <hxinc/haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <hxinc/haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_kha_Assets
#include <hxinc/kha/Assets.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha__Assets_ImageList
#include <hxinc/kha/_Assets/ImageList.h>
#endif
#ifndef INCLUDED_kha__Color_Color_Impl_
#include <hxinc/kha/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <hxinc/kha/math/Vector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_283631fa0fa340d1_4_new,"game.Body","new",0x2a28acb0,"game.Body.new","game/Body.hx",4,0xdfd7eadf)
static const int _hx_array_data_4a50d4be_1[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_283631fa0fa340d1_73_update,"game.Body","update",0xd9833bb9,"game.Body.update","game/Body.hx",73,0xdfd7eadf)
HX_LOCAL_STACK_FRAME(_hx_pos_283631fa0fa340d1_137_getItemDamage,"game.Body","getItemDamage",0x0ce61668,"game.Body.getItemDamage","game/Body.hx",137,0xdfd7eadf)
HX_LOCAL_STACK_FRAME(_hx_pos_283631fa0fa340d1_145_getDamage,"game.Body","getDamage",0x4bd211f5,"game.Body.getDamage","game/Body.hx",145,0xdfd7eadf)
HX_LOCAL_STACK_FRAME(_hx_pos_283631fa0fa340d1_148_render,"game.Body","render",0x57a72106,"game.Body.render","game/Body.hx",148,0xdfd7eadf)
namespace game{

void Body_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_283631fa0fa340d1_4_new)
HXLINE(  49)		this->time = ((Float)0.);
HXLINE(  39)		 ::haxe::ds::EnumValueMap _g =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN(  39)		_g->set(::game::BodyPart_obj::NaturalHeadRight_dyn(),11);
HXDLIN(  39)		_g->set(::game::BodyPart_obj::NaturalHeadLeft_dyn(),12);
HXDLIN(  39)		_g->set(::game::BodyPart_obj::NaturalHeadDown_dyn(),13);
HXDLIN(  39)		_g->set(::game::BodyPart_obj::NaturalHeadUp_dyn(),14);
HXDLIN(  39)		this->_hx_set_mohawks(HX_CTX, _g);
HXLINE(  25)		 ::haxe::ds::EnumValueMap _g1 =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN(  25)		_g1->set(::game::BodyPart_obj::NaturalHeadRight_dyn(),1);
HXDLIN(  25)		_g1->set(::game::BodyPart_obj::NaturalHeadLeft_dyn(),2);
HXDLIN(  25)		_g1->set(::game::BodyPart_obj::NaturalHeadDown_dyn(),3);
HXDLIN(  25)		_g1->set(::game::BodyPart_obj::NaturalHeadUp_dyn(),4);
HXDLIN(  25)		_g1->set(::game::BodyPart_obj::NaturalChest_dyn(),0);
HXDLIN(  25)		_g1->set(::game::BodyPart_obj::NaturalArm_dyn(),6);
HXDLIN(  25)		_g1->set(::game::BodyPart_obj::Knife_dyn(),7);
HXDLIN(  25)		_g1->set(::game::BodyPart_obj::Sword_dyn(),8);
HXDLIN(  25)		_g1->set(::game::BodyPart_obj::Axe_dyn(),9);
HXDLIN(  25)		_g1->set(::game::BodyPart_obj::NaturalLeg_dyn(),5);
HXDLIN(  25)		_g1->set(::game::BodyPart_obj::Boots_dyn(),10);
HXDLIN(  25)		this->_hx_set_bodyLayers(HX_CTX, _g1);
HXLINE(  23)		this->friendly = true;
HXLINE(  19)		this->vy = ((Float)0);
HXLINE(  18)		this->vx = ((Float)0);
HXLINE(  17)		this->z = ((Float)0);
HXLINE(  16)		this->vz = ((Float)0);
HXLINE(  14)		this->attackCooldown = ((Float)0.);
HXLINE(  13)		this->health = 100;
HXLINE(  53)		super::__construct();
HXLINE(  55)		this->_hx_set_position(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,(-160 + (( (Float)(320) ) * ::Math_obj::random())),(-110 + (( (Float)(220) ) * ::Math_obj::random()))));
HXLINE(  56)		this->_hx_set_targetPosition(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,0,0));
HXLINE(  58)		this->_hx_set_collider(HX_CTX,  ::differ::shapes::Circle_obj::__alloc( HX_CTX ,this->position->x,this->position->y,( (Float)(7) )));
HXLINE(  60)		this->friendly = true;
HXLINE(  62)		this->_hx_set_chest(HX_CTX, ::game::BodyPart_obj::NaturalChest_dyn());
HXLINE(  63)		this->_hx_set_head(HX_CTX, ::game::BodyPart_obj::NaturalHead_dyn());
HXLINE(  64)		this->_hx_set_leftArm(HX_CTX, ::game::BodyPart_obj::NaturalArm_dyn());
HXLINE(  65)		 ::game::BodyPart _hx_tmp;
HXDLIN(  65)		if (this->friendly) {
HXLINE(  65)			_hx_tmp = ::game::BodyPart_obj::Axe_dyn();
            		}
            		else {
HXLINE(  65)			_hx_tmp = ::game::BodyPart_obj::NaturalHead_dyn();
            		}
HXDLIN(  65)		this->_hx_set_rightArm(HX_CTX, _hx_tmp);
HXLINE(  66)		this->_hx_set_leftLeg(HX_CTX, ::game::BodyPart_obj::NaturalLeg_dyn());
HXLINE(  67)		this->_hx_set_rightLeg(HX_CTX, ::game::BodyPart_obj::NaturalLeg_dyn());
HXLINE(  69)		this->_hx_set_animatedSprite(HX_CTX,  ::bonsai::render::AnimatedSprite_obj::__alloc( HX_CTX ));
HXLINE(  70)		 ::bonsai::render::AnimatedSprite _hx_tmp1 = this->animatedSprite;
HXDLIN(  70)		_hx_tmp1->registerAnimation(HX_("idle",14,a7,b3,45), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("frames",a6,af,85,ac),::Array_obj< int >::fromData( _hx_array_data_4a50d4be_1,1))
            			->setFixed(1,HX_("spriteMap",97,77,04,56), ::bonsai::render::SpriteMap_obj::__alloc( HX_CTX ,::kha::Assets_obj::images->bodyParts2,32,32))));
HXLINE(  71)		this->animatedSprite->play(HX_("idle",14,a7,b3,45));
            	}

Dynamic Body_obj::__CreateEmpty() { return new Body_obj; }

void *Body_obj::_hx_vtable = 0;

Dynamic Body_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Body_obj > _hx_result = new Body_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Body_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x26a89458) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x26a89458;
	} else {
		return inClassId==(int)0x61169fa0;
	}
}

void Body_obj::update(Float dt){
            	HX_GC_STACKFRAME(&_hx_pos_283631fa0fa340d1_73_update)
HXLINE(  74)		 ::game::Body _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  74)		_hx_tmp->attackCooldown = (_hx_tmp->attackCooldown - dt);
HXLINE(  75)		if ((this->attackCooldown < 0)) {
HXLINE(  76)			this->attackCooldown = ((Float)0.);
            		}
HXLINE(  78)		 ::game::Body _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  78)		_hx_tmp1->time = (_hx_tmp1->time + dt);
HXLINE(  79)		Float speed = (( (Float)(180) ) * dt);
HXLINE(  80)		Float footOffset_x = ( (Float)(16) );
HXDLIN(  80)		Float footOffset_y = ( (Float)(32) );
HXLINE(  81)		 ::kha::math::Vector2 _this = this->targetPosition;
HXDLIN(  81)		 ::kha::math::Vector2 _this1 = this->position;
HXDLIN(  81)		Float vec_x = (_this1->x + footOffset_x);
HXDLIN(  81)		Float vec_y = (_this1->y + footOffset_y);
HXDLIN(  81)		Float _this_x = (_this->x - vec_x);
HXDLIN(  81)		Float _this_y = (_this->y - vec_y);
HXDLIN(  81)		Float _this_x1 = _this_x;
HXDLIN(  81)		Float _this_y1 = _this_y;
HXDLIN(  81)		Float currentLength = ::Math_obj::sqrt(((_this_x1 * _this_x1) + (_this_y1 * _this_y1)));
HXDLIN(  81)		if ((currentLength != 0)) {
HXLINE(  81)			Float mul = (( (Float)(1) ) / currentLength);
HXDLIN(  81)			_this_x1 = (_this_x1 * mul);
HXDLIN(  81)			_this_y1 = (_this_y1 * mul);
            		}
HXDLIN(  81)		Float movement_x = (_this_x1 * speed);
HXDLIN(  81)		Float movement_y = (_this_y1 * speed);
HXLINE(  82)		 ::kha::math::Vector2 _this2 = this->targetPosition;
HXDLIN(  82)		 ::kha::math::Vector2 _this3 = this->position;
HXDLIN(  82)		Float vec_x1 = (_this3->x + footOffset_x);
HXDLIN(  82)		Float vec_y1 = (_this3->y + footOffset_y);
HXDLIN(  82)		Float _this_x2 = (_this2->x - vec_x1);
HXDLIN(  82)		Float _this_y2 = (_this2->y - vec_y1);
HXDLIN(  82)		if ((::Math_obj::sqrt(((_this_x2 * _this_x2) + (_this_y2 * _this_y2))) > 10)) {
HXLINE(  83)			 ::kha::math::Vector2 _this4 = this->position;
HXDLIN(  83)			this->_hx_set_position(HX_CTX,  ::kha::math::Vector2_obj::__alloc( HX_CTX ,(_this4->x + movement_x),(_this4->y + movement_y)));
            		}
HXLINE(  86)		if (hx::IsEq( this->head,::game::BodyPart_obj::NaturalHead_dyn() )) {
HXLINE(  87)			if ((::Math_obj::abs((this->vx + movement_x)) > ::Math_obj::abs((this->vy + movement_y)))) {
HXLINE(  88)				if (((this->vx + movement_x) > 0)) {
HXLINE(  89)					this->_hx_set_drawnHead(HX_CTX, ::game::BodyPart_obj::NaturalHeadRight_dyn());
            				}
            				else {
HXLINE(  91)					this->_hx_set_drawnHead(HX_CTX, ::game::BodyPart_obj::NaturalHeadLeft_dyn());
            				}
            			}
            			else {
HXLINE(  93)				if (((this->vy + movement_y) > 0)) {
HXLINE(  94)					this->_hx_set_drawnHead(HX_CTX, ::game::BodyPart_obj::NaturalHeadDown_dyn());
            				}
            				else {
HXLINE(  96)					this->_hx_set_drawnHead(HX_CTX, ::game::BodyPart_obj::NaturalHeadUp_dyn());
            				}
            			}
            		}
HXLINE( 102)		 ::kha::math::Vector2 _hx_tmp2 = this->position;
HXDLIN( 102)		_hx_tmp2->x = (_hx_tmp2->x + this->vx);
HXLINE( 103)		 ::kha::math::Vector2 _hx_tmp3 = this->position;
HXDLIN( 103)		_hx_tmp3->y = (_hx_tmp3->y + this->vy);
HXLINE( 105)		 ::game::Body _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 105)		_hx_tmp4->vx = (_hx_tmp4->vx * ((Float).9));
HXLINE( 106)		 ::game::Body _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 106)		_hx_tmp5->vy = (_hx_tmp5->vy * ((Float).9));
HXLINE( 112)		int height = 5;
HXLINE( 113)		int _hx_tmp6;
HXDLIN( 113)		if (this->friendly) {
HXLINE( 113)			_hx_tmp6 = 0;
            		}
            		else {
HXLINE( 113)			_hx_tmp6 = 2;
            		}
HXDLIN( 113)		this->z = (::Math_obj::abs(::Math_obj::sin(((this->time + _hx_tmp6) * ( (Float)(10) )))) * ( (Float)(height) ));
HXLINE( 116)		bool _hx_tmp7;
HXDLIN( 116)		bool _hx_tmp8;
HXDLIN( 116)		if ((::Math_obj::abs(this->vz) < ((Float).1))) {
HXLINE( 116)			_hx_tmp8 = (this->z < 1);
            		}
            		else {
HXLINE( 116)			_hx_tmp8 = false;
            		}
HXDLIN( 116)		if (_hx_tmp8) {
HXLINE( 116)			_hx_tmp7 = (::Math_obj::abs(this->vx) < ((Float).1));
            		}
            		else {
HXLINE( 116)			_hx_tmp7 = false;
            		}
HXLINE( 131)		this->collider->set_x((this->position->x + 8));
HXLINE( 132)		this->collider->set_y((this->position->y + 24));
HXLINE( 134)		this->super::update(dt);
            	}


int Body_obj::getItemDamage( ::game::BodyPart bodyPart){
            	HX_STACKFRAME(&_hx_pos_283631fa0fa340d1_137_getItemDamage)
HXLINE( 138)		if (hx::IsEq( bodyPart,::game::BodyPart_obj::NaturalArm_dyn() )) {
HXLINE( 138)			return 5;
            		}
HXLINE( 139)		if (hx::IsEq( bodyPart,::game::BodyPart_obj::Knife_dyn() )) {
HXLINE( 139)			return 10;
            		}
HXLINE( 140)		if (hx::IsEq( bodyPart,::game::BodyPart_obj::Sword_dyn() )) {
HXLINE( 140)			return 15;
            		}
HXLINE( 141)		if (hx::IsEq( bodyPart,::game::BodyPart_obj::Axe_dyn() )) {
HXLINE( 141)			return 20;
            		}
HXLINE( 142)		return 1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Body_obj,getItemDamage,return )

int Body_obj::getDamage(){
            	HX_STACKFRAME(&_hx_pos_283631fa0fa340d1_145_getDamage)
HXDLIN( 145)		int _hx_tmp = this->getItemDamage(this->leftArm);
HXDLIN( 145)		return (_hx_tmp + this->getItemDamage(this->rightArm));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Body_obj,getDamage,return )

void Body_obj::render( ::kha::graphics2::Graphics graphics){
            	HX_GC_STACKFRAME(&_hx_pos_283631fa0fa340d1_148_render)
HXLINE( 149)		bool _hx_tmp;
HXDLIN( 149)		bool _hx_tmp1;
HXDLIN( 149)		bool _hx_tmp2;
HXDLIN( 149)		bool _hx_tmp3;
HXDLIN( 149)		bool _hx_tmp4;
HXDLIN( 149)		if (hx::IsNotNull( this->chest )) {
HXLINE( 149)			_hx_tmp4 = hx::IsNull( this->drawnHead );
            		}
            		else {
HXLINE( 149)			_hx_tmp4 = true;
            		}
HXDLIN( 149)		if (!(_hx_tmp4)) {
HXLINE( 149)			_hx_tmp3 = hx::IsNull( this->leftLeg );
            		}
            		else {
HXLINE( 149)			_hx_tmp3 = true;
            		}
HXDLIN( 149)		if (!(_hx_tmp3)) {
HXLINE( 149)			_hx_tmp2 = hx::IsNull( this->rightLeg );
            		}
            		else {
HXLINE( 149)			_hx_tmp2 = true;
            		}
HXDLIN( 149)		if (!(_hx_tmp2)) {
HXLINE( 149)			_hx_tmp1 = hx::IsNull( this->leftArm );
            		}
            		else {
HXLINE( 149)			_hx_tmp1 = true;
            		}
HXDLIN( 149)		if (!(_hx_tmp1)) {
HXLINE( 149)			_hx_tmp = hx::IsNull( this->rightArm );
            		}
            		else {
HXLINE( 149)			_hx_tmp = true;
            		}
HXDLIN( 149)		if (_hx_tmp) {
HXLINE( 150)			::haxe::Log_obj::trace(HX_("attempted to render a body that lacks part/s",14,a5,2b,00),hx::SourceInfo(HX_("game/Body.hx",df,ea,d7,df),150,HX_("game.Body",be,d4,50,4a),HX_("render",56,6b,29,05)));
HXLINE( 151)			return;
            		}
HXLINE( 153)		 ::Dynamic _hx_tmp5 = this->bodyLayers->get(this->chest);
HXDLIN( 153)		this->animatedSprite->_hx_set_drawLayers(HX_CTX, ::Array_obj< int >::__new(1)->init(0,_hx_tmp5));
HXLINE( 154)		this->animatedSprite->render(graphics,( (float)(this->position->x) ),( (float)((this->position->y - this->z)) ));
HXLINE( 156)		 ::Dynamic _hx_tmp6 = this->bodyLayers->get(this->drawnHead);
HXDLIN( 156)		this->animatedSprite->_hx_set_drawLayers(HX_CTX, ::Array_obj< int >::__new(1)->init(0,_hx_tmp6));
HXLINE( 157)		this->animatedSprite->render(graphics,( (float)(this->position->x) ),( (float)((this->position->y - this->z)) ));
HXLINE( 159)		 ::Dynamic _hx_tmp7 = this->mohawks->get(this->drawnHead);
HXDLIN( 159)		this->animatedSprite->_hx_set_drawLayers(HX_CTX, ::Array_obj< int >::__new(1)->init(0,_hx_tmp7));
HXLINE( 160)		int _hx_tmp8;
HXDLIN( 160)		if (this->friendly) {
HXLINE( 160)			_hx_tmp8 = ::kha::_Color::Color_Impl__obj::fromBytes(41,196,77,null());
            		}
            		else {
HXLINE( 160)			_hx_tmp8 = -65536;
            		}
HXDLIN( 160)		graphics->set_color(_hx_tmp8);
HXLINE( 161)		this->animatedSprite->render(graphics,( (float)(this->position->x) ),( (float)((this->position->y - this->z)) ));
HXLINE( 162)		graphics->set_color(-1);
HXLINE( 164)		 ::Dynamic _hx_tmp9 = this->bodyLayers->get(this->leftLeg);
HXDLIN( 164)		this->animatedSprite->_hx_set_drawLayers(HX_CTX, ::Array_obj< int >::__new(1)->init(0,_hx_tmp9));
HXLINE( 165)		this->animatedSprite->render(graphics,( (float)(this->position->x) ),( (float)((this->position->y - this->z)) ));
HXLINE( 167)		 ::Dynamic _hx_tmp10 = this->bodyLayers->get(this->rightLeg);
HXDLIN( 167)		this->animatedSprite->_hx_set_drawLayers(HX_CTX, ::Array_obj< int >::__new(1)->init(0,_hx_tmp10));
HXLINE( 168)		this->animatedSprite->render(graphics,( (float)((this->position->x + 5)) ),( (float)((this->position->y - this->z)) ));
HXLINE( 170)		 ::Dynamic _hx_tmp11 = this->bodyLayers->get(this->leftArm);
HXDLIN( 170)		this->animatedSprite->_hx_set_drawLayers(HX_CTX, ::Array_obj< int >::__new(1)->init(0,_hx_tmp11));
HXLINE( 171)		this->animatedSprite->render(graphics,( (float)(this->position->x) ),( (float)((this->position->y - this->z)) ));
HXLINE( 173)		 ::Dynamic _hx_tmp12 = this->bodyLayers->get(this->rightArm);
HXDLIN( 173)		this->animatedSprite->_hx_set_drawLayers(HX_CTX, ::Array_obj< int >::__new(1)->init(0,_hx_tmp12));
HXLINE( 174)		this->animatedSprite->render(graphics,( (float)((this->position->x + 7)) ),( (float)((this->position->y - this->z)) ));
            	}



hx::ObjectPtr< Body_obj > Body_obj::__new() {
	hx::ObjectPtr< Body_obj > __this = new Body_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Body_obj > Body_obj::__alloc(hx::Ctx *_hx_ctx) {
	Body_obj *__this = (Body_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Body_obj), true, "game.Body"));
	*(void **)__this = Body_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Body_obj::Body_obj()
{
}

void Body_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Body);
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(chest,"chest");
	HX_MARK_MEMBER_NAME(leftArm,"leftArm");
	HX_MARK_MEMBER_NAME(rightArm,"rightArm");
	HX_MARK_MEMBER_NAME(leftLeg,"leftLeg");
	HX_MARK_MEMBER_NAME(rightLeg,"rightLeg");
	HX_MARK_MEMBER_NAME(mohawk,"mohawk");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(attackCooldown,"attackCooldown");
	HX_MARK_MEMBER_NAME(vz,"vz");
	HX_MARK_MEMBER_NAME(z,"z");
	HX_MARK_MEMBER_NAME(vx,"vx");
	HX_MARK_MEMBER_NAME(vy,"vy");
	HX_MARK_MEMBER_NAME(collider,"collider");
	HX_MARK_MEMBER_NAME(friendly,"friendly");
	HX_MARK_MEMBER_NAME(bodyLayers,"bodyLayers");
	HX_MARK_MEMBER_NAME(mohawks,"mohawks");
	HX_MARK_MEMBER_NAME(animatedSprite,"animatedSprite");
	HX_MARK_MEMBER_NAME(targetPosition,"targetPosition");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(drawnHead,"drawnHead");
	 ::bonsai::entity::Entity_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Body_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(chest,"chest");
	HX_VISIT_MEMBER_NAME(leftArm,"leftArm");
	HX_VISIT_MEMBER_NAME(rightArm,"rightArm");
	HX_VISIT_MEMBER_NAME(leftLeg,"leftLeg");
	HX_VISIT_MEMBER_NAME(rightLeg,"rightLeg");
	HX_VISIT_MEMBER_NAME(mohawk,"mohawk");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(attackCooldown,"attackCooldown");
	HX_VISIT_MEMBER_NAME(vz,"vz");
	HX_VISIT_MEMBER_NAME(z,"z");
	HX_VISIT_MEMBER_NAME(vx,"vx");
	HX_VISIT_MEMBER_NAME(vy,"vy");
	HX_VISIT_MEMBER_NAME(collider,"collider");
	HX_VISIT_MEMBER_NAME(friendly,"friendly");
	HX_VISIT_MEMBER_NAME(bodyLayers,"bodyLayers");
	HX_VISIT_MEMBER_NAME(mohawks,"mohawks");
	HX_VISIT_MEMBER_NAME(animatedSprite,"animatedSprite");
	HX_VISIT_MEMBER_NAME(targetPosition,"targetPosition");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(drawnHead,"drawnHead");
	 ::bonsai::entity::Entity_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Body_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"vz") ) { return hx::Val( vz ); }
		if (HX_FIELD_EQ(inName,"vx") ) { return hx::Val( vx ); }
		if (HX_FIELD_EQ(inName,"vy") ) { return hx::Val( vy ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { return hx::Val( head ); }
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"chest") ) { return hx::Val( chest ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mohawk") ) { return hx::Val( mohawk ); }
		if (HX_FIELD_EQ(inName,"health") ) { return hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"leftArm") ) { return hx::Val( leftArm ); }
		if (HX_FIELD_EQ(inName,"leftLeg") ) { return hx::Val( leftLeg ); }
		if (HX_FIELD_EQ(inName,"mohawks") ) { return hx::Val( mohawks ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rightArm") ) { return hx::Val( rightArm ); }
		if (HX_FIELD_EQ(inName,"rightLeg") ) { return hx::Val( rightLeg ); }
		if (HX_FIELD_EQ(inName,"collider") ) { return hx::Val( collider ); }
		if (HX_FIELD_EQ(inName,"friendly") ) { return hx::Val( friendly ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawnHead") ) { return hx::Val( drawnHead ); }
		if (HX_FIELD_EQ(inName,"getDamage") ) { return hx::Val( getDamage_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bodyLayers") ) { return hx::Val( bodyLayers ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getItemDamage") ) { return hx::Val( getItemDamage_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"attackCooldown") ) { return hx::Val( attackCooldown ); }
		if (HX_FIELD_EQ(inName,"animatedSprite") ) { return hx::Val( animatedSprite ); }
		if (HX_FIELD_EQ(inName,"targetPosition") ) { return hx::Val( targetPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Body_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"vz") ) { vz=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vx") ) { vx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vy") ) { vy=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"head") ) { _hx_set_head(HX_CTX_GET,inValue.Cast<  ::game::BodyPart >()); return inValue; }
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"chest") ) { _hx_set_chest(HX_CTX_GET,inValue.Cast<  ::game::BodyPart >()); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mohawk") ) { mohawk=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"leftArm") ) { _hx_set_leftArm(HX_CTX_GET,inValue.Cast<  ::game::BodyPart >()); return inValue; }
		if (HX_FIELD_EQ(inName,"leftLeg") ) { _hx_set_leftLeg(HX_CTX_GET,inValue.Cast<  ::game::BodyPart >()); return inValue; }
		if (HX_FIELD_EQ(inName,"mohawks") ) { _hx_set_mohawks(HX_CTX_GET,inValue.Cast<  ::haxe::ds::EnumValueMap >()); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rightArm") ) { _hx_set_rightArm(HX_CTX_GET,inValue.Cast<  ::game::BodyPart >()); return inValue; }
		if (HX_FIELD_EQ(inName,"rightLeg") ) { _hx_set_rightLeg(HX_CTX_GET,inValue.Cast<  ::game::BodyPart >()); return inValue; }
		if (HX_FIELD_EQ(inName,"collider") ) { _hx_set_collider(HX_CTX_GET,inValue.Cast<  ::differ::shapes::Circle >()); return inValue; }
		if (HX_FIELD_EQ(inName,"friendly") ) { friendly=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawnHead") ) { _hx_set_drawnHead(HX_CTX_GET,inValue.Cast<  ::game::BodyPart >()); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bodyLayers") ) { _hx_set_bodyLayers(HX_CTX_GET,inValue.Cast<  ::haxe::ds::EnumValueMap >()); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"attackCooldown") ) { attackCooldown=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animatedSprite") ) { _hx_set_animatedSprite(HX_CTX_GET,inValue.Cast<  ::bonsai::render::AnimatedSprite >()); return inValue; }
		if (HX_FIELD_EQ(inName,"targetPosition") ) { _hx_set_targetPosition(HX_CTX_GET,inValue.Cast<  ::kha::math::Vector2 >()); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Body_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("chest",c1,a6,b6,45));
	outFields->push(HX_("leftArm",95,2c,d7,f4));
	outFields->push(HX_("rightArm",e0,7b,11,e4));
	outFields->push(HX_("leftLeg",07,7a,df,f4));
	outFields->push(HX_("rightLeg",52,c9,19,e4));
	outFields->push(HX_("mohawk",af,eb,68,c3));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("attackCooldown",93,0b,f1,58));
	outFields->push(HX_("vz",44,67,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	outFields->push(HX_("vx",42,67,00,00));
	outFields->push(HX_("vy",43,67,00,00));
	outFields->push(HX_("collider",34,df,d5,c9));
	outFields->push(HX_("friendly",6b,8c,9b,ba));
	outFields->push(HX_("bodyLayers",c4,a9,cd,9f));
	outFields->push(HX_("mohawks",e4,4d,65,38));
	outFields->push(HX_("animatedSprite",08,df,a8,cb));
	outFields->push(HX_("targetPosition",1a,89,a6,dc));
	outFields->push(HX_("time",0d,cc,fc,4c));
	outFields->push(HX_("drawnHead",2a,ea,d5,ba));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Body_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::game::BodyPart */ ,(int)offsetof(Body_obj,head),HX_("head",20,29,0b,45)},
	{hx::fsObject /*  ::game::BodyPart */ ,(int)offsetof(Body_obj,chest),HX_("chest",c1,a6,b6,45)},
	{hx::fsObject /*  ::game::BodyPart */ ,(int)offsetof(Body_obj,leftArm),HX_("leftArm",95,2c,d7,f4)},
	{hx::fsObject /*  ::game::BodyPart */ ,(int)offsetof(Body_obj,rightArm),HX_("rightArm",e0,7b,11,e4)},
	{hx::fsObject /*  ::game::BodyPart */ ,(int)offsetof(Body_obj,leftLeg),HX_("leftLeg",07,7a,df,f4)},
	{hx::fsObject /*  ::game::BodyPart */ ,(int)offsetof(Body_obj,rightLeg),HX_("rightLeg",52,c9,19,e4)},
	{hx::fsInt,(int)offsetof(Body_obj,mohawk),HX_("mohawk",af,eb,68,c3)},
	{hx::fsInt,(int)offsetof(Body_obj,health),HX_("health",9c,28,06,fd)},
	{hx::fsFloat,(int)offsetof(Body_obj,attackCooldown),HX_("attackCooldown",93,0b,f1,58)},
	{hx::fsFloat,(int)offsetof(Body_obj,vz),HX_("vz",44,67,00,00)},
	{hx::fsFloat,(int)offsetof(Body_obj,z),HX_("z",7a,00,00,00)},
	{hx::fsFloat,(int)offsetof(Body_obj,vx),HX_("vx",42,67,00,00)},
	{hx::fsFloat,(int)offsetof(Body_obj,vy),HX_("vy",43,67,00,00)},
	{hx::fsObject /*  ::differ::shapes::Circle */ ,(int)offsetof(Body_obj,collider),HX_("collider",34,df,d5,c9)},
	{hx::fsBool,(int)offsetof(Body_obj,friendly),HX_("friendly",6b,8c,9b,ba)},
	{hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(Body_obj,bodyLayers),HX_("bodyLayers",c4,a9,cd,9f)},
	{hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(Body_obj,mohawks),HX_("mohawks",e4,4d,65,38)},
	{hx::fsObject /*  ::bonsai::render::AnimatedSprite */ ,(int)offsetof(Body_obj,animatedSprite),HX_("animatedSprite",08,df,a8,cb)},
	{hx::fsObject /*  ::kha::math::Vector2 */ ,(int)offsetof(Body_obj,targetPosition),HX_("targetPosition",1a,89,a6,dc)},
	{hx::fsFloat,(int)offsetof(Body_obj,time),HX_("time",0d,cc,fc,4c)},
	{hx::fsObject /*  ::game::BodyPart */ ,(int)offsetof(Body_obj,drawnHead),HX_("drawnHead",2a,ea,d5,ba)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Body_obj_sStaticStorageInfo = 0;
#endif

static ::String Body_obj_sMemberFields[] = {
	HX_("head",20,29,0b,45),
	HX_("chest",c1,a6,b6,45),
	HX_("leftArm",95,2c,d7,f4),
	HX_("rightArm",e0,7b,11,e4),
	HX_("leftLeg",07,7a,df,f4),
	HX_("rightLeg",52,c9,19,e4),
	HX_("mohawk",af,eb,68,c3),
	HX_("health",9c,28,06,fd),
	HX_("attackCooldown",93,0b,f1,58),
	HX_("vz",44,67,00,00),
	HX_("z",7a,00,00,00),
	HX_("vx",42,67,00,00),
	HX_("vy",43,67,00,00),
	HX_("collider",34,df,d5,c9),
	HX_("friendly",6b,8c,9b,ba),
	HX_("bodyLayers",c4,a9,cd,9f),
	HX_("mohawks",e4,4d,65,38),
	HX_("animatedSprite",08,df,a8,cb),
	HX_("targetPosition",1a,89,a6,dc),
	HX_("time",0d,cc,fc,4c),
	HX_("drawnHead",2a,ea,d5,ba),
	HX_("update",09,86,05,87),
	HX_("getItemDamage",18,b6,64,68),
	HX_("getDamage",a5,19,3b,9a),
	HX_("render",56,6b,29,05),
	::String(null()) };

hx::Class Body_obj::__mClass;

void Body_obj::__register()
{
	Body_obj _hx_dummy;
	Body_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("game.Body",be,d4,50,4a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Body_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Body_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Body_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Body_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
