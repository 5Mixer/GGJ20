// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_bonsai_entity_Entity
#include <hxinc/bonsai/entity/Entity.h>
#endif
#ifndef INCLUDED_bonsai_entity_ParticleSystem
#include <hxinc/bonsai/entity/ParticleSystem.h>
#endif
#ifndef INCLUDED_game_PunchParticleSystem
#include <hxinc/game/PunchParticleSystem.h>
#endif
#ifndef INCLUDED_kha__Color_Color_Impl_
#include <hxinc/kha/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d4c5042fb2fd368a_12_new,"game.PunchParticleSystem","new",0x5fe3bdf9,"game.PunchParticleSystem.new","game/PunchParticleSystem.hx",12,0x473aac58)
HX_LOCAL_STACK_FRAME(_hx_pos_d4c5042fb2fd368a_16_render,"game.PunchParticleSystem","render",0x95ad435d,"game.PunchParticleSystem.render","game/PunchParticleSystem.hx",16,0x473aac58)
HX_LOCAL_STACK_FRAME(_hx_pos_d4c5042fb2fd368a_24_update,"game.PunchParticleSystem","update",0x17895e10,"game.PunchParticleSystem.update","game/PunchParticleSystem.hx",24,0x473aac58)
HX_LOCAL_STACK_FRAME(_hx_pos_d4c5042fb2fd368a_29_spawnPunchParticles,"game.PunchParticleSystem","spawnPunchParticles",0x55302f13,"game.PunchParticleSystem.spawnPunchParticles","game/PunchParticleSystem.hx",29,0x473aac58)
namespace game{

void PunchParticleSystem_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d4c5042fb2fd368a_12_new)
HXLINE(  28)		this->direction = 0;
HXLINE(  14)		super::__construct(25);
            	}

Dynamic PunchParticleSystem_obj::__CreateEmpty() { return new PunchParticleSystem_obj; }

void *PunchParticleSystem_obj::_hx_vtable = 0;

Dynamic PunchParticleSystem_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PunchParticleSystem_obj > _hx_result = new PunchParticleSystem_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PunchParticleSystem_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x53b01352) {
		if (inClassId<=(int)0x34152b2d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x34152b2d;
		} else {
			return inClassId==(int)0x53b01352;
		}
	} else {
		return inClassId==(int)0x61169fa0;
	}
}

void PunchParticleSystem_obj::render( ::kha::graphics2::Graphics graphics){
            	HX_STACKFRAME(&_hx_pos_d4c5042fb2fd368a_16_render)
HXLINE(  17)		graphics->set_color(::kha::_Color::Color_Impl__obj::fromString(HX_("#ff3333",e3,f6,91,54)));
HXLINE(  18)		{
HXLINE(  18)			int _g = 0;
HXDLIN(  18)			::Array< ::Dynamic> _g1 = this->members;
HXDLIN(  18)			while((_g < _g1->length)){
HXLINE(  18)				 ::Dynamic particle = _g1->__get(_g);
HXDLIN(  18)				_g = (_g + 1);
HXLINE(  19)				graphics->fillRect(( (Float)(particle->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ),( (Float)(particle->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ),( (Float)(1) ),( (Float)(1) ));
            			}
            		}
HXLINE(  21)		graphics->set_color(-1);
            	}


void PunchParticleSystem_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_d4c5042fb2fd368a_24_update)
HXDLIN(  24)		int _g = 0;
HXDLIN(  24)		::Array< ::Dynamic> _g1 = this->members;
HXDLIN(  24)		while((_g < _g1->length)){
HXDLIN(  24)			 ::Dynamic particle = _g1->__get(_g);
HXDLIN(  24)			_g = (_g + 1);
HXLINE(  25)			 ::Dynamic particle1 = particle;
HXDLIN(  25)			particle1->__SetField(HX_("x",78,00,00,00),(particle1->__Field(HX_("x",78,00,00,00),hx::paccDynamic) + (( (Float)(particle->__Field(HX_("vx",42,67,00,00),hx::paccDynamic)) ) * dt)),hx::paccDynamic);
            		}
            	}


void PunchParticleSystem_obj::spawnPunchParticles(Float handx,Float handy,bool facingRight){
            	HX_STACKFRAME(&_hx_pos_d4c5042fb2fd368a_29_spawnPunchParticles)
HXLINE(  30)		if (facingRight) {
HXLINE(  31)			this->direction = 1;
            		}
            		else {
HXLINE(  33)			this->direction = -1;
            		}
HXLINE(  35)		{
HXLINE(  35)			int _g = 0;
HXDLIN(  35)			while((_g < 25)){
HXLINE(  35)				_g = (_g + 1);
HXDLIN(  35)				int i = (_g - 1);
HXLINE(  36)				this->spawnParticle( ::Dynamic(hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("x",78,00,00,00),handx)
            					->setFixed(1,HX_("y",79,00,00,00),handy)
            					->setFixed(2,HX_("vx",42,67,00,00),((::Math_obj::random() * ( (Float)(50) )) * ( (Float)(this->direction) )))));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PunchParticleSystem_obj,spawnPunchParticles,(void))


hx::ObjectPtr< PunchParticleSystem_obj > PunchParticleSystem_obj::__new() {
	hx::ObjectPtr< PunchParticleSystem_obj > __this = new PunchParticleSystem_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< PunchParticleSystem_obj > PunchParticleSystem_obj::__alloc(hx::Ctx *_hx_ctx) {
	PunchParticleSystem_obj *__this = (PunchParticleSystem_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PunchParticleSystem_obj), true, "game.PunchParticleSystem"));
	*(void **)__this = PunchParticleSystem_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PunchParticleSystem_obj::PunchParticleSystem_obj()
{
}

hx::Val PunchParticleSystem_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { return hx::Val( direction ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"spawnPunchParticles") ) { return hx::Val( spawnPunchParticles_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PunchParticleSystem_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { direction=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PunchParticleSystem_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("direction",3f,62,40,10));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo PunchParticleSystem_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(PunchParticleSystem_obj,direction),HX_("direction",3f,62,40,10)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PunchParticleSystem_obj_sStaticStorageInfo = 0;
#endif

static ::String PunchParticleSystem_obj_sMemberFields[] = {
	HX_("render",56,6b,29,05),
	HX_("update",09,86,05,87),
	HX_("direction",3f,62,40,10),
	HX_("spawnPunchParticles",7a,bf,7d,aa),
	::String(null()) };

hx::Class PunchParticleSystem_obj::__mClass;

void PunchParticleSystem_obj::__register()
{
	PunchParticleSystem_obj _hx_dummy;
	PunchParticleSystem_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("game.PunchParticleSystem",87,4d,e5,d4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PunchParticleSystem_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PunchParticleSystem_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PunchParticleSystem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PunchParticleSystem_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace game
